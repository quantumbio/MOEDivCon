#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

#set title   'QuantumBio Perturbation Interface'
#set class   'QuantumBio'
#set version '2010.01'
#set main 'qb_NMRScore'

function qb_CheckChgTestDivConCollection;
function qb_GetElemIndices;
function qb_GetWhich;
function qb_HamSetsInit;
function qb_PassBackbone;
function qb_RMSD;

/*  NOTE:  If you change the key lists here, you need to update the
 *         option lists and default indices in qbcore.svl and nmrpanel.svl.
           The unused Hamilitonians were masked when the core was created.
 */

const HAM_KEYS =
    [
    'am1',
    'mndo'
    ];

const DIVCON_HAM_KEYS =
    [
    'am1_nmr',
    'mndo_nmr'
    ];

global function qb_NMRPerturb [colmol, perfile, coreopts, appopts, errortests, 
        indices]

    local osys, nsys, errmess = "";
    if not MOE_BATCH then
        [osys, nsys] = SystemPush [];
    endif

    //  If there are any errors, return immediately.  Run all error tests
    //  unless forced not to by user.
    qb_HamSetsInit [];
    local [colressets, colok, colchgok, ckmsg]
        = qb_CheckChgTestDivConCollection [colmol, coreopts.colchg, errortests,
            errortests, errortests, coreopts.testH, coreopts.testMM,
            'nmr', HAM_KEYS (coreopts.ham)];

    if not alltrue [colok, colchgok] then
        if not colok then
            if tok_length ckmsg > 0 then
                errmess = cat [errmess, swrite ['Skipping!\n{}Skipping!',
                    ckmsg]];
            else
                errmess = cat [errmess, 
                    "Problematic molecule in collection, skipping!\n"];
            endif
        endif

        if not colchgok then
            errmess =  cat [errmess, 
                "Problematic charge for collection, skipping!"];
        endif

        oDestroy uniq cat oChains cat colressets;
        if not MOE_BATCH then
            SystemPop [osys, nsys];
        endif

        return [[], errmess];
    endif

    //  If there are any warnings, pass them up.
    if tok_length ckmsg > 0 then
        errmess = string ckmsg;
    endif

    local divconatoms = cat oAtoms cat colressets;
    local selatoms = (Atoms []) [indices];
    local divconindices = indexof [selatoms, divconatoms];
    if anytrue (divconindices == 0) then
        errmess = cat [swrite ['Skipping!  Atom indices are inconsistent:\n'
            '     MOE: {v}\n  DivCon: {v}\n', indices, divconindices], errmess];
          oDestroy uniq cat oChains cat colressets;
         return [[], errmess];
     endif

    local subdirname, delsubdir = 0;
    if coreopts.task === [] or coreopts.task === 0 then
        subdirname = coreopts.workdir;
    else
        delsubdir = 1;
        subdirname = twrite ['{}/qb_out{n:}', coreopts.workdir, coreopts.task];
        local okay = _fmkdir subdirname;
        if okay === -1 then
            errmess = cat [swrite ['Unable to create subdirectory:  {}',
                subdirname], errmess];
            oDestroy uniq cat oChains cat colressets;
            if not MOE_BATCH then
                SystemPop [osys, nsys];
            endif

            return [[], errmess];
        endif
    endif

    //  exe_open child process inherits parent's environment.
    local process_key = exe_open ['moedivconperturbation', subdirname, [], 1];
    local process_keys = [process_key];
    local status = exe_status process_keys;

    local prios = exe_getpriority process_keys;
    exe_setpriority [process_keys, prios];

    local stdin = exe_stdin process_keys;
    local stdout = exe_stdout process_keys;
    local stderr = exe_stderr process_keys;

    //  Pass the options and the two backbones to QuantumBio's DivCon NMRScore
    //
    //  SplitReceptor ensures that there is only one chain per molecule
    //  in the receptor collection.

    local ith, success = 0;

    fwrite [stdin, '{c:}\n', perfile];
    fwrite [stdin, '{c:}\n', colmol(1)(MOL_NAME)];
    fwrite [stdin, '{c:}\n', DIVCON_HAM_KEYS(coreopts.ham)];
    fwrite [stdin, '{c:}\n', select ['NOSTANDARD', 'STANDARD',
        coreopts.scaling === 1]];
    fwrite [stdin, '{n:}\n', length divconindices];
    for ith = 1, length divconindices, 1 loop
        fwrite [stdin, '{n:}\n', divconindices (ith)];
    endloop

    fwrite [stdin, '{n:}\n', coreopts.colchg];
    qb_PassBackbone [stdout, stdin, colressets, []];
    oDestroy uniq cat oChains cat colressets;
    if not MOE_BATCH then
        SystemPop [osys, nsys];
    endif

    //    results has the format:  [V1, V2, ... , Vn]
    local results = [], return_statement;
    local sleep_time = 0.1;
    local divconerrmess = "";
    local status_length=0;
    while exe_status process_key loop
        fwrite [stdin, '{c:}\n', 'status'];
        [[return_statement]] = fread [stdout, '{c:*}'];

        if return_statement === "noupdate" then
        elseif return_statement === "running" then
	    [[status_length]] = fread [stdout, '{n:}'];
            for status_length loop
                [[return_statement]] = fread [stdout, '{c:*}'];
                print ['running', return_statement];
            endloop
        elseif return_statement === "success" then
            results = rep [0.0, length divconindices];
            local [[numvals]] = fread [stdout, '{n:}'];
            for numvals loop
                local [[cspidx]] = fread [stdout, '{n:}'];
                local [[cspval]] = fread [stdout, '{n:}'];
                local idxidx = indexof [cspidx, divconindices];
                if idxidx === 0 then
                    errmess = cat [swrite ['Error! Atom index not found:\n'
                        '   {} not in {v}\n', cspidx, divconindices],
                        errmess];
                    return [[], errmess];
                endif

                results = poke [results, idxidx, cspval];
            endloop

            success = 1;
            fwrite [stdin, '{c:}\n', 'Ok'];

        elseif return_statement === "error" then
            [[return_statement]] = fread [stdout, '{c:*}'];
            if neL [return_statement, "DivCon done."] then
                divconerrmess = cat [divconerrmess, return_statement];
                [[return_statement]] = fread [stdout, '{c:*}'];
            endif
            while neL [return_statement, "DivCon done."] loop
                divconerrmess = cat [divconerrmess, "\n", return_statement];
                [[return_statement]] = fread [stdout, '{c:*}'];
            endloop;
            fwrite [stdin, '{c:}\n', 'Ok'];
        endif
        if not MOE_BATCH then
            sleep sleep_time;
        endif
    endloop

    //  Look for error messages from stderr.
    local [[newerror]] = fread [stderr, '{c:*}'];
    while length newerror > 0 loop
        // Hack!  Skip openmpi ignored error messages //DEBUG
        local errstrs = wordsplit [newerror, "()"];
        local errtoks = app token errstrs;
        local idx = indexof ['ignored', errtoks];
        if idx === 0 then
            write ['MOEDivCon: {}\n', newerror];
            errmess = cat [newerror, errmess];
        endif

        [[newerror]] = fread [stderr, '{c:*}'];
    endloop

    exe_kill  [process_key, 0];
    exe_kill  process_key;
    exe_close process_keys;

    //  Clean up working directory.
    if success === 1 then
        local templist = flist [subdirname, 'divcon.log'];
        if delsubdir then
            templist = cat [templist, subdirname];
        endif

        local delerr = app _fdelete templist;
        if anytrue delerr then
            local errfiles = templist | neE [delerr, 0];
            errmess = cat [swrite ['Unable to delete files: {v}',
                errfiles], errmess];
        endif
    endif

    if success === 1 then
        return [results, errmess];
    else
        if isnull divconerrmess then divconerrmess = "Unknown error!"; endif
        if isnull errmess then
            errmess = cat [divconerrmess,
                swrite ['\nLog file:  {}:{}/divcon.log',
                getenv 'HOSTNAME', subdirname]];
        else
            errmess = cat [divconerrmess,
                swrite ['\nLog file:  {}:{}/divcon.log\n',
                getenv 'HOSTNAME', subdirname], errmess];
        endif
        return [[], errmess];
    endif
endfunction


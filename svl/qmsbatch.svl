#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2009 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

//    qmsbatch.svl    Executes QMScore calculations in batch mode

#set title   'QuantumBio QMScore Batch'
#set class   'QuantumBio'
#set version '2009.01'
#set main    'qb_QMScoreBatch'

function qb_GetPoseFields;
function qb_GetRecFields;
function qb_GetOptions;
function qb_GetEnv;
function qb_SaveStatus;
function qb_SaveQMScore;
function qb_QMScore;

global function qb_QMScoreBatch [dbpath]

    if not MOE_BATCH then return; endif

    //  Extract molecules and run options from the database environment
    local dbkey = db_Open [dbpath, 'read-write'];
    local [recmols, ligmol, options] = qb_GetEnv [dbkey];
    local recchg;
    local workdir;
    if options.pwd === 1 then
        workdir = getenv 'PWD';
    else
        workdir = fabsname options.workdir;
    endif

    options.workdir = workdir;
    write ['Work Dir:  {}\n', workdir];  //DEBUG

    //  For each ligand pose in the database, calculate QM score.
    local rowkey = 0, count = 0;
    local total = db_nEntries (dbkey);
    local poseflds = qb_GetPoseFields [dbkey];
    local recflds = qb_GetRecFields [dbkey];
    local tid = task_key -1;
    loop
        if count === 0 or rowkey <> 0 then
            rowkey = db_NextEntry [dbkey, rowkey];
        endif

        if rowkey <> 0 then
            count = count + 1;
            options.task = count;
            local [posemol, posechg] = db_ReadFields [dbkey, rowkey, 
                [poseflds]];

            if options.mode === 'Many-to-Many' then
                [recmols, recchg] = db_ReadFields [dbkey, rowkey, [recflds]];
            else
                recchg = options.recchg;
            endif
        endif

        options.ligchg = posechg;
        options.recchg = recchg;

write ['Rec chg:  {}    Lig chg:  {}\n', options.recchg, options.ligchg];//DEBUG

        local [[results, errmess], code, seqno, indkey] = mpu_batch [
            select ['', 'call', rowkey === 0],
            'qb_QMScore', [recmols, posemol, options], [rowkey, tid]];

        if rowkey <> 0 then
            write ['Scoring pose {} of {}\n', count, total];
        endif

        if code === '' then
            if neL [tid, indkey(2)] then
                exit 'MPU/task conflict, aborting calculation.';
            endif

            if results === [] then
                if errmess === [] or errmess === '' then
                    errmess = "Unknown error!";
                endif
                qb_SaveStatus [dbkey, indkey(1), 
                  swrite ['Error:  {}', errmess]];
                write ['QMScore Error on pose {}:\n    {}\n', seqno, errmess];
            else
                qb_SaveQMScore [dbkey, indkey(1), results];
                qb_SaveStatus [dbkey, indkey(1), "Success"];
            endif

        elseif code === 'error' then
            if errmess === [] or errmess === '' then
                errmess = "Unknown error!";
            endif
            qb_SaveStatus [dbkey, indkey(1), 
                swrite ['Error:  {}', errmess]];

            write ['QMScore Error on pose {}:\n    {}\n', seqno, errmess];
        endif

    until code === 'eof'
    endloop

    db_Close dbkey;

endfunction

#svl

//    qmsbatch.svl    Executes QMScore calculations in batch mode

#set title   'QuantumBio QMScore Batch'
#set class   'QuantumBio'
#set version '2009.01'
#set main    'qb_QMScoreBatch'

function qb_GetPoseField;
function qb_GetRecField;
function qb_GetOptions;
function qb_GetEnv;
function qb_SaveStatus;
function qb_SaveQMScore;
function qb_QMScore;

global function qb_QMScoreBatch [dbpath]

    if not MOE_BATCH then return; endif

    //  Extract molecules and run options from the database environment
    local dbkey = db_Open [dbpath, 'read-write'];
    local [recmols, ligmol, options] = qb_GetEnv [dbkey];

    //  For each ligand pose in the database, calculate QM score.
    local rowkey = 0, count = 0;
    local total = db_nEntries (dbkey);
    local posefld = qb_GetPoseField [dbkey];
    local recfld = qb_GetRecField [dbkey];
    local tid = task_key -1;
    loop
        if count === 0 or rowkey <> 0 then
            rowkey = db_NextEntry [dbkey, rowkey];
        endif

        if rowkey <> 0 then
            count = count + 1;
            options.task = count;
            local posemol = first db_ReadFields [dbkey, rowkey, [posefld]];

            if options.mode === 'Many-to-Many' then
                recmols = db_ReadFields [dbkey, rowkey, [recfld]];
            endif
        endif

        local [[results, errmess], code, seqno, indkey] = mpu_batch [
            select ['', 'call', rowkey === 0],
            'qb_QMScore', [recmols, posemol, options], [rowkey, tid]];

        if rowkey <> 0 then
            write ['Scoring pose {} of {}\n', count, total];
        endif

        if code === '' then
            if neL [tid, indkey(2)] then
                exit 'MPU/task conflict, aborting calculation.';
            endif

            if results === [] then
                if errmess === [] or errmess === '' then
                    errmess = "Unknown error!";
                endif
                qb_SaveStatus [dbkey, indkey(1), 
                  swrite ['Error:  {}', errmess]];
                write ['QMScore Error on pose {}:\n    {}\n', seqno, errmess];
            else
                qb_SaveQMScore [dbkey, indkey(1), results];
                qb_SaveStatus [dbkey, indkey(1), "Success"];
            endif

        elseif code === 'error' then
            if errmess === [] or errmess === '' then
                errmess = "Unknown error!";
            endif
            qb_SaveStatus [dbkey, indkey(1), 
                swrite ['Error:  {}', errmess]];

            write ['QMScore Error on pose {}:\n    {}\n', seqno, errmess];
        endif

    until code === 'eof'
    endloop

    db_Close dbkey;

endfunction

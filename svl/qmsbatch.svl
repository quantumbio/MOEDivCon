#svl

//    qmsbatch.svl    Executes QMScore calculations in batch mode

#set title   'QMScore Batch'
#set class   'QM'
#set version '2009.01'
#set main    'qm_ScoreBatch'

function qms_GetMolField;
function qms_GetOptions;
function qms_GetEnv;
function qms_SaveScore;

function qms_Score;


global function qms_ScoreBatch [dbpath]

//    if not MOE_BATCH then local pdata = SystemPush []; endif

    local dbkey = db_Open [dbpath, 'read-write'];

    //  Extract molecules and run options from the database environment
    local [recmols, ligmol, options] = qms_GetEnv [dbkey];

    if not MOE_BATCH then Close [force:1]; endif
    local target = app mol_Create recmols;
    local ligand = mol_Create ligmol;
    View [];

    //  For each ligand pose in the database, calculate QM score
    local rowkey = 0, count = 0;
    local total = db_nEntries (dbkey);
    local molfld = qms_GetMolField [dbkey];
    local tid = task_key -1;
    local mess = 0;
    local ligpose = [];
    loop
        if not MOE_BATCH then
            if not ligpose === [] then oDestroy [ligpose]; endif
       endif
    
        if count == 0 or rowkey <> 0 then
            rowkey = db_NextEntry [dbkey, rowkey];
        endif

        if rowkey <> 0 then
            count = count + 1;
            options.task = count;
            local posemol = first db_ReadFields [dbkey, rowkey, [molfld]];
            mess = Message [mess, token swrite ['Scoring ligand {} of {}.',
                count, total]];
            ligpose = mol_Create posemol;
            View [];
        endif

        local [results, code, seqno, indkey] = mpu_batch [
            select ['', 'call', rowkey == 0],
            'qms_Score', [recmols, posemol, options], [count, rowkey, tid]];

        if code == '' then
            if neL [tid, indkey(3)] then
                exit 'MPU/task conflict, aborting calculation.';
            endif

            qms_SaveScore [dbkey, indkey(2), results];

        elseif code == 'error' then
                write ['*** Error on pose {} (dbkey {}:  {})\n', 
                    indkey(1), indkey(2), results];
        endif

    until code == 'eof'

    endloop

    db_Close dbkey;

//    if not MOE_BATCH then SystemPop pdata; endif

endfunction


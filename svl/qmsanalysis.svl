#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.

 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information,
 including trade secrets, belonging to QuantumBio Inc. and/or its
 affiliates.

 Use, duplication, or disclosure of this source code is strictly
 prohibited without prior written authorization by the management of
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif

#set title   'QuantumBio Analysis Interface'
#set class   'QuantumBio'
#set version '2010.02'
#set main 'qb_PWDAnalysis'

function qb_GetEnvAnal;
function qb_SaveAnalysisData;

const ENGERGIES =
    [
    "E_AB", "E_ABp", "E_ABc", "E_R6", "E_R12", "E_ELE"
    ];

global function qb_PWDAnalysis [qmsfilename]

    local plsdata = [], sardata = [], interdata = [], actdata = [], optLV = [];
    local errmess = "";

    local scorepath = './divcon.h5';
    scorepath = fbase scorepath;
    scorepath = twrite ['{}.h5', scorepath];

    //  exe_open child process inherits parent's environment.
    local process_key = exe_open ['moedivconanalysis', '.', [], 1];
    local process_keys = [process_key];
    local status = exe_status process_keys;

    local prios = exe_getpriority process_keys;
    exe_setpriority [process_keys, prios];

    local stdin = exe_stdin process_keys;
    local stdout = exe_stdout process_keys;
    local stderr = exe_stderr process_keys;

    //  Get necessary data from Database
    local qmsdbkey = db_Open [qmsfilename, 'read-write'];
    local pwdopts = qb_GetEnvAnal qmsdbkey;
    local numpairs = db_nEntries qmsdbkey;
    local activities = db_ReadColumn [qmsdbkey, pwdopts.expact_hdr]; 
    local energies = ENGERGIES | [pwdopts.sf_e_ab, pwdopts.sf_e_abp,
        pwdopts.sf_e_abc, pwdopts.sf_e_r6, pwdopts.sf_e_r12,
        pwdopts.sf_e_ele];

    //  Pass the target-ligand pairs, activities and options to 
    //  QuantumBio's Divcon PWD Analysis
    local handshake, success = 0;
    local idx;
    fwrite [stdin, '{c:}\n', 'pwd'];
    fwrite [stdin, '{c:}\n', scorepath];
    fwrite [stdin, '{c:}\n', pwdopts.title];
    fwrite [stdin, '{n:}\n', pwdopts.prune_zero / 100];
    fwrite [stdin, '{n:}\n', pwdopts.prune_sd];
    fwrite [stdin, '{n:}\n', pwdopts.numtopres];
    fwrite [stdin, '{n:}\n', pwdopts.numcomps];
    fwrite [stdin, '{n:}\n', pwdopts.trainingset];
    fwrite [stdin, '{n:}\n', length energies];
    for idx = 1, length energies, 1 loop
        fwrite [stdin, '{c:}\n', energies[idx]];
    endloop

    fwrite [stdin, '{n:}\n', numpairs];
    for idx = 1, numpairs, 1 loop
        fwrite [stdin, '{c:}\n', twrite ['rec{}', idx]];
        fwrite [stdin, '{c:}\n', twrite ['lig{}', idx]];
        fwrite [stdin, '{n:}\n', activities[idx]];
    endloop

    [[handshake]] = fread [stdout, '{n:}\n'];

write ['Handshake: {}\n', handshake];//DEBUG
write ['Parameters exe_status:  {}\n', exe_status process_keys];//DEBUG

    const NUMRESULTS = 11;
    local return_statement;
    local sleep_time = -1;
    local divconerrmess = "";
    while exe_status process_key loop
        if not MOE_BATCH then
            sleep sleep_time;
        endif

        [[return_statement]] = fread [stdout, '{c:*}'];

        write ['Divcon: {}\n', return_statement];//DEBUG

        if return_statement === "updateanalysis" then
            local name, nameValue;
            local parameter, parameterValue;
/*
            [[name]] = fread [stdout, '{c:*}'];
            [[nameValue]] = fread [stdout, '{c:*}'];
            results = cat [results, [[name, nameValue]]];
            for NUMRESULTS loop
                [[parameter]] = fread [stdout, '{c:*}'];
                [[parameterValue]] = fread [stdout, '{n:}'];
                results = cat [results, [[parameter, parameterValue]]];
            endloop
*/

            success = 1;
            fwrite [stdin, '{c:}\n', 'Ok'];

        elseif return_statement === "QBException" then
            [[return_statement]] = fread [stdout, '{c:*}'];
            if neL [return_statement, "Analysis done."] then
                divconerrmess = cat [divconerrmess, return_statement];
                [[return_statement]] = fread [stdout, '{c:*}'];
            endif
            while neL [return_statement, "Analysis done."] loop
                divconerrmess = cat [divconerrmess, "\n", return_statement];
                [[return_statement]] = fread [stdout, '{c:*}'];
            endloop;
            fwrite [stdin, '{c:}\n', 'Ok'];
        endif
    endloop

    //  Look for error messages from stderr.
    local [[newerror]] = fread [stderr, '{c:*}'];
    while length newerror > 0 loop
        write ['MOEDivcon: {}\n', newerror];//DEBUG
        errmess = cat [newerror, errmess];
        [[newerror]] = fread [stderr, '{c:*}'];
    endloop

write ['Results exe_status:  {}\n', exe_status process_keys];//DEBUG

    exe_kill  [process_key, 0];
    exe_kill  process_key;
    exe_close process_keys;

    if success === 1 then
        if not isnull plsdata then
            qb_SaveAnalysisData [qmsdbkey, 'pwd', 'pls', plsdata];
        endif

        if not isnull sardata then
            qb_SaveAnalysisData [qmsdbkey, 'pwd', 'sar', sardata];
        endif

        if not isnull interdata then
            qb_SaveAnalysisData [qmsdbkey, 'pwd', 'inter', interdata];
        endif

        if not isnull actdata then
            qb_SaveAnalysisData [qmsdbkey, 'pwd', 'act', actdata];
        endif

        if not isnull optLV then
            qb_SaveAnalysisData [qmsdbkey, 'pwd', 'optlv', optLV];
        endif
    else
        if isnull divconerrmess then divconerrmess = "Unknown error!"; endif
    endif

    db_Close qmsdbkey;

    return errmess;
endfunction


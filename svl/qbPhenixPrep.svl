#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2013 QuantumBio Inc. and/or its affiliates.
    
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif

// example: qbmoebatch -exec "run ['qbPhenixPrep.svl',['3V7Y.pdb',[enableAutoPrep:0,enableProtonate:1,enableLigFix:0],['test.cif','test2.cif']],'qbPhenixPrepFile']" -exit

// example: qbmoebatch -exec "run ['qbPhenixPrep.svl',['1A2C-phenix.pdb','1A2C-phenix.translation'],'qbPostPhenixFile']" -exit

function _Atoms;
function fwrite_PDB;
function pro_StandardRes;
function pro_PeptideFlags;

function CIF_fread_cif_all;
function cif_ExtractInfo;

// QB tool box
function qbPrepareSystem;
function qbCorrectAtomNames;
function qbCheckLicense;

// statics
static transFileName;
static residueNamesTaken;

const CORE_DEFAULTS = [
    enableAutoPrep:0,       // Run the MOE structure preparation tool.
    enableProtonate:1,      // Turns on Protonate3D
    protPH:7.4,              // Set pH for Protonation
    enableLigFix:0,          // Fixes the ligand protonation
    enableCIFprotons:1      // protonates structure based on CIF file prior to further processing
];

const PREPDEFAULTS = cat [CORE_DEFAULTS,[
    forceUseElement:1,         // force reading of the element in the PDB file. Not a good idea if file format broken.
    qmApplication:[],       // Skip the DivCon tests - we will be running no matter what since this is refinement.
    enableCIFprotons:1      // protonates structure based on CIF file prior to further processing
]];

local function WriteLog [line,basename,state]
    static logFileName;
    local fileHandle;

    if isnull state then
        state = 'none';
    endif

    if state == 'init' then
        logFileName = [];
        line = 'qbMOE INIT LOG\n\n';
    endif
    
    if isnull basename and isnull logFileName then
        logFileName = twrite ['{}.log','qbMOE'];
        fileHandle = fopenw logFileName;
    elseif isnull logFileName then
        logFileName = twrite ['{}-{}.log',basename,'qbMOE'];
        fileHandle = fopenw logFileName;
    else
        fileHandle = fopenx logFileName;
        fileHandle = fseek [fileHandle, fsize fileHandle];
    endif
    
    if state == 'getname' then
        fclose fileHandle;
        return logFileName;
    endif

    fwrite [fileHandle,'{} --- {}', asctime[], line];
    write ['{}', line];
    
    fclose fileHandle;
    return logFileName;
endfunction

// Source code between  // ===================== lines based on code provided by CCG 1/2013
// ===================== 
const MONLIB_CIF_DICT = [
    '_chem_comp.number_atoms_all':'int',
    '_chem_comp.number_atoms_nh':'int',
    '_chem_comp_atom.charge':'float',
    '_chem_comp_atom.partial_charge':'float',
    '_chem_comp_atom.x':'float',
    '_chem_comp_atom.y':'float',
    '_chem_comp_atom.z':'float',
    '_chem_comp_bond.value_dist':'float',
    '_chem_comp_bond.value_dist_esd':'float',
    '_chem_comp_angle.value_angle':'float',
    '_chem_comp_angle.value_angle_esd':'float',
    '_chem_comp_tor.value_angle':'float',
    '_chem_comp_tor.value_angle_esd':'float',
    '_chem_comp_tor.period':'float',
    '_chem_comp_plane_atom.dist_esd':'float'
];

local function cif2mol[ cif_file, root ]
    root = tolower root;

    local c = CIF_fread_cif_all [cif_file, MONLIB_CIF_DICT];
    local tt = tok_cat[ 'comp_', root ];
    local nn = length c.(tt).'_chem_comp_atom.atom_id';
    local x0 = rep[ 0, nn ];
    c.(tt).'_chem_comp_atom.x' = x0;
    c.(tt).'_chem_comp_atom.y' = x0;
    c.(tt).'_chem_comp_atom.z' = x0;

    local d = cif_ExtractInfo [c.(tt), [hetnam: string toupper root,
	    type:'monlibcif', havechg: 0, verbose:1]];
    return first d.models;
endfunction

// JT: takes atom keys from a template (dictionary), modify the ionization
//     state of the molecule and assign all the matching names from the
//     dictionary.
local function matchHydrogens[ cif_file, inResidue, root ]
    local amol = cat rAtoms inResidue;
    local amol_num = uniq aMoleculeNumber amol;
    if length amol_num <> 1 or 
        length cat amol <> length cat [Atoms[] | indexof[ aMoleculeNumber Atoms[], amol_num ]] then
        WriteLog [ twrite ['WARNING: {} residue {}:{} can not be processed with CIF-protonation\n\t(e.g. not single, complete, small molecule, residue)\n',rName inResidue, cName rChain inResidue, rUID inResidue] ];
        return [];
    endif
    
	// Match heavy atoms of each molecule
	// in a separate system
	// Idea: strip off hydrogens, set ionization
	// to zero and used the PrioSMI function
	// to find matching heavy (between dictionary and molecule)
	// IMPORTANT: it is expected that the two molecules have
	// the same connection table and differ only by the
	// ionization of their heavy atoms

    local sys_info = SystemPush amol;
    local m_h = (aElement Atoms[]) == 'H';
    oDestroy (Atoms[] | m_h);
    aSetIon[ Atoms[], 0 ];
    local x_smi_mol_heavy = aPrioSMI Atoms[];
    local s_heavy_mol = oSerialNumber Atoms[];
    local amolHeavyCnt = length cat Atoms[];
    SystemPop sys_info;

    sys_info = SystemPush[];
    local adict = first cAtoms first mol_Create cif2mol[ cif_file, root ];
    local name_prio = aName adict[ x_sort aPrioSMI adict ];
    m_h = (aElement Atoms[]) == 'H';
    local ion_heavy = aIon (Atoms[]| not m_h);
    local geo_heavy = aGeometry (Atoms[]| not m_h);
    oDestroy (Atoms[] | m_h );
    aSetIon[ Atoms[], 0 ];
    local ions_ordered_dict_heavy = ion_heavy[ x_sort aPrioSMI Atoms[] ];
    local geos_ordered_dict_heavy = geo_heavy[ x_sort aPrioSMI Atoms[] ];
    local cifHeavyCnt = length cat Atoms[];
    SystemPop sys_info;

    if amolHeavyCnt == cifHeavyCnt then
    // first test to make sure that this works as planned.
        sys_info = SystemPush amol;
        local testAmol = cat Atoms[];
        local amoli = testAmol[ pack indexof[ s_heavy_mol, oSerialNumber testAmol ]];
        local amolisorted = amoli[ x_sort x_smi_mol_heavy ];
        aSetIon[ amolisorted, ions_ordered_dict_heavy ];
        aSetGeometry[ amolisorted, geos_ordered_dict_heavy ];
        Add_H testAmol;
        local testAtmCnt = length cat Atoms[];
        SystemPop sys_info;
        if testAtmCnt == length name_prio then
            amoli = amol[ pack indexof[ s_heavy_mol, oSerialNumber amol ]];
            amolisorted = amoli[ x_sort x_smi_mol_heavy ];
            aSetIon[ amolisorted, ions_ordered_dict_heavy ];
            Add_H amol;
            amol = cat rAtoms inResidue;
            local x_smi_mol  = aPrioSMI amol;
            aSetName[  amol[ x_sort x_smi_mol ], name_prio ];
        else
            amoli = amol[ pack indexof[ s_heavy_mol, oSerialNumber amol ]];
            amolisorted = amoli[ x_sort x_smi_mol_heavy ];
            aSetIon[ amolisorted, ions_ordered_dict_heavy ];
            aSetGeometry[ amolisorted, geos_ordered_dict_heavy ];
            amol = [];
        endif
    else
        amol = [];
    endif
    if isnull amol then
        WriteLog [twrite ['WARNING: {} residue {}:{} can not be processed with CIF-protonation\n\t(e.g. due to disagreement in atom count between CIF and PDB)\n',rName inResidue, cName rChain inResidue, rUID inResidue]];
    endif
    return amol;
endfunction

local function applycif[ cif_file, root, atoms ]

    local newnames = [];
    
    if ftype cif_file === '' then
        WriteLog[twrite ['WARNING: CIF filename {} not found!\n', cif_file]];
        return newnames;
    endif
        
    local mol = cif2mol[ cif_file, root ];
    local dict_ckeys = mol_Create mol;
    local dict_akeys = cat cAtoms dict_ckeys;

    oDestroy dict_ckeys;
    
	// Map the names using unique smiles sorting

    local sys_info = SystemPush atoms;
    atoms = Atoms[];

    dict_ckeys = mol_Create mol;
    dict_akeys = cat cAtoms dict_ckeys;
    
    if length dict_akeys === length atoms then

        local x_smi_dict = aPrioSMI dict_akeys;
    
        local sorted_dictname = aName ( dict_akeys[ x_sort x_smi_dict ] );
    
        local x_smi_mol = aPrioSMI atoms;
        local x_mol = x_sort x_smi_mol;
        local sorted_akeys = atoms[ x_sort x_smi_mol ];
        if sort aPrioZQH atoms === sort aPrioZQH dict_akeys then
            newnames = sorted_dictname[ x_smi_mol ];
        endif
    endif

    SystemPop sys_info;
    return newnames;

endfunction

// lmw - occasionally the MOE PDB read/writer will manipulate atom names.
//      This function will return whether or not this is the case.
local function DoubleCheckCIFNames[inResidue,names]
    local mol = mol_Extract inResidue;
    local pdata = SystemPush [];
    fwrite_PDB ['1234567890-tmp.pdb',mol_Create mol];
    local testChains = ReadPDB['1234567890-tmp.pdb'];
    fdelete '1234567890-tmp.pdb';
    local newnames = cat aName rAtoms cResidues testChains;
    SystemPop pdata;
    return sort newnames === sort names;
endfunction

local function ProcessCIF[ cif_file, inResidue ]
    local atoms = cat rAtoms inResidue;
    local root = token first wordsplit[ string ftail[ cif_file], ".cif"];
    local names = applycif[ cif_file, root, atoms ];
    
    if not isnull names and DoubleCheckCIFNames[inResidue,names] then
        WriteLog[twrite [' INFO: Use  {} for residue {} {}:{}\n', cif_file, rName inResidue, cName rChain inResidue, rUID inResidue]];
        aSetName[ atoms, names ];
        residueNamesTaken = uniq sort cat [rName inResidue, residueNamesTaken];
        return inResidue;
    else
        WriteLog[twrite ['WARNING: incomplete representation for {} residue {}:{}\n', rName inResidue, cName rChain inResidue, rUID inResidue]];
    endif
endfunction

local function recursiveDirectoryList[directory]
    if isnull directory then
        return [];
    endif
    local list = flist directory;
    local tmpdir, filelist;
    for tmpdir in list loop
        if ftype tmpdir == 'dir' then
            filelist = append [filelist, recursiveDirectoryList[tmpdir]];
        else
            filelist = append [filelist, tmpdir];
        endif
    endloop  
    return cat filelist;
endfunction

local function GetRNamesFromCIF[ciffiles,tmpResidue]
    local tmpCIFfile = [];
    if isnull ciffiles then
        return tmpCIFfile;
    endif
    
    for tmpCIFfile in ciffiles loop
        local c = CIF_fread_cif_all [tmpCIFfile, MONLIB_CIF_DICT];
    
        local x;
        local availableResEntries = [];
        for x = 2, length c, 1 loop
            availableResEntries = cat [availableResEntries, token toupper second fieldsplit[string first cat c[x], "_"]];
        endloop
        if length join [availableResEntries, rName tmpResidue] > 0 then ; return tmpCIFfile; endif
    endloop
    return [];
endfunction

local function ProtonateBasedOnCif [residueList,ciffiles]
    local filelist = [];
    local fixedAtoms;
    if not isnull getenv 'PHENIX' then
        filelist = recursiveDirectoryList[tok_cat [getenv 'PHENIX', '/chem_data/']];
    endif
    if isnull cat [ciffiles,filelist] then
        WriteLog[twrite ['NOTE: No CIF files processed for protonation.\n']];
        return fixedAtoms;
    endif
    local tmpResidue;
    for tmpResidue in residueList loop
        local cifFile = GetRNamesFromCIF[ciffiles,tmpResidue];
        if isnull cifFile then
            cifFile = first cat [ fabsname filelist | fbase ftail filelist == rName tmpResidue ];
        endif
        if not isnull cifFile then
            WriteLog[twrite [' INFO: Attempting to use {} for protonation of {} residue {}:{}\n', cifFile, rName tmpResidue, cName rChain tmpResidue, rUID tmpResidue]];
            fixedAtoms = cat [fixedAtoms, matchHydrogens[cifFile, tmpResidue, rName tmpResidue]];
        endif
    endloop
    return fixedAtoms;
endfunction

local function RenameProtonsInOrder[inResidue]
    local allAtoms = cat rAtoms inResidue;
    local allPrios = aPrioSMI allAtoms;
    local tmpAtom;

    for tmpAtom in allAtoms loop
        if aElement tmpAtom == 'H' then
            aSetName [tmpAtom, twrite ['{}{}','H',allPrios(indexof[tmpAtom,allAtoms])]];
        endif
    endloop
endfunction

local function RenameBasedOnCIF [residueList,ciffiles]
    local phenixdb;
    if not isnull getenv 'PHENIX' then
        phenixdb = tok_cat [getenv 'PHENIX', '/chem_data/'];
        WriteLog[twrite ['NOTE: Using Phenix cif database found at {}\n', phenixdb]];
    else
        WriteLog[twrite ['\n']];
                     //            1         2         3         4         5         6         7         8
                     //   12345678901234567890123456789012345678901234567890123456789012345678901234567890
        WriteLog[twrite ['WARNING: In order to attempt the use of CIF-based naming, you must supply path \n']];
        WriteLog[twrite ['         to PHENIX cif database using $PHENIX environment variable as per \n']];
        WriteLog[twrite ['         PHENIX documentation.\n']];
        if isnull ciffiles then
            WriteLog[twrite ['\n']];
            return[];
        else
            WriteLog[twrite [' NOTE: Attempting to use CIF files provided.\n\n']];
        endif
    endif

    local tmpResidue;
    local residuesToRemove;
    local filelist = recursiveDirectoryList[phenixdb];
    for tmpResidue in residueList loop
        local cifFile = GetRNamesFromCIF[ciffiles,tmpResidue];
        if isnull cifFile then
            cifFile = first cat [ fabsname filelist | fbase ftail filelist == rName tmpResidue ];
        endif
        if not isnull cifFile then
            WriteLog[twrite [' INFO: Attempting to use {} for {} residue {}:{}\n', cifFile, rName tmpResidue, cName rChain tmpResidue, rUID tmpResidue]];
            residuesToRemove = cat [residuesToRemove, ProcessCIF[cifFile,tmpResidue]];
        else
            WriteLog[twrite ['WARNING: no CIF file found for {} residue {}:{} \n', rName tmpResidue, cName rChain tmpResidue, rUID tmpResidue]];
        endif
        // there are ocassions due to MOE-bugs or user errors, atoms are not uniquely named.
        local atNames = aName cat rAtoms tmpResidue | aElement cat rAtoms tmpResidue == 'H';
        if not (length uniq atNames == length atNames) then
            WriteLog[twrite ['WARNING: Fixed proton names for {} residue {}:{}\n', rName tmpResidue, cName rChain tmpResidue, rUID tmpResidue]];
            RenameProtonsInOrder[tmpResidue];
        endif
    endloop
    return residuesToRemove;
endfunction
// ===================== 

local function WriteResidue [outResidues]
    local fileHandle;
    static newResidueName;
    if isnull newResidueName then newResidueName = '100'; endif;
    local residueName = toupper rName first outResidues;
    if length pack indexof [residueNamesTaken,residueName] then
        fileHandle = fopenx transFileName;
        if newResidueName == '100' then
            fileHandle = fopenw transFileName;
                            //            1         2         3         4         5         6         7         8
                            //   12345678901234567890123456789012345678901234567890123456789012345678901234567890
            fwrite [fileHandle, '# The following is a list of temporary residue name translations. These \n'];
            fwrite [fileHandle, '# translations are provided in order to address Phenix atom/residue name \n'];
            fwrite [fileHandle, '# requirements. Upon completion of refinement, these translations can be \n'];
            fwrite [fileHandle, '# applied to recreate original using:\n'];
            fwrite [fileHandle, '# qbmoebatch -exec "run [\'qbPhenixPrep.svl\',[\'POSTPHENIX.pdb\',\'{}\'],\'qbPostPhenixFile\']"\n',transFileName];
        else
            fileHandle = fopenx transFileName;
            fileHandle = fseek [fileHandle, fsize fileHandle];
        endif
        local oldResidueName = residueName;
        residueName = totok [atoi newResidueName + 1];
        newResidueName = residueName;
        rSetName [outResidues, newResidueName];
        WriteLog[twrite ['NOTE (residue name conversion): {} = {} < {} >\n', newResidueName, oldResidueName, apt twrite ['{}:{}',cName rChain outResidues,rUID outResidues]]];
        fwrite [fileHandle, ' {} = {} < {} >\n', newResidueName, oldResidueName, apt twrite ['{}:{}',cName rChain outResidues,rUID outResidues]];
        fclose fileHandle;
    endif

    local mol = mol_Extract first outResidues;
    local pdata = SystemPush [];
    residueNamesTaken = cat [residueNamesTaken,residueName];
    local resPDBfilename = twrite ['{}.pdb',residueName];
    fwrite_PDB [resPDBfilename,mol_Create mol];
    SystemPop pdata;
    WriteLog[twrite [' INFO: Use {} for residue {}\n', resPDBfilename, rName outResidues]];
    return resPDBfilename;
endfunction

function GetDistanceToLigand[inResidue]

    local ligandPositions = cat _Atoms '$$ligand';
    local residuePosiions = cat rAtoms inResidue;
    if isnull ligandPositions or isnull residuePosiions then
        return 'NONE';
    endif

    local atomA, atomB;
    local shortDistance = 10000;
    for atomA in ligandPositions loop
        for atomB in residuePosiions loop
            local tmpValue = sqrt add pow [sub [aPos atomA, aPos atomB],2];
            if tmpValue < shortDistance then
                shortDistance = tmpValue;
            endif
        endloop
    endloop
    
    return shortDistance;

endfunction

local function FindPeptideBreaks[inChains]

    if isnull inChains then
        inChains = Chains[];
    endif
    local tmpChain;
    for tmpChain in inChains loop
        local residueList = cat cResidues tmpChain;
        residueList = residueList | rAtomCount residueList;
        residueList = diff [residueList, uniq aResidue _Atoms '$$solvent'];
        residueList = diff [residueList, uniq aResidue _Atoms '$$ligand'];
        local x = 1;
        while x < length residueList loop
            if not cat pro_PeptideFlags cat [residueList(x),residueList(x+1)] then
                WriteLog[twrite ['WARNING: No Peptide Bond: {} {}:{} ({} A) and {} {}:{} ({} A)\n',
                    rName residueList(x), cName rChain residueList(x), rUID residueList(x), GetDistanceToLigand residueList(x),
                    rName residueList(x+1), cName rChain residueList(x+1), rUID residueList(x+1),GetDistanceToLigand residueList(x+1)]];
            endif
            x = x + 1;
        endloop
    endloop
    
endfunction

local function ResiduePreparation []
    local testResidues = cat
        [pro_StandardRes[],'HOH','ASH','CYX','DA','DT','DG','DC','A','U','G','C',toupper el_Elements[]];
    local residueList = Residues[] | m_join [rName Residues [], testResidues] == 0;
    WriteLog[twrite ['Residues to treat: {}\n', uniq rName residueList]];
    return residueList;
endfunction

local function InputInputFiles[inpdbfile,forceUseElement]
    oDestroy Chains[];
    local tmpIn;
    tmpIn.alt_loc = 1;
    tmpIn.install_cryst = 1;
    tmpIn.use_element = forceUseElement;
    return length ReadPDB[inpdbfile,tmpIn];
endfunction

local function OutputInputFiles[residueList,ciffiles,filebase]
    // address a MOE-ism that renames HIS residues based on protonation
    rSetName [cat [Residues [] | rName Residues [] == 'HIP'],'HIS'];
    rSetName [cat [Residues [] | rName Residues [] == 'HID'],'HIS'];
    rSetName [cat [Residues [] | rName Residues [] == 'HIE'],'HIS'];

    transFileName = twrite['{}-phenix.translation',filebase];
    residueList = diff [residueList,RenameBasedOnCIF[residueList,ciffiles]];

    local data = app aName rAtoms residueList;
    data = app sort data;
    residueList = uniq residueList[x_sort data];

    local resPDBfilenames;
    local tmpIndexGrp;
    for tmpIndexGrp in indicesof [uniq x_fsort data,x_fsort data] loop
        resPDBfilenames = uniq cat [resPDBfilenames, WriteResidue[residueList[tmpIndexGrp]]];
    endloop

    FindPeptideBreaks[];
    local mainPDBfilename = twrite['{}-phenix.pdb',filebase];
    WritePDB[mainPDBfilename,[cryst1:1]];
    return [mainPDBfilename,resPDBfilenames];
endfunction

global function qbPhenixPrep [filebase,opt,ciffiles]
    // WARNING: removal/circumvention of license check code is a direct violation of license agreement!
    if not qbCheckLicense[] then
        return;
    endif
    WriteLog[ [], filebase, 'init'];
    local residueList = ResiduePreparation[];
    
    if opt.enableCIFprotons then
        opt.notProtAtomList = aNumber ProtonateBasedOnCif[residueList,ciffiles];
    endif

    qbPrepareSystem [opt];
    return OutputInputFiles[residueList,ciffiles,filebase];
endfunction

global function qbPhenixPrepFile[inpdbfile,opt,ciffiles]
    opt = tagcat[opt, PREPDEFAULTS];
    if not InputInputFiles[inpdbfile,opt.forceUseElement] then
        return;
    endif

    qbPhenixPrep[fbase inpdbfile,opt,ciffiles];
endfunction

global function qbPostPhenix [inpdbfile,trFile]
    if isnull trFile then
        trFile = twrite ['{}.translation',fbase inpdbfile];
    endif

    local fileHandle = fopenr [trFile];
    local line;
    while length (line = freadb [fileHandle, 'line', 1]) loop
        line = cat line;
        if line(1) <> "#" then
            local newName = first wordsplit [line, " "];
            local oldName = third wordsplit [line, " "];
            newName = token newName;
            oldName = token oldName;
            WriteLog[twrite ['  INFO: rename {} to {}\n', newName, oldName]];
            rSetName [Residues [] | rName Residues [] == newName,oldName];
        endif
    endloop
    fclose fileHandle;
endfunction

global function qbPostPhenixFile [inpdbfile,trFile]
    oDestroy Chains[];
    if not length ReadAuto[inpdbfile] then;
        return;
    endif
    qbPostPhenix[inpdbfile,trFile];
    WritePDB[twrite['{}-after.pdb',fbase inpdbfile]];
endfunction

// lmw - GUI window tool kit functions associated with our DivCon/Phenix MOE interface.


function qb_cLetter;

local function GenerateBatchScript [opt,batchfilename,inMainPDB,inLigPDBs,moeLog,ciffiles]

    local shscr = fopenw batchfilename;
              //             1         2         3         4         5         6         7         8
              //    12345678901234567890123456789012345678901234567890123456789012345678901234567890
    fwrite [shscr, '#!/bin/bash\n\n'];
    fwrite [shscr, 'QBPHENIX={}/bin/qbphenix\n',getenv 'QBHOME'];
    
    if not isnull getenv 'PHENIX' then
        fwrite [shscr, 'QBPHENIX_ENV={}/phenix_env.sh\n',getenv 'PHENIX'];
    else
        fwrite [shscr, 'QBPHENIX_ENV=\n'];
    endif
    fwrite [shscr, 'mtzFileName={}\n', ftail opt.mtzFile];
    fwrite [shscr, 'pdbFileName={}\n',ftail inMainPDB];
    fwrite [shscr, 'phenixFileName={}\n',ftail opt.phenix_success.phenixFile];
    local allKeys,allValues;
    if not isnull opt.phenix_success.phenixOptions then
        allKeys = first untag opt.phenix_success.phenixOptions;
        allValues = second untag opt.phenix_success.phenixOptions;
        fwrite [shscr, 'phenixOptions="{}"\n',apt twrite ['{}={}',allKeys, allValues]];
    else
        fwrite [shscr, 'phenixOptions=\n'];
    endif
    
    fwrite [shscr, 'moeLogName={}\n',ftail moeLog];
    fwrite [shscr, 'regionRefine={}\n',opt.regionRefine];
    fwrite [shscr, 'qmCore={}\n',opt.qmCore];
    fwrite [shscr, 'qmBuffer={}\n',opt.qmBuffer];
    fwrite [shscr, 'macroSkip={}\n',opt.onoff_macroskip];
    fwrite [shscr, 'setNP={}\n',opt.setNP];
    fwrite [shscr, 'setMem={}\n',opt.setMem];
    fwrite [shscr, 'macroCount={}\n',opt.macroCount];
    fwrite [shscr, 'selection="{}"\n',droplast swrite['{}', apt twrite ['chain {} and resname {} and resid {},',
        qb_cLetter rChain opt.coreList, rName opt.coreList, rUID opt.coreList]]];
    fwrite [shscr, 'labelList="{}"\n',opt.labelList];
    fwrite [shscr, '    \n'];
    
    fwrite [shscr, 'errorOut()    \n'];
    fwrite [shscr, '{}\n',"{"];
    fwrite [shscr, '    echo    \n'];
    fwrite [shscr, '    echo "Usage: ./{} [--np=4]"    \n',batchfilename];
    fwrite [shscr, '    echo     \n'];
    fwrite [shscr, '    echo "Optional Command line arguments:"    \n'];
    fwrite [shscr, '    echo " --help   * Show this help and exit."    \n'];
    fwrite [shscr, '    echo " --np=#   * Number of processors in simulation."    \n'];
    fwrite [shscr, '    echo     \n'];
    fwrite [shscr, '    echo " see: http://www.quantumbioinc.com/support/manual-phenixdc"    \n'];
    fwrite [shscr, '    echo     \n'];
    fwrite [shscr, '    exit 1    \n'];
    fwrite [shscr, '}    \n'];
    fwrite [shscr, '        \n'];

    fwrite [shscr, 'while test $# -gt 0; do\n'];
    fwrite [shscr, '    case "$1" in\n'];
    fwrite [shscr, '        -*=*) optarg=`echo "$1" | sed \'s/[-_a-zA-Z0-9]*=//\'` ;;\n'];
    fwrite [shscr, '        *) optarg= ;;\n'];
    fwrite [shscr, '    esac\n'];
    fwrite [shscr, '    case $1 in\n'];
    fwrite [shscr, '        --help)    \n'];
    fwrite [shscr, '            errorOut    \n'];
    fwrite [shscr, '            ;;    \n'];
    fwrite [shscr, '        --np=*) \n'];
    fwrite [shscr, '            setNP=$optarg   \n'];
    fwrite [shscr, '            ;;  \n'];
    fwrite [shscr, '        *)  \n'];
    fwrite [shscr, '            echo "ERROR: $optarg option unknown."  \n'];
    fwrite [shscr, '            errorOut  \n'];
    fwrite [shscr, '    esac    \n'];
    fwrite [shscr, '    shift   \n'];
    fwrite [shscr, 'done    \n'];
    fwrite [shscr, '        \n'];
    
    fwrite [shscr, 'function RunPhenix ()  \n'];
    fwrite [shscr, '{}   \n',"{"];
    fwrite [shscr, '    if [ -z "${}" ] ; then  \n', "{PHENIX}"];
    fwrite [shscr, '        if [ -e $QBPHENIX_ENV ] ; then      \n'];
    fwrite [shscr, '            source $QBPHENIX_ENV            \n'];
    fwrite [shscr, '        fi          \n'];
    fwrite [shscr, '    else            \n'];
    fwrite [shscr, '        echo "ERROR: Phenix must be installed as per its documentation."\n'];
    fwrite [shscr, '        errorOut  \n'];
    fwrite [shscr, '    fi          \n'];
    fwrite [shscr, '    if [ ! -e $QBPHENIX ] ; then    \n'];
    fwrite [shscr, '        QBPHENIX=`which qbphenix`   \n'];
    fwrite [shscr, '        if [ -z "${}" ] ; then     \n', "{QBPHENIX}"];
    fwrite [shscr, '            echo "ERROR: qbphenix executable not found in PATH!"    \n'];
    fwrite [shscr, '            errorOut  \n'];
    fwrite [shscr, '        fi  \n'];
    fwrite [shscr, '    fi  \n'];
    fwrite [shscr, '        \n'];
    fwrite [shscr, '    qbphenixopt="--sfFile $mtzFileName --pdbFile $pdbFileName --protonation Skip --NP $setNP -m ${}gb --ncycles macroCount --labels \'$labelList\'"\n','{setMem}'];
    fwrite [shscr, '    if [ $regionRefine -eq 1 ] ; then    qbphenixopt="$qbphenixopt  --selection \'$selection\' --region-radius $qmCore --buffer-radius $qmBuffer"  ;   fi    \n'];
    fwrite [shscr, '    if [ $macroSkip -eq 1 ] ; then    qbphenixopt="$qbphenixopt  --skipcycle 1"  ;   fi    \n'];
    fwrite [shscr, '    if [ -z "${}" ] ; then    qbphenixopt="$qbphenixopt  --paramFile $phenixFileName"  ;   fi    \n',"{phenixFileName}"];
    fwrite [shscr, '    if [ -z "${}" ] ; then    qbphenixopt="$qbphenixopt  --phenixOptions \'$phenixOptions\'"  ;   fi    \n',"{phenixOptions}"];
    fwrite [shscr, '    eval $QBPHENIX $qbphenixopt  \n'];
    fwrite [shscr, '}   \n'];
    fwrite [shscr, '        \n'];

    fwrite [shscr, 'function ProcessPackageFile    \n'];
    fwrite [shscr, '{}    \n',"{"];
    fwrite [shscr, '    outFileName=$1    \n'];
    fwrite [shscr, '    outFile=$2    \n'];
    fwrite [shscr, '        \n'];
    fwrite [shscr, '    if [ ! -e $outFileName ] ; then    \n'];
    fwrite [shscr, '        baseTranslatorTmp=`which openssl`    \n'];
    fwrite [shscr, '        if [ ! -z "${}" ] ; then    \n', "{baseTranslatorTmp}"];
    fwrite [shscr, '            baseTranslator="$baseTranslatorTmp base64 -d"    \n'];
    fwrite [shscr, '        else    \n'];
    fwrite [shscr, '            baseTranslatorTmp=`which base64`    \n'];
    fwrite [shscr, '            if [ ! -z "${}" ] ; then    \n', "{baseTranslatorTmp}"];
    fwrite [shscr, '                baseTranslator="$baseTranslatorTmp -d"    \n'];
    fwrite [shscr, '            else    \n'];
    fwrite [shscr, '                echo "ERROR: Script requires standard system installation of openssl or base64."    \n'];
    fwrite [shscr, '                echo "   Install openssl or place $outFileName in current directory and re-run."    \n'];
    fwrite [shscr, '                errorOut  \n'];
    fwrite [shscr, '            fi    \n'];
    fwrite [shscr, '        fi    \n'];
    fwrite [shscr, '        echo "$outFile" | $baseTranslator > $outFileName    \n'];
    fwrite [shscr, '    fi    \n'];
    fwrite [shscr, '}    \n'];
    fwrite [shscr, '        \n'];
    
    fwrite [shscr, '\nmtzFile=\'\n'];
    apt fwrite [shscr, '{}\n', r64_encodeln freadb [opt.mtzFile,'char',INT_MAX]];
    fwrite [shscr, '\'\n'];
    fwrite [shscr, 'ProcessPackageFile $mtzFileName "$mtzFile"\n'];
    
    fwrite [shscr, '\nmoeLog=\'\n'];
    apt fwrite [shscr, '{}\n', r64_encodeln freadb [moeLog,'char',INT_MAX]];
    fwrite [shscr, '\'\n'];
    fwrite [shscr, 'ProcessPackageFile $moeLogName "$moeLog"\n'];
    
    if not isnull opt.phenix_success.phenixFile then
        fwrite [shscr, '\nphenixFile=\'\n'];
        apt fwrite [shscr, '{}\n', r64_encodeln freadb [opt.phenix_success.phenixFile,'char',INT_MAX]];
        fwrite [shscr, '\'\n'];
        fwrite [shscr, 'ProcessPackageFile $phenixFileName "$phenixFile"\n'];
    endif

    fwrite [shscr, '\npdbFile=\'\n'];
    apt fwrite [shscr, '{}\n', r64_encodeln freadb [inMainPDB,'char',INT_MAX]];
    fwrite [shscr, '\'\n'];
    fwrite [shscr, 'ProcessPackageFile $pdbFileName "$pdbFile"\n'];

    local tmpLigFile;
    for tmpLigFile in inLigPDBs loop
        fwrite [shscr, '\n{}=\'\n',fbase ftail tmpLigFile];
        apt fwrite [shscr, '{}\n', r64_encodeln freadb [tmpLigFile,'char',INT_MAX]];
        fwrite [shscr, '\'\n'];
        fwrite [shscr, 'ProcessPackageFile {} "${}"\n',ftail tmpLigFile,fbase ftail tmpLigFile];
    endloop
    
    for tmpLigFile in ciffiles loop
        fwrite [shscr, '\n{}=\'\n',fbase ftail tmpLigFile];
        apt fwrite [shscr, '{}\n', r64_encodeln freadb [tmpLigFile,'char',INT_MAX]];
        fwrite [shscr, '\'\n'];
        fwrite [shscr, 'ProcessPackageFile {} "${}"\n',ftail tmpLigFile,fbase ftail tmpLigFile];
    endloop
    
    fwrite [shscr, 'RunPhenix\n'];
    
    fclose shscr;

endfunction

// Creates a "Create Batch File" panel.
// Returns the name of the proposed file if "Create" is pressed.
// Otherwise returns null.
// NOTE: based on dock_ui.svl available in MOE dist.
local function BatchPanel finame
    local wkey = WindowCreate [
        name: 'batchwin', windowName: 'batch',
        title: 'Phenix/DivCon: Create Batch File',
        text: ['Create', 'Cancel'],
        onTrigger: ['validate', 'return'],
        Hbox: [
            extendH: 1,
            FSBText: [
                name: 'batfile', len: 30,
                title: 'Batch File:',
                allowBlank: 0,
                mode: 'saveAs'
            ]
        ],

        Separator: [flushLeft: 1],

        Label: [ flushLeft: 1,
            text: 'See header of the batch file for usage information.'
        ]
    ];

    WindowSetData [wkey, [batfile: tok_cat [finame, '_batch.sh']]];
    WindowShow wkey;
    local [val, trig] = WindowWait wkey;
    WindowDestroy wkey;

    if val.batchwin == 'Create' then
        return val.batfile;
    else
        return [];
    endif
endfunction

local function cif_Window [wparent,residueList]
    static ciffiles;
    local wkey = WindowCreate
    [
        title: 'CIF Preparation',
        name: 'panel',
        text:   ['Run','Cancel'],
	    onTrigger: ['validate','return'],
	    bubbleHelp: [
		    'Run CIF-based atom typing and preparation.',
		    'Cancel without running CIF-based preparation.'
        ], 
        Label: [ name:'phenixStatus'],
        Vbox : 
        [
            title: 'CIF Files:',
            name: 'cifftxt',
            Listbox :
                [
                name: 'ciffilesBox',text: '',
                bubbleHelp:
                    'If PHENIX environment variable is set per PHENIX documentation,\n'
                    'CIF files will be used (not listed here). Additional CIF files can be chosen here.\n'
                    'NOTE: use of external CIF files will be ATTEMPTED, but any problems will be reported.'
                ],
            Button : [ name: 'browse_ciffiles', text: 'Browse...']
        ]
    ];
    local phenixdb;
    local cifFiles;
    if not isnull getenv 'PHENIX' then
        phenixdb = tok_cat [getenv 'PHENIX', '/chem_data/'];
        local filelist = recursiveDirectoryList[phenixdb];
        cifFiles = fabsname filelist | m_join [fbase ftail filelist,uniq rName residueList];
    endif
    
    if isnull phenixdb then
        WindowSetAttr[wkey, [   phenixStatus: [text:'WARNING: Phenix NOT installed'] ] ];
    else
        WindowSetAttr[wkey, [   phenixStatus: [text:twrite ['Using Phenix installed at\n   {}',getenv 'PHENIX'] ] ] ];
    endif
    
    WindowSetAttr[wkey, [   ciffilesBox:    [text : cifFiles]   ]];   
    local success = []; 
    WindowShow wkey;
    loop
        local [values, trigger] = WindowWait wkey;
        if trigger === 'panel' then
            if values.panel == 'Cancel' then break; endif
            if values.panel == 'Run' then
                aSetSelected [ ProtonateBasedOnCif[residueList,ciffiles] ,1 ]; 
                success = 1;
                break;
            endif        
        elseif trigger === 'browse_ciffiles' then
            ciffiles = FilePrompt [title:'Select User CIF Files', mode:'open', filter:'*.cif', multi:1];
            WindowSetAttr[wkey,[ciffilesBox: [text:ciffiles]]];
        endif
    endloop
    WindowDestroy wkey;
    return [ciffiles,success];
    
endfunction

local function phenix_Window [wparent]

    static ciffiles;
    local wkey = WindowCreate
    [
        title: 'Phenix-specific Settings',
        name: 'panel',
        text:   ['OK','Cancel'],
	    onTrigger: ['validate','return'],
	    bubbleHelp: [
		    'Return Phenix-specific configuration settings.',
		    'Cancel.'
        ], 
        Label: [ name:'phenixStatus'],
        Group:
        [
            Group : 
            [
                Vbox:   
                [
                    Listbox :
                        [
                        name: 'phenixOptionBox',
                        header: 'Option\tValue',
                        onTrigger: 'return',
                        type: 'modint',
                        multiSelect: 2,
                        sortEnable: 1,
                        resizeH: 1,
//                        headerMessage:'Phenix Options:',
                        bubbleHelp:
                            'TO FILL IN'
                        ]
                ],
                Hbox:
                [
                    columns:4,
                    Text:
                        [
                            name: 'optionKey',
                            emptyText:  'Phenix Option',
                            type:   'char',
                            len:    25,
                            allowBlank: 1,
                            bubbleHelp: 'Enter Phenix command line argument.'
                        ],
                    Text:
                        [
                            name: 'optionValue',
                            emptyText:  'Value',
                            type:   'char',
                            len:    5,
                            allowBlank: 1,
                            bubbleHelp: 'Enter value for Phenix command line argument.'
                        ],
                    Button:
                        [
                            name: 'optAddButton',
                            text: 'Add',
                            bubbleHelp: 'Add entered option to list.'
                        ],
                    Button:
                        [
                            name: 'optDeleteButton',
                            text: 'Delete',
                            bubbleHelp: 'Add selected option from list.'
                        ]

                ]
            ]
        ] ,
        Separator : [flushLeft:1],

        Hbox:
        [
            columns: 2,
            flushLeft:1,
            extendH:1,
            Text:
            [
                name: 'phenixFile',
                sensitive: 1,
                title: 'Phenix File:',
                type: 'char',
                extendH:1,
                allowBlank: 1,
                bubbleHelp:
                    '(Optional) Provide a Phenix Configuration/Scenario file.\n'
                    'Phenix/DivCon has been fully tested and deployed with default\n'
                    '  Phenix options. Changes to these defaults may lead to\n'
                    '  unexpected behavior.'
            ],
            Button:
            [
                name: 'button_selectPhenix', text : 'Browse...',
                bubbleHelp:
                    '(Optional) Provide a Phenix Configuration/Scenario file.\n'
                    'Phenix/DivCon has been fully tested and deployed with default\n'
                    '  Phenix options. Changes to these defaults may lead to\n'
                    '  unexpected behavior.'
            ]
        ]
    ];
    local phenixdb;
    local cifFiles;
    if not isnull getenv 'PHENIX' then
        phenixdb = tok_cat [getenv 'PHENIX'];
    endif
    
    if isnull phenixdb then
        WindowSetAttr[wkey, [   phenixStatus: [text:'WARNING: Phenix NOT installed'] ] ];
    else
        WindowSetAttr[wkey, [   phenixStatus: [text:twrite ['Using Phenix installed at\n   {}',phenixdb] ] ] ];
    endif
    
    local success = []; 
    local tmpFile;
    local phenixOptions;
    local allKeys, allValues;
    WindowShow wkey;
    loop
        local [values, trigger] = WindowWait wkey;
        if trigger === 'panel' then
            if values.panel == 'Cancel' then break; endif
            if values.panel == 'OK' then
                values.phenixOptions = phenixOptions;
                success = values;
                break;
            endif
        elseif trigger === 'button_selectPhenix' then
            tmpFile = FilePrompt [title:'Select Phenix File', mode:'open', filter:'*', multi:0];
            if not isnull tmpFile then
                WindowSetAttr [wkey,[ phenixFile:    [value:tmpFile] ]];
            endif
        elseif trigger === 'optAddButton' then
            if not isnull values.optionKey and not isnull values.optionValue then
                phenixOptions.(values.optionKey) = values.optionValue;
                allKeys = first untag phenixOptions;
                allValues = second untag phenixOptions;
                WindowSetAttr[wkey,[ phenixOptionBox: [ text:   apt twrite ['{}\t{}',allKeys, allValues] ]]];
            endif        
        elseif trigger === 'optDeleteButton' then
            phenixOptions = diff [phenixOptions, phenixOptions[first values.phenixOptionBox]];
            allKeys = first untag phenixOptions;
            allValues = second untag phenixOptions;
            WindowSetAttr[wkey,[ phenixOptionBox: [ text:   apt twrite ['{}\t{}',allKeys, allValues] ]]];
        elseif trigger === 'phenixOptionBox' then
            local selectedOptionID = bitshr [second values.phenixOptionBox,WMOD_NBITS];
            if selectedOptionID > 0 then
                 WindowSetAttr[wkey,[
                    optionKey:      [value:first untag phenixOptions[selectedOptionID]],
                    optionValue:    [value:second untag phenixOptions[selectedOptionID]]
                    ]];
            endif
        endif        
    endloop
    WindowDestroy wkey;
    return success;

endfunction

function mtz_Read;

global function qbPhenixPrepPanel[]

    local pdbfile = cTag first Chains[];    
    WriteLog[ [], fbase ftail pdbfile, 'init'];

    local config = gr_icon ['$MOE/lib/icon/config.ico', 12, 'foreground'];
    local cif_info = 'Warning: no CIFs entered';
    local phenix_info = 'Status: Phenix configuration not provided.';
    
    local strprep_info;
    local totalAtomCnt = length cat Atoms[];
    local hAtomCnt = length cat [Atoms [] | aElement Atoms[] == 'H'];
    local hPercent = hAtomCnt/totalAtomCnt;
    const hCutOff = 0.40;
    if hCutOff > hPercent then
        strprep_info = twrite['Warning: only {}% of atoms are protons',100*hPercent];
    else
        strprep_info = twrite['Not performed.'];
    endif
        
    local residueList = ResiduePreparation[];
    local coreList = uniq aResidue cat _Atoms '$$ligand';

	local wkey = WindowCreate
	[
	    name: 'panel',
	    title: 'Prepare System',
	    windowName: 'PhenixDivConPanel',
	    text: ['Help','Batch...','Cancel'],
	    onTrigger: ['return','validate','exit'],
	    bubbleHelp: [
	    'Help, Guidelines, and Support',
		'Generate Batch script for Phenix/DivCon...',
		'Cancel without creating Phenix/DivCon run script.'
	    ],
        Group :
        [
            Vbox:
            [
                columns: 2,
                flushLeft:1,
                extendH:1,
                Text:
                [
                    name: 'mtzFile',
                    sensitive: 1,
                    title: 'MTZ File:',
                    type: 'char',
                    extendH:1,
                    allowBlank: 0
                ],
                Button:
                [
                    name: 'button_selectMTZ', text : 'Browse...',
                    bubbleHelp:
                        'Read in MTZ file you wish to use for refinement.'
                ]
            ],
            Vbox:
            [
                columns: 2,
                Option:
                [
                    name: 'column_F',
                    title: 'SF Column:',
                    type: 'int',
                    bubbleHelp: 'Structure factor column within MTZ file.'
                ],
                Option:
                [
                    name: 'column_Q',
                    title: 'Sigma Column:',
                    type: 'int',
                    bubbleHelp: 'Sigma column within MTZ file.'
                ]
            ],
        Separator : [flushLeft:1],
            Mbox:
            [
                columns: 2,
                Button:
                [
                    title: 'CIF Preparation', name: 'button_CIFsetup', graphics: config,
                    bubbleHelp: 'Configure and run the CIF-based preparation.'
                ],
                Label : [ name: 'cif_info', text: cif_info ],
                Button:
                [
                    title: 'Structure Preparation', name: 'button_MOEPreparation', graphics: config,
                    bubbleHelp: 'Configure and run the MOE-based structure preparation.'
                ],
                Label : [ name: 'strprep_info', text: strprep_info ]
            ]
        ],

        Separator : [flushLeft:1],
        
        Group:
        [
            Checkbox: [ name: 'regionRefine', text: 'Region Refinement',onTrigger: 'return'],
            Group : 
            [
                Vbox:   
                [
                title: 'Core Residues:',
                name: 'coreResidues',
                    Button:
                        [
                            name: 'retrieveSelection', 
                            text: 'Retrieve Selection',
                            bubbleHelp: 'Retrieve selected residues and add to region refinement.'
                        ],
                    Listbox :
                        [
                        name: 'coreResiduesBox',
                        text: '',
                        width:30,
                        header: 'Chain\tRes\tUID',
                        onTrigger: 'return',
                        type: 'modint',
                        multiSelect: 1,
                        sortEnable: 1,
                        bubbleHelp:
                            'TO FILL IN'
                        ]
                ],
                Hbox:
                [
                    name: 'regionSizes',
                    columns:2,
                    Text:
                        [
                            name: 'qmCore',
                            title:  'QM Region (A): ',
                            type:   'real',
                            allowBlank: 0,
                            shortcut: ['5.0','4.0','3.0','2.0','1.0','0.0'],
                            bubbleHelp: 'Size of QM region beyond core residues noted above.'
                        ],
                    Text:
                        [
                            name: 'qmBuffer',
                            title:  'Buffer (A): ',
                            type:   'real',
                            allowBlank: 0,
                            shortcut: ['2.5','3.0','3.5','0.0'],
                            bubbleHelp: 'Size of QM buffer beyond QM Region.'
                        ]
                ]
            ]
        ] ,
        Separator : [flushLeft:1],
        Mbox:
        [
            columns:2,
            Hbox:
            [
                columns:1,
                flushLeft:0, 
                Text:
                [
                        name: 'macroCount',
                        title: 'Macrocycle Count: ',
                        type:   'int',
                        allowBlank: 0,
                        shortcut: ['1','2','3','4','5'],
                        bubbleHelp: 'Phenix will run this number of macrocycles before convergence.'
                ],
                Checkbox: 
                [ 
                    title: 'Skip First Macrocyle: ', 
                    name: 'onoff_macroskip',
                    bubbleHelp: 
                        'QM will not be used for the first macrocycle in order to address\n'
                        'starting structures of questionable quality.'
                ]
            ],
            Hbox:
            [
                columns:1,
                flushLeft:0, 
                Text:
                    [
                        name: 'setNP',
                        title: 'Processor Count: ',
                        type:   'int',
                        allowBlank: 0,
                        shortcut: ['1','2','4','8','16'],
                        bubbleHelp: 'The QM calculation is fully threaded for multiple processors.'
                    ],
                Text:
                    [
                        name: 'setMem',
                        title: 'Memory (GB): ',
                        type:   'int',
                        allowBlank: 0,
                        shortcut: ['1','2','4','8','16'],
                        bubbleHelp: 'Generally, the more memory the better with larger QM regions.'
                    ]
            ]
        ],
            Mbox:
            [
                columns: 2,
                Button:
                [
                    title: 'Phenix Configuration', name: 'button_PhenixSetup', graphics: config,
                    bubbleHelp: '(Optional) Provide Phenix-specific settings for the refinement.'
                ],
                Label : [ name: 'phenix_info', text: phenix_info ]
            ]
	];
	
	local function updateCoreResidueList [coreList]
	    return apt twrite ['{}\t{}\t{}',cName rChain coreList, rName coreList, rUID coreList];
	endfunction
	
    WindowSetAttr[wkey,
        [
            coreResiduesBox:
                [text : updateCoreResidueList[coreList],value: [igen length coreList]],
            regionRefine: [value: 1],
            qmCore: [value: 3.0],
            qmBuffer: [value: 2.5],
            setNP: [value:2],
            setMem: [value:2],
            macroCount: [value:3],
            onoff_macroskip: [value:0]
        ]
    ];
    
	WindowShow wkey;
	local ciffiles, success, phenix_success;
	local tmpFile;
    loop
        local [values, trigger] = WindowWait wkey;
// write ['DEBUG: {} | {}\n', values, trigger];
        if trigger === 'button_CIFsetup' then
            [ciffiles,success] = cif_Window[wkey,residueList];
            if isnull success then
                WindowSetAttr[wkey,[cif_info: [text:cif_info]]];
            else
                WindowSetAttr[wkey,[cif_info: [text:'Finished with CIF preparation']]];
            endif
        elseif trigger === 'button_MOEPreparation' then
            local before_run = length cat Atoms[];
            run ['structprep_ui.svl'];
            totalAtomCnt = length cat Atoms[];
            hAtomCnt = length cat [Atoms [] | aElement Atoms[] == 'H'];
            hPercent = hAtomCnt/totalAtomCnt;
            if hCutOff > hPercent then
                WindowSetAttr[wkey,[strprep_info: [text:twrite['Warning: only {}% of atoms are protons', 100*hPercent]]]];
            elseif before_run == totalAtomCnt then
                WindowSetAttr[wkey,[strprep_info: [text:'Note: no change in structure.']]];
            else
                WindowSetAttr[wkey,[strprep_info: [text:'Finished with MOE preparation']]];
            endif
        elseif trigger === 'regionRefine' then
            if values.regionRefine then
                WindowSetAttr[wkey,[coreResidues: [sensitive:1]]];
                WindowSetAttr[wkey,[regionSizes: [sensitive:1]]];
            else
                WindowSetAttr[wkey,[coreResidues: [sensitive:0]]];
                WindowSetAttr[wkey,[regionSizes: [sensitive:0]]];
            endif
        elseif trigger === 'coreResiduesBox' then
            local selectedResidueID = bitshr [second values.coreResiduesBox,WMOD_NBITS];
            if selectedResidueID > 0 then
                Isolate [coreList(selectedResidueID),Atoms[]];
            endif
        elseif trigger === 'retrieveSelection' then
            local newSelected = diff[Residues [] | rSelected Residues [],coreList];
            local prevLenCoreList = length coreList;
            coreList = cat [coreList, newSelected];
            WindowSetAttr[wkey,[
                coreResiduesBox: [
                    text:   updateCoreResidueList[coreList],
                    value:  [cat [first values.coreResiduesBox, igen length newSelected + prevLenCoreList]]
                    ]]];
        elseif trigger === 'button_selectMTZ' then
            tmpFile = FilePrompt [title:'Select MTZ File', mode:'open', filter:'*.mtz', multi:0];
            if not isnull tmpFile then
                local mtzContents = mtz_Read tmpFile;
                local mtzFColumns = first mtzContents.cdata | second mtzContents.cdata == 'F';
                local mtzQColumns = first mtzContents.cdata | second mtzContents.cdata == 'Q';
                WindowSetAttr [wkey,
                [
                    mtzFile:    [value:tmpFile],
                    column_F:   [text:mtzFColumns],
                    column_Q:   [text:mtzQColumns]
                ]];
            endif
        elseif trigger === 'button_PhenixSetup' then
            phenix_success = phenix_Window[wkey];
            if isnull phenix_success then
                WindowSetAttr[wkey,[phenix_info: [text:phenix_info]]];
            else
                WindowSetAttr[wkey,[phenix_info: [text:'Finished with Phenix Configuration']]];
            endif
        elseif trigger === 'panel' then
            if values.(trigger) == 'Batch...' then
                local batchname = BatchPanel fbase ftail pdbfile;
                if not isnull batchname then
                    local [mainPDBfilename,resPDBfilenames] = OutputInputFiles[residueList,ciffiles,fbase ftail pdbfile];
                    values.coreList = coreList[first values.coreResiduesBox];
                    values.labelList = twrite['{},{}',mtzFColumns[values.column_F],mtzQColumns[values.column_Q]];
                    values.phenix_success = phenix_success;
                    GenerateBatchScript[values,batchname,mainPDBfilename,resPDBfilenames,WriteLog[[],[],'getname'],ciffiles];
                    break;
                endif
            elseif values.(trigger) == 'Help' then
                LaunchDocument '$QBHOME/doc/help-refine.html';
            endif
        endif
    endloop
    WindowDestroy wkey;
endfunction

#eof

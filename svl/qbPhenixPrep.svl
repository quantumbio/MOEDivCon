#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2013 QuantumBio Inc. and/or its affiliates.
    
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif   


// example: qbmoebatch -exec "run ['qbPhenixPrep.svl',['1A2C.pdb',[enableAutoPrep:1,enableProtonate:1,enableLigFix:0]],'qbPhenixPrepFile']" -exit

// example: qbmoebatch -exec "run ['qbPhenixPrep.svl',['1A2C-phenix.pdb','1A2C-phenix.translation'],'qbPostPhenixFile']" -exit

function _Atoms;
function fwrite_PDB;
function pro_StandardRes;
function pro_PeptideFlags;

function CIF_fread_cif_all;
function cif_ExtractInfo;

// QB tool box
function qbPrepareSystem;
function qbCorrectAtomNames;

// statics
static transFileName;

const PREPDEFAULTS = [
    enableAutoPrep:0,       // Run the MOE structure preparation tool.
    enableProtonate:1,      // Turns on Protonate3D
    enableLigFix:0          // Fixes the ligand protonation
];

// Source code between  // ===================== lines based on code provided by CCG 1/2013
// ===================== 
const MONLIB_CIF_DICT = [
    '_chem_comp.number_atoms_all':'int',
    '_chem_comp.number_atoms_nh':'int',
    '_chem_comp_atom.charge':'float',
    '_chem_comp_atom.partial_charge':'float',
    '_chem_comp_atom.x':'float',
    '_chem_comp_atom.y':'float',
    '_chem_comp_atom.z':'float',
    '_chem_comp_bond.value_dist':'float',
    '_chem_comp_bond.value_dist_esd':'float',
    '_chem_comp_angle.value_angle':'float',
    '_chem_comp_angle.value_angle_esd':'float',
    '_chem_comp_tor.value_angle':'float',
    '_chem_comp_tor.value_angle_esd':'float',
    '_chem_comp_tor.period':'float',
    '_chem_comp_plane_atom.dist_esd':'float'
];

local function applycif[ cif_file, root, atoms ]

	// First read the cif file and build a db_mol data structure

    local c = CIF_fread_cif_all [cif_file, MONLIB_CIF_DICT];

    local tt = tok_cat[ 'comp_', root ];
    local nn = length c.(tt).'_chem_comp_atom.atom_id';
    local x0 = rep[ 0, nn ];
    c.(tt).'_chem_comp_atom.x' = x0;
    c.(tt).'_chem_comp_atom.y' = x0;
    c.(tt).'_chem_comp_atom.z' = x0;

    local d = cif_ExtractInfo [c.(tt), [hetnam: string toupper root,
	type:'monlibcif', havechg: 1, verbose:1]];

    local mol = first d.models;

	// Map the names using unique smiles sorting

    local [sys_old, sys_new] = SystemPush atoms;
    atoms = Atoms[];

    local dict_ckeys = mol_Create mol;
    local dict_akeys = cat cAtoms dict_ckeys;

    local newnames = [];

    if length dict_akeys === length atoms then

        local x_smi_dict = aPrioSMI dict_akeys;
    
        local sorted_dictname = aName ( dict_akeys[ x_sort x_smi_dict ] );
    
        local x_smi_mol = aPrioSMI atoms;
        local x_mol = x_sort x_smi_mol;
        local sorted_akeys = atoms[ x_sort x_smi_mol ];
        if sort aPrioZQH atoms === sort aPrioZQH dict_akeys then
            newnames = sorted_dictname[ x_smi_mol ];
        endif
    endif

    SystemPop[ sys_old, sys_new ];
    return newnames;

endfunction

static residueNamesTaken;
local function ProcessCIF[ cif_file, inResidue ]
    local atoms = cat rAtoms inResidue;
    local root = token first wordsplit[ string ftail[ cif_file], ".cif"];
    root = tolower root;
    local names = applycif[ cif_file, root, atoms ];
    
    if not isnull names then
        write [' INFO: Use  {} for residue {} {}:{}\n', cif_file, rName inResidue, cName rChain inResidue, rUID inResidue];
        aSetName[ atoms, names ];
        residueNamesTaken = uniq sort cat [rName inResidue, residueNamesTaken];
        return inResidue;
    else
        write ['WARNING: incomplete representation for {} residue {}:{}\n', rName inResidue, cName rChain inResidue, rUID inResidue];
    endif
endfunction

local function recursiveDirectoryList[directory]
    local list = flist directory;
    local tmpdir, filelist;
    for tmpdir in list loop
        if ftype tmpdir == 'dir' then
            filelist = append [filelist, recursiveDirectoryList[tmpdir]];
        else
            filelist = append [filelist, tmpdir];
        endif
    endloop  
    return cat filelist;
endfunction

local function RenameBasedOnCIF [residueList]
    local phenixdb;
    if isnull phenixdb then
        if not isnull getenv 'PHENIX' then
            phenixdb = tok_cat [getenv 'PHENIX', '/chem_data/'];
        else
               //            1         2         3         4         5         6         7         8
               //   12345678901234567890123456789012345678901234567890123456789012345678901234567890
            write ['WARNING: In order to attempt the use of CIF-based naming, you must supply path \n'];
            write ['         to PHENIX cif database using $PHENIX environment variable as per \n'];
            write ['         PHENIX documentation.\n\n'];
            return[];
        endif
    endif
    write ['NOTE: Using Phenix cif database found at {}\n', phenixdb];

    local tmpResidue;
    local foundResidues;
    local residuesToRemove;
    local filelist = recursiveDirectoryList[phenixdb];
    for tmpResidue in residueList loop
        local cifFile = fabsname filelist | fbase ftail filelist == rName tmpResidue;
        if not isnull cifFile then
            residuesToRemove = cat [residuesToRemove, ProcessCIF[cifFile,tmpResidue]];
        else
            write ['WARNING: no CIF file found for {} residue {}:{} \n', rName tmpResidue, cName rChain tmpResidue, rUID tmpResidue];
        endif
    endloop
    return residuesToRemove;
endfunction
// ===================== 

// This function provides an APPROXIMATE renaming scheme for ligands to PDBv3 standards
//  in order to address a MOE foible which does not name new protons based on the heavy element
//  to which it is attached leading to non-unique atom names within a ligand.
//  TODO: REMOVE or REPLACE - already replaced by call to qbCorrectAtomNames in qbFrom_structprep_ui.svl
local function RenameHforPDBv3 [allAtoms]
    local tmpAtm;
    for tmpAtm in allAtoms | aElement allAtoms == 'H' loop
        local boundHeavy = allAtoms | bOrder [tmpAtm, allAtoms];
        if not cat [aElement boundHeavy == 'C'] then
            if not strpos [string tok_cat ['H',aElement boundHeavy], string aName tmpAtm] then
                local newname = tok_cat['H',aElement boundHeavy,tok_drop[aName tmpAtm,1]];
                write [' INFO: {} in {} {}:{} changed to {}\n', aName tmpAtm, rName aResidue tmpAtm,cName rChain aResidue tmpAtm, rUID aResidue tmpAtm, newname];
                aSetName[tmpAtm,newname];
            endif
        endif
    endloop
endfunction

local function WriteResidue [outResidues]
    local fileHandle;
    static newResidueName;
    if isnull newResidueName then newResidueName = '100'; endif;
    local residueName = toupper rName first outResidues;
    if length pack indexof [residueNamesTaken,residueName] then
        fileHandle = fopenx transFileName;
        if newResidueName == '100' then
            fileHandle = fopenw transFileName;
                            //            1         2         3         4         5         6         7         8
                            //   12345678901234567890123456789012345678901234567890123456789012345678901234567890
            fwrite [fileHandle, '# The following is a list of temporary residue name translations. These \n'];
            fwrite [fileHandle, '# translations are provided in order to address Phenix atom/residue name \n'];
            fwrite [fileHandle, '# requirements. Upon completion of refinement, these translations can be \n'];
            fwrite [fileHandle, '# applied to recreate original using:\n'];
            fwrite [fileHandle, '# qbmoebatch -exec "run [\'qbPhenixPrep.svl\',[\'POSTPHENIX.pdb\',\'{}\'],\'qbPostPhenixFile\']"\n',transFileName];
        else
            fileHandle = fopenx transFileName;
            fileHandle = fseek [fileHandle, fsize fileHandle];
        endif
        local oldResidueName = residueName;
        residueName = totok [atoi newResidueName + 1];
        newResidueName = residueName;
        rSetName [outResidues, newResidueName];
        write ['NOTE (residue name conversion): {} = {} < {} >\n', newResidueName, oldResidueName, apt twrite ['{}:{}',cName rChain outResidues,rUID outResidues]];
//        fwrite [fileHandle, ' {} = {} : {}\n', newResidueName, oldResidueName,  twrite ['{}-{}',tr [rUID outResidues, cName rChain outResidues]]];
        fwrite [fileHandle, ' {} = {} < {} >\n', newResidueName, oldResidueName, apt twrite ['{}:{}',cName rChain outResidues,rUID outResidues]];
        fclose fileHandle;
    endif

    local mol = mol_Extract first outResidues;
    local pdata = SystemPush [];
    residueNamesTaken = cat [residueNamesTaken,residueName];
    fwrite_PDB [twrite ['{}.pdb',residueName],mol_Create mol];
    SystemPop pdata;
    write [' INFO: Use {}.pdb for residue {}\n', residueName, rName outResidues];

endfunction

function GetDistanceToLigand[inResidue]

    local ligandPositions = cat _Atoms '$$ligand';
    local residuePosiions = cat rAtoms inResidue;
    if isnull ligandPositions or isnull residuePosiions then
        return 'NONE';
    endif

    local atomA, atomB;
    local shortDistance = 10000;
    for atomA in ligandPositions loop
        for atomB in residuePosiions loop
            local tmpValue = sqrt add pow [sub [aPos atomA, aPos atomB],2];
            if tmpValue < shortDistance then
                shortDistance = tmpValue;
            endif
        endloop
    endloop
    
    return shortDistance;

endfunction

local function FindPeptideBreaks[inChains]

    if isnull inChains then
        inChains = Chains[];
    endif
    local tmpChain;
    for tmpChain in inChains loop
        local residueList = cat cResidues tmpChain;
        residueList = residueList | rAtomCount residueList;
        residueList = diff [residueList, uniq aResidue _Atoms '$$solvent'];
        residueList = diff [residueList, uniq aResidue _Atoms '$$ligand'];
        local x = 1;
        while x < length residueList loop
            if not cat pro_PeptideFlags cat [residueList(x),residueList(x+1)] then
                write ['WARNING: No Peptide Bond: {} {}:{} ({} A) and {} {}:{} ({} A)\n',
                    rName residueList(x), cName rChain residueList(x), rUID residueList(x), GetDistanceToLigand residueList(x),
                    rName residueList(x+1), cName rChain residueList(x+1), rUID residueList(x+1),GetDistanceToLigand residueList(x+1)];
            endif
            x = x + 1;
        endloop
    endloop
    
endfunction

global function qbPhenixPrep [inpdbfile,opt]
    opt = tagcat[opt, PREPDEFAULTS];
    local testResidues = cat
        [pro_StandardRes[],'HOH','ACE','NME','ASH','CYX','DA','DT','DG','DC','A','U','G',
        'C','AG','AL','AM','AS','AU','BA','BE','BR','CA','CL','CO','CS','CU','FE','GA',
        'GE','HE','HG','HO','IN','KR','LI','MG','MN','MO','NA','NE','NI','PB','PD','PT',
        'PU','RB','SC','SE','SI','SM','SN','SR','TC','TE','TL','XE','YB','ZN','AC','AT',
        'BI','BK','CE','CF','DY','ER','ES','EU','FM','FR','HF','LA','LR','LU','MD','NB',
        'ND','NP','OS','PA','PM','PO','PR','RA','RE','RH','RN','RU','SB','TA','TB','TH',
        'TI','TM','ZR'];
    local residueList = Residues[] | m_join [rName Residues [], testResidues] == 0;
    write ['Residues to treat: {}\n', uniq rName residueList];
    qbPrepareSystem [opt];
    
    // address a MOE-ism that renames HIS residues based on protonation
    rSetName [cat [Residues [] | rName Residues [] == 'HIP'],'HIS'];
    rSetName [cat [Residues [] | rName Residues [] == 'HID'],'HIS'];
    rSetName [cat [Residues [] | rName Residues [] == 'HIE'],'HIS'];

//    RenameHforPDBv3[cat rAtoms residueList];  // replaced by:
    qbCorrectAtomNames[];
    transFileName = twrite['{}-phenix.translation',fbase inpdbfile];
    residueList = diff [residueList,RenameBasedOnCIF[residueList]];

    local data = app aName rAtoms residueList;
    data = app sort data;
    residueList = uniq residueList[x_sort data];

    local tmpIndexGrp;
    for tmpIndexGrp in indicesof [uniq x_fsort data,x_fsort data] loop
        WriteResidue[residueList[tmpIndexGrp]];
    endloop

    FindPeptideBreaks[];
endfunction

global function qbPhenixPrepFile[inpdbfile,opt]
    oDestroy Chains[];
    if not length ReadAuto[inpdbfile] then
        return;
    endif
    qbPhenixPrep[inpdbfile,opt];
    WritePDB[twrite['{}-phenix.pdb',fbase inpdbfile]];
endfunction

global function qbPostPhenix [inpdbfile,trFile]
    if isnull trFile then
        trFile = twrite ['{}.translation',fbase inpdbfile];
    endif

    local fileHandle = fopenr [trFile];
    local line;
    while length (line = freadb [fileHandle, 'line', 1]) loop
        line = cat line;
        if line(1) <> "#" then
            local newName = first wordsplit [line, " "];
            local oldName = third wordsplit [line, " "];
            newName = token newName;
            oldName = token oldName;
            write ['  INFO: rename {} to {}\n', newName, oldName];
            rSetName [Residues [] | rName Residues [] == newName,oldName];
        endif
    endloop
    fclose fileHandle;
endfunction

global function qbPostPhenixFile [inpdbfile,trFile]
    oDestroy Chains[];
    if not length ReadAuto[inpdbfile] then;
        return;
    endif
    qbPostPhenix[inpdbfile,trFile];
    WritePDB[twrite['{}-after.pdb',fbase inpdbfile]];
endfunction

#eof

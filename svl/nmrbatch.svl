#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.

 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information,
 including trade secrets, belonging to QuantumBio Inc. and/or its
 affiliates.

 Use, duplication, or disclosure of this source code is strictly
 prohibited without prior written authorization by the management of
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif

//    nmrbatch.svl    Executes NMRScore calculations in batch mode

#set title   'QuantumBio NMRScore Batch'
#set class   'QuantumBio'
#set version '2010.02'
#set main    'qb_NMRScoreBatch'

function qb_GetAnalysisData;
function qb_GetPoseFields;
function qb_GetRecFields;
function qb_GetNMRSEnv;
function qb_SaveDivconStatus;
function qb_SaveNMRScore;
function qb_NMRScore;


/****************************************************************************
 *                          qb_NMRScoreBatch
 *
 *  Execute NMRScore for each row of the scoring database.
 *
 *  WARNING:  breaking into core
 *
****************************************************************************/
global function qb_NMRScoreBatch [dbpath]

    if not MOE_BATCH then return; endif

    //  Extract molecules, run options and experimental data from the
    //  database environment
    local dbkey = db_Open [dbpath, 'read-write'];
    local [recmols, ligmol, s, coreopts, nmropts] = qb_GetNMRSEnv [dbkey];
    local [indices, names, free, bound] = qb_GetAnalysisData [dbkey,
        'nmr', 'exp'];

    local workdir;
    if coreopts.cwd === 1 then
        workdir = getenv 'PWD';
    else
        workdir = fabsname coreopts.workdir;
    endif

    coreopts.workdir = workdir;
    write ['Work Dir:  {}\n', workdir];

    //  For each ligand pose in the database, calculate NMR score.
    local nrows = db_nEntries dbkey;
    local rowkey = 0, rowcnt = 0;
    local poseflds = qb_GetPoseFields [dbkey];
    local recflds = qb_GetRecFields [dbkey];
    local recchg;
    local tid = task_key -1;
    loop
        if rowcnt === 0 or rowkey <> 0 then
            rowkey = db_NextEntry [dbkey, rowkey];
        endif

        if rowkey <> 0 then
            rowcnt = rowcnt + 1;
            coreopts.task = rowcnt;
            local [posemol, posechg] = db_ReadFields [dbkey, rowkey, poseflds];

            if coreopts.mode === 'Many-to-Many' then
                [recmols, recchg] = db_ReadFields [dbkey, rowkey, recflds];
            else
                recchg = coreopts.recchg;
            endif
        endif

        coreopts.ligchg = posechg;
        coreopts.recchg = recchg;

        local [[results, errmess], code, seqno, indkey] = mpu_batch [
            select ['', 'call', rowkey === 0],
            'qb_NMRScore', [recmols, posemol, coreopts, nmropts,
            indices, free, bound], [rowkey, tid]];

        if rowkey <> 0 then
            write ['Scoring pose {} of {}\n', rowcnt, nrows];
        endif

        if code === '' then
            if neL [tid, indkey(2)] then
                exit 'MPU/task conflict, aborting calculation.';
            endif

            if results === [] then
                if errmess === [] or errmess === '' then
                    errmess = "Unknown error!";
                endif
                qb_SaveDivconStatus [dbkey, indkey(1),
                    swrite ['Error:  {}\n', errmess]];
                write ['NMRScore Error on pose {}:\n    {}\n', seqno, errmess];
            else
                local [score, posevals] = results;  //TEST
                qb_SaveNMRScore [dbkey, rowkey, score, tag [names, posevals]];

                local sucmess = "Success";
                if not isnull errmess then
                    sucmess = cat [sucmess, "-warnings!\n", errmess];
                else
                    sucmess = cat [sucmess, "\n"];
                endif
                qb_SaveDivconStatus [dbkey, indkey(1), sucmess];
            endif

        elseif code === 'error' then
            if errmess === [] or errmess === '' then
                errmess = "Unknown error!";
            endif
            qb_SaveDivconStatus [dbkey, indkey(1),
                swrite ['Error:  {}\n', errmess]];

            write ['NMRScore Error on pose {}:\n    {}\n', seqno, errmess];
        endif

    until code === 'eof'
    endloop

    db_Close dbkey;

endfunction

#svl

// ScoreMTScore_dG takes receptor atoms and ligand atoms and returns an 
// estimate of the binding affinity using the MTScore dG. This is a one-shot 
// calculation
// FUNCTION : 	Calculate the MTScore score between recatoms and ligatoms
// INPUT: 	recatoms = receptor atoms
//		ligatoms = ligand atoms
//		ff = options (1 = [fast]endpoint parameters,2 = [slower]endemble parameters)
//		rec = if docking cached receptor energy terms.
// RETURN:	MTScore score.
// NOTE:	This function must be used within a private system.

function qbWS_MTScore;

local function ScoreMTScore_dG [recatoms, ligatoms, ff, rec]
    // This function is effectively a "wrapper" for the call to the MTScore webservice
//    local tmpJSON = qbWS_MTScore [diff [Atoms[], _Atoms '$$ligand'],_Atoms '$$ligand'];
    local tmpJSON = qbWS_MTScore [recatoms,ligatoms];
// write ['tmpJSON: {} \n', tmpJSON];
    return atof tmpJSON.('MTScoreES');
endfunction

global function dock_score_qbMTScore [cmd, arg, opt]
    local ligpos = [], lig = [], rec=[], score;

    const MTSCORE_OPT_DEFAULTS = [
        ['mttyperdio',      'Endstate'         ]
    ];
    
    const MTTYPES = [
        'Endstate',
        'Ensemble'
    ];

    local DEFAULTS = [
        qbWSHostname: GetRC ['QuantumBio.qbWSHostname','localhost'],
        qbWSPort:     GetRCNumber ['QuantumBio.qbWSPort',8080]
    ];
    
    const PANEL = [
        Mbox : [
            Text : [
                title: 'Hostname:', name: 'qbWSHostname', type: 'char',
                shortcut: ['localhost'],
                bubbleHelp: 'Enter hostname (default: localhost).'
            ],
            Text : [
                title: 'Port:', name: 'qbWSPort', type: 'int',
                shortcut: ['8080','8081','8082'],
                bubbleHelp: 'Enter the port number (default: 8080).'
            ]
        ]
    ];
    
//    write ['DEBUG: cmd: {} | arg: {}\n', cmd, arg];

    if cmd === 'ID' then
        return 'MTScoreES dG [QuantumBio]';
    elseif cmd === 'configpanelwidgets' then
        return PANEL;
    elseif cmd === 'configpanelevent' then   // arg = [val, trig]
        local [val, trig, wkey] = arg;
        return 0;
    elseif cmd === 'configvalues' then        // arg = val
        return tagcat [arg, DEFAULTS];
    elseif cmd === 'validateOptions' then        // arg = val
        SetRC ['QuantumBio.qbWSHostname',arg.qbWSHostname];
        SetRCNumber ['QuantumBio.qbWSPort',arg.qbWSPort];
//        write ['RC: {} | {}\n', arg.qbWSHostname, arg.qbWSPort];
        return;
    elseif cmd === 'openReceptor' then      // arg = rec
        return;
    elseif cmd === 'closeReceptor' then     // arg = rec
        return;
    elseif cmd === 'openLigand' then        // arg = lig
        return;
    elseif cmd === 'closeLigand' then       // arg = lig
        return;
    elseif not (cmd === 'score') then       // arg = [ligpos, lig, rec]
        return;
    endif
    
    [ligpos, lig, rec] = arg;
    SetRC ['QuantumBio.qbWSHostname',opt.qbWSHostname];
    SetRCNumber ['QuantumBio.qbWSPort',opt.qbWSPort];
    opt = tagcat [opt, DEFAULTS];

    local [osys, nsys] = SystemPush [];
    oDestroy Chains [];
    
    local recatoms = cat oAtoms mol_Create *rec.mol;
    local ligatoms = cat oAtoms mol_Create *lig.mol;
    aSetPos [ligatoms, ligpos];

    local starttime = clock[];
    score = ScoreMTScore_dG [recatoms, ligatoms];
    write ['MTScoreES (dG): {} kcal/mol in {} secs\n', score, (clock[] - starttime)];
        
    oDestroy Chains [];
    SystemPop [osys, nsys];
    return score;
endfunction

function MM; // forward declaration
global function qbInteractiveMTScoreUpdate []
    const RUNNINGMT = 'Running MTScore to update current binding affinity....';
    const RUNNINGMM = 'Running MM opt of ligand+pocket to update current binding affinity....';
    local currentState = 0;
    local currentPos = aPos Atoms[];
    if second task_fork[] == 'child' then
        task_settitle [-1, 'qbInteractiveMTScoreUpdate'];
        local msgkey = Message [ 0, '' ];
        loop
            if length uniq aResidue _Atoms '$$ligand' <> 1 then
                write ['Please select one and only one residue as a ligand\n'];
            elseif currentState <> SystemTopologyState [] or not (currentPos === aPos Atoms[]) then
                Message [ msgkey, RUNNINGMM ];
                local originalFixed = Atoms[] | aFixed Atoms[];
                aSetFixed [diff [Atoms[], _Atoms '$$ligand'], 1];
                MM [ gtest:0.01, maxit:200 ];
                aSetFixed [Atoms[], 0];
                aSetFixed [originalFixed, 1];
                currentState = SystemTopologyState [];
                currentPos = aPos Atoms[];
                local pdata = SystemPush Atoms[];
                Message [ msgkey, RUNNINGMT ];
                Message [msgkey, twrite ['MTScoreES (dG): {} kcal/mol\n', ScoreMTScore_dG [
                    cat diff [Atoms[], _Atoms '$$ligand'],
                    cat _Atoms '$$ligand'
                ]]];
                SystemPop pdata;
            endif
            sleep 0.5;
        endloop
    endif
endfunction

// functions necessary for the qbInteractiveMTScoreUpdate panel

function apprHost inName
    const hostlen = 10;
    inName = string inName;
    if length inName > hostlen then
        inName = twrite ['{}...',resize [inName,hostlen]];
    endif
    return twrite ['{}',inName];
endfunction


const WINDOW_NAME = 'QuantumBio/MTScore BETA';		// window title

// MakePanel only takes care of what the panel looks like but not the contents or processing any triggers.
local function MakePanel opt

    local opt_enableSidepanel = GetRCBoolean ['QuantumBio.MTInteractions.enableSidepanel', 0];

    local config = gr_icon ['$MOE/lib/icon/config.ico', 12, 'foreground'];
    local openicon = gr_icon ['$MOE/lib/icon/open.ico', 12, 'foreground'];
        
    local window = [
        title: WINDOW_NAME,
        name: 'shell', 
        text: [select ['Detach', 'Attach', opt_enableSidepanel], 'Close'],
        onTrigger: ['return', 'exit'],
        Vbox: [
            Hbox:   [
                Label: [
                    text: 'qbWebService:',
                    font: 'mediumFixedBold'
                ],
                Label: [
                    name: 'qbwebservice_info',
                    text: twrite ['{}:{}', apprHost GetRC ['QuantumBio.qbWSHostname','localhost'],GetRCNumber ['QuantumBio.qbWSPort',8080]],
                    bubbleHelp:twrite ['{}:{}',GetRC ['QuantumBio.qbWSHostname','localhost'],GetRCNumber ['QuantumBio.qbWSPort',8080]]
                ],
                Button: [
                    title: '', name: 'button_WSsetup', graphics: config,
                    bubbleHelp: 'Configure QuantumBio WebSerice (host and port).'
                ]
            ],
            Hbox:   [
                Label:  [
                    text: 'Status: '
                ],
                Label: [
                    name: 'sysok',
                    text: ''
                ]
            ],
            Button: [
                text: 'Structure Preparation', name: 'button_MOEPreparation', extendH: 1,
                bubbleHelp: 
                    'Configure and run the MOE-based structure preparation.\n'
                    '   Warning, if less then 49% the atoms are protons. FIX: Run Protonate3D.\n'
                    '   Noted, if there was no change to the structure before and after structure preparation.\n'
                    '   Noted, if not performed.'
            ],
//            Mbox: [
//                columns: 3, extendH: 1,
//                Label: [
//                    text: 'MDB: '
//                ],
//
//                FSBText: [
//                name: 'outdb', len: 25, extendH: 1, mode: 'saveAs',
//                bubbleHelp:
//                    'The database to which the generated structures\n'
//                    'will be written.'
//                ],
//
//                Button: [
//                    title: '', name: 'browse_outdb', graphics: openicon,
//                    bubbleHelp: 'Select / Create MDB to store ligands of interest.\nNew DB will be created while existing DB will be read and added to list below.'
//                ]
//            ],
//
//            Checkbox: [
//                name: 'open_outdb', onTrigger: 'ignore',
//                text: 'Open Database Viewer', bubbleHelp:
//                'If on, a Database Viewer will be opened\n'
//                'showing the created database.'
//            ],
            Hbox:   [
                Label:  [
                    text: 'Optimize: ',
                    bubbleHelp: 'Optimize ligand or receptor pocket prior to score.'
                ],
                Radio:  [
                    name: 'optlevel',
                    text: ['None','Ligand','Pocket'],
                    onTrigger: 'return',
                    bubbleHelp: 'Optimize ligand or receptor pocket prior to score.'                
                ],
                Button: [
                        name: 'addCurrent', text: 'Add',
                        bubbleHelp: 'Add the selected ligand within the MOE window to the list and calculate MTScoreES.'
                ]
//                ,
//                Button: [
//                        name: 'deleteSelection', text: 'X', font: 'mediumBold',flushLeft: 0,
//                        bubbleHelp: 'Delete selected ligand from the list.'
//                ]
            ],
            Listbox : [
                name: 'slist',
                onTrigger: 'return',
                multiSelect: 0,
                type: 'int',
                sortEnable: 1,
//                header: twrite ['{}\{.{}n\}', listHeader, length listHeader] ,
                header: 'Label\tScore{15n}',
//                header: 'MTScoreES (kcal/mol)',
                resizeV:1,
                extendH:1,
//                len:5,
//                :5,
//                resizeH:1,
                width: 30
            ],
            Hbox:   [
                Text    :   [
                    name:   'tLigName',
                    len:    20,
                    type:   'char',
                    onTrigger: 'return'
                ],
                Button  :   [
                    name:   'bRename',
                    text:   'Rename'
                ]
            ]
        ]
    ];
    
    if opt_enableSidepanel then
	    window.location = 'MOE_Right';
    else
	    window.windowName = WINDOW_NAME;
    endif

    return window;
endfunction

// forward declarations
function qbWSConfig;

function PartialCharge;

// Monitor loop for addressing changing items in the UI
local function ReadyMonitor wkey
    local systemNonviewState = -1;
    
//    local dataFile = second cat WindowGetData [wkey, 'outdb'];
    local mdb_key;

    loop
        if systemNonviewState <> SystemNonviewState[] then
            systemNonviewState = SystemNonviewState [];
        
            local syskeys = SystemPush Atoms[];    // limit the chances of concurrent molecule object editing errors
            static sys_serial, q_save, pot_serial;
            local atoms = Atoms[];

            local q = aCharge atoms;

            local check = not isnull wkey and not (
                SystemTopologyState[] === sys_serial
            and (q === q_save)
            and (pot_Info[]).serial === pot_serial
            );

            local fixH = 0, fixQ = 0;

            local xh = aExplicitHCount atoms;			// check H
            local hc = select [0, aHCount atoms, pot_Parm_uh atoms];
            fixH = fixH or orE (xh <> hc);

            local xlp = app add not aAtomicNumber aBonds atoms;	// check LP
            local lpc = pot_Parm_lp atoms;

            if orE lpc then
                local idx = x_pack lpc;
                lpc[idx | sm_Match ['[Lp1]', atoms[idx]]] = 1;
                lpc[idx | sm_Match ['[Lp2]', atoms[idx]]] = 2;
                lpc[idx | sm_Match ['[Lp3]', atoms[idx]]] = 3;
                lpc[idx | sm_Match ['[Lp4]', atoms[idx]]] = 4;
            endif

            fixH = fixH or orE (xlp <> lpc);

            local fq = first PartialCharge [atoms, 'FF'];
            local chargesEQ = max abs (q - fq) < 1e-5;

            fixQ = fixQ or not chargesEQ;
        
    //        if fixQ then
    //            pot_SetCharges[];
    //            fq = first PartialCharge [atoms, 'FF'];
    //            chargesEQ = max abs (q - fq) < 1e-5;
    //            fixQ = fixQ or not chargesEQ;
    //        endif
        
            local systext = 'Molecular system parameterized.';
            local sysbool = 1;
            local syscolors = ['red','blue'];
    
            if isnull Atoms[] then
                systext = 'Open molecular system.';
                sysbool = 0;
            elseif orE (aMMType atoms == '??') then
                systext = 'Unparameterized atoms in the system.';
                sysbool = 0;
            elseif chargesEQ and abs (add q - add aIon atoms) > 1e-3 then
                systext = 'Missing atoms in the system.';
                sysbool = 0;
            elseif fixH then
                systext = 'Error in Hydrogens or partial charges.';
                sysbool = 0;
            elseif length uniq aResidue _Atoms '$$ligand' <> 1 then
                systext = 'Designate one residue as a ligand';
                sysbool = 0;
            elseif length uniq aResidue _Atoms '$$pocket' < 1 then
                systext = 'Designate residues as pocket';
                sysbool = 0;
            endif

            WindowSetAttr [wkey, [sysok:  [text: systext, foreground: syscolors [sysbool+1] ]]];
            WindowSetAttr [wkey, [addCurrent:  [sensitive: sysbool]]];

            q_save = q;
            sys_serial = SystemTopologyState[];
            pot_serial = (pot_Info[]).serial;
            SystemPop syskeys;
//        elseif neL [dataFile, second cat WindowGetData [wkey, 'outdb']] then
//            dataFile = second cat WindowGetData [wkey, 'outdb'];
//// If the DB exists, open it and check contents
//            if ftype dataFile == '' then
//                mdb_key = db_Open [dataFile, 'create'];
//                db_CreateField [ mdb_key, 'Target', 'molecule' ];
//                db_CreateField [ mdb_key, 'Ligand', 'molecule' ];
//                db_CreateField [ mdb_key, 'MTScoreES', 'float' ];
//            else
//                mdb_key = db_Open [dataFile, 'read-write'];
//                local [mdbFields,mdbTypes] = db_Fields mdb_key;
//                if indexof [(mdbFields | (mdbTypes == 'molecule')), 'Target'] and
//                    indexof [(mdbFields | (mdbTypes == 'molecule')), 'Ligand'] and
//                    indexof [(mdbFields | (mdbTypes == 'molecule')), 'MTScoreES'] then
//                        write ['all in!\n'];
//                else
//                    write ['missing!\n'];
//                endif
//            endif
//    // if the contents are MT contents, then read them in and add them to the viewer list
//        
//    // if the contents are not MT contents, then throw an error
//
//
//// if the DB doesn't exist, create it and add columns for target structure, ligand structure, and score information
//
////            db_Close  mdb_key;
//// finally, if the "view database" is checked, then open the db in a db_viewer
//            if second cat WindowGetData [wkey, 'open_outdb'] then
//                dbv_Open [dataFile];
//            endif
        else
            sleep 0.25;
        endif
    endloop
endfunction

global function qbInteractiveMTScoreUI opt

    local wkey = WindowCreate MakePanel opt;
    WindowShow wkey;

    local currentState = 0;
    local currentPos = aPos Atoms[];
    local currentOptLevel = 0;
    local currentMTScoreES = 0;

    const RUNNINGMT = 'Running MTScore to update current binding affinity....';
    const RUNNINGMM = 'Running MM opt of ligand+pocket to update current binding affinity....';
    local msgkey = Message [ 0, '' ];
    
    local scoresList = [];
    local namesList = [];
    local molList = [];
    local prevSelected = 0;
    
    local dataFile;
    local prevDataFile;
    
    local status;

// local functions
    local function StartName []
        local timevec = clock_to_timevec clock [];
        function formNum [inVal]
            inVal = round inVal;
            if inVal < 10 then  return twrite ['0{}',inVal];
            else                return twrite ['{}',inVal];
            endif
        endfunction
        return twrite ['{}',twrite ['{}:{}:{}', formNum timevec(7), formNum timevec(8), formNum timevec(9)]];
    endfunction
    
    if second task_fork [master:'mutual', idle:1, prio:0] === 'child' then
        ReadyMonitor wkey;
        exit [];
    endif

// main loop
    loop
        local [values, trigger] = WindowWait wkey;
//        write ['values: {}\ntrigger: {}\n', values, trigger];        
        if trigger === 'button_WSsetup' then
            qbWSConfig wkey;
            WindowSetAttr [wkey, [
                qbwebservice_info: [text:twrite ['{}:{}',
                    apprHost GetRC ['QuantumBio.qbWSHostname','localhost'],
                    GetRCNumber ['QuantumBio.qbWSPort',8080]],
                    bubbleHelp:twrite ['{}:{}',
                    GetRC ['QuantumBio.qbWSHostname','localhost'],
                    GetRCNumber ['QuantumBio.qbWSPort',8080]]
                    ]
            ]];
        elseif trigger === 'showSelection' or trigger === 'slist' then
            if first values.slist and first values.slist <> prevSelected then
                prevSelected = first values.slist;
                local parentResidue = uniq aResidue _Atoms '$$ligand';
                local tmpBondLook = first aBondLook cat _Atoms '$$ligand';
                oDestroy Chains[];
                Message [msgkey, twrite ['MTScoreES (dG): {} kcal/mol\n', scoresList(first values.slist)]];
                _moe_Create [molList(first values.slist),[view:0]];
                currentState = SystemTopologyState [];
                currentPos = aPos Atoms[];
                WindowSetAttr[wkey, [   tLigName:    [value : namesList(first values.slist) ]]];  
            endif
        elseif trigger === 'addCurrent' then
            if currentState <> SystemTopologyState [] 
                        or not (currentPos === aPos Atoms[]) 
                        or values.optlevel <> currentOptLevel then
                if values.optlevel <> 'None' then
                    Message [ msgkey, RUNNINGMM ];
                    local originalFixed = Atoms[] | aFixed Atoms[];
                    aSetFixed [Atoms[], 1];
                    aSetFixed [_Atoms '$$ligand', 0];
                    if values.optlevel == 'Pocket' then
                        aSetFixed [_Atoms '$$pocket', 0];
                    endif
                    MM [ gtest:0.01, maxit:200 ];
                    aSetFixed [Atoms[], 0];
                    aSetFixed [originalFixed, 1];
                endif
                currentState = SystemTopologyState [];
                currentPos = aPos Atoms[];
                currentOptLevel = values.optlevel;
                local pdata = SystemPush Atoms[];
                Message [ msgkey, RUNNINGMT ];
                currentMTScoreES = ScoreMTScore_dG [cat _Atoms '$$receptor', cat _Atoms '$$ligand'];
                Message [msgkey, twrite ['MTScoreES (dG): {} kcal/mol\n', currentMTScoreES]];
                molList = append [molList, _moe_Extract [Chains[]]];
                scoresList = append [scoresList, currentMTScoreES];
                namesList = append [namesList, StartName[]];
                WindowSetAttr[wkey, [   slist:    [text : apt twrite ['{}\t{}',namesList,scoresList]]   ]];   
                SystemPop pdata;
            endif
//        elseif trigger === 'deleteSelection' then
//            selectedAtomID = first values.slist;
//            if not isnull selectedAtomID then
//                local newSelectedID = selectedAtomID - 1;
//                if selectedAtomID == 1 then
//                    newSelectedID = 1;
//                endif
//                local tmpMask;
//                tmpMask = m_id values.coreList;
//                tmpMask(selectedAtomID) = 0;
//                values.coreList = values.coreList | tmpMask;
//                WindowSetAttr[wkey, 
//                [
//                    coreResiduesBox: 
//                    [ 
//                        text:   updateCoreResidueList[values.coreList],
//                        value:  [newSelectedID]
//                    ],
//                    coreList: [value: values.coreList]
//                ]];
//            endif
        elseif trigger === 'button_MOEPreparation' then
            run ['structprep_ui.svl', [cmd:'interactive']];
            status.ran_structprep = 1;
            sleep 2.0;      // needs a couple of seconds to init StructurePrep function
            while WindowKey 'Structure Preparation' loop
                sleep 0.15;
                if WindowKey 'Protonate3D' then
                    status.ran_protonate = 1;
                endif
            endloop
        elseif trigger === 'optlevel' then
            local prevSelection = Atoms[] | aSelected Atoms[];
            aSetSelected [Atoms[], 0];
            if values.optlevel == 'Ligand' then
                aSetSelected [_Atoms '$$ligand', 1];
            elseif values.optlevel == 'Pocket' then
                aSetSelected [cat [_Atoms '$$pocket',_Atoms '$$ligand'], 1];
            endif
            sleep 1.0;
            aSetSelected [Atoms[], 0];
            aSetSelected [prevSelection, 1];
//        elseif trigger === 'browse_outdb' then
//            run ['fbrowse.svl', [wkey, trigger, [outdb: [
//                title: 'Output Database',
//                mode: 'file',
//                filter: '*.mdb',
//                autoExtension: 'mdb'
//            ]]]];
        elseif trigger === 'bRename' or trigger === 'tLigName' then
            namesList(first values.slist) = first values.tLigName;
//            WindowSetAttr[wkey, [   slist:    [text : apt twrite ['{}\t{}',scoresList,namesList]]   ]];  
            WindowSetAttr[wkey, [   slist:    [text : apt twrite ['{}\t{}',namesList,scoresList]]   ]];  
        elseif trigger === 'shell' then
            WindowDestroy WindowKey wkey;
            if values.shell === 'Attach' or values.shell === 'Detach' then
                SetRCBoolean ['QuantumBio.MTInteractions.enableSidepanel', values.shell==='Attach'];
                task_call [ 'qbInteractiveMTScoreUI', [], [master:'none', creator:'detach', statics: 'new'] ];
            endif
            break;
        endif
    endloop

endfunction

#eof

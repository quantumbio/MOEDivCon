#svl

// ScoreMTScore_dG takes receptor atoms and ligand atoms and returns an 
// estimate of the binding affinity using the MTScore dG. This is a one-shot 
// calculation
// FUNCTION : 	Calculate the MTScore score between recatoms and ligatoms
// INPUT: 	recatoms = receptor atoms
//		ligatoms = ligand atoms
//		ff = options (1 = [fast]endpoint parameters,2 = [slower]endemble parameters)
//		rec = if docking cached receptor energy terms.
// RETURN:	MTScore score.
// NOTE:	This function must be used within a private system.

function qbWS_MTScore;
function qbWSTestEndpoint;
function qbWSConfig;

local function active atoms
    return atoms | not aInert atoms;
endfunction

global function ScoreMTScore_dG [recatoms, ligatoms, ff, rec]
    // This function is effectively a "wrapper" for the call to the MTScore webservice
//    local tmpJSON = qbWS_MTScore [diff [Atoms[], _Atoms '$$ligand'],_Atoms '$$ligand'];
    local tmpJSON = qbWS_MTScore [recatoms,ligatoms];
// write ['JSON Returned: {} \n', tmpJSON];
    if tmpJSON.success then
        return atof tmpJSON.('MTScoreES(s)');
    else
        return null[];
    endif
endfunction

global function dock_score_qbMTScore [cmd, arg, opt]
    local ligpos = [], lig = [], rec=[], score;

    const MTSCORE_OPT_DEFAULTS = [
        ['mttyperdio',      'Endstate'         ]
    ];
    
    const MTTYPES = [
        'Endstate',
        'Ensemble'
    ];

    local DEFAULTS = [
        qbWSHostname: GetRC ['QuantumBio.qbWSHostname','localhost'],
        qbWSPort:     GetRCNumber ['QuantumBio.qbWSPort',8080]
    ];
    
    const PANEL = [
        Mbox : [
            Text : [
                title: 'Hostname:', name: 'qbWSHostname', type: 'char',
                shortcut: ['localhost'],
                bubbleHelp: 'Enter hostname (default: localhost).'
            ],
            Text : [
                title: 'Port:', name: 'qbWSPort', type: 'int',
                shortcut: ['8080','8081','8082'],
                bubbleHelp: 'Enter the port number (default: 8080).'
            ]
        ]
    ];
    
//    write ['DEBUG: cmd: {} | arg: {}\n', cmd, arg];

    if cmd === 'ID' then
        return 'MTScoreES dG [QuantumBio]';
    elseif cmd === 'configpanelwidgets' then
        return PANEL;
    elseif cmd === 'configpanelevent' then   // arg = [val, trig]
        local [val, trig, wkey] = arg;
        return 0;
    elseif cmd === 'configvalues' then        // arg = val
        return tagcat [arg, DEFAULTS];
    elseif cmd === 'validateOptions' then        // arg = val
        SetRC ['QuantumBio.qbWSHostname',arg.qbWSHostname];
        SetRCNumber ['QuantumBio.qbWSPort',arg.qbWSPort];
//        write ['RC: {} | {}\n', arg.qbWSHostname, arg.qbWSPort];
        return;
    elseif cmd === 'openReceptor' then      // arg = rec
        return;
    elseif cmd === 'closeReceptor' then     // arg = rec
        return;
    elseif cmd === 'openLigand' then        // arg = lig
        return;
    elseif cmd === 'closeLigand' then       // arg = lig
        return;
    elseif not (cmd === 'score') then       // arg = [ligpos, lig, rec]
        return;
    endif
    
    [ligpos, lig, rec] = arg;
    SetRC ['QuantumBio.qbWSHostname',opt.qbWSHostname];
    SetRCNumber ['QuantumBio.qbWSPort',opt.qbWSPort];
    opt = tagcat [opt, DEFAULTS];

    local [osys, nsys] = SystemPush [];
    oDestroy Chains [];
    
    local recatoms = cat oAtoms mol_Create *rec.mol;
    local ligatoms = cat oAtoms mol_Create *lig.mol;
    aSetPos [ligatoms, ligpos];

    local starttime = clock[];
    score = ScoreMTScore_dG [recatoms, ligatoms];
    write ['MTScoreES (dG): {} kcal/mol in {} secs\n', score, (clock[] - starttime)];
        
    oDestroy Chains [];
    SystemPop [osys, nsys];
    return score;
endfunction

function MM; // forward declaration
global function qbInteractiveMTScoreUpdate []
    const RUNNINGMT = 'Running MTScore to update current binding affinity....';
    const RUNNINGMM = 'Running MM opt of ligand+pocket to update current binding affinity....';
    local currentState = 0;
    local currentPos = aPos Atoms[];
    if second task_fork[] == 'child' then
        task_settitle [-1, 'qbInteractiveMTScoreUpdate'];
        local msgkey = Message [ 0, '' ];
        loop
            if length uniq aResidue _Atoms '$$ligand' <> 1 then
                write ['Please select one and only one residue as a ligand\n'];
            elseif currentState <> SystemTopologyState [] or not (currentPos === aPos Atoms[]) then
                Message [ msgkey, RUNNINGMM ];
                local originalFixed = Atoms[] | aFixed Atoms[];
                aSetFixed [diff [Atoms[], _Atoms '$$ligand'], 1];
                MM [ gtest:0.01, maxit:200 ];
                aSetFixed [Atoms[], 0];
                aSetFixed [originalFixed, 1];
                currentState = SystemTopologyState [];
                currentPos = aPos Atoms[];
                local pdata = SystemPush Atoms[];
                Message [ msgkey, RUNNINGMT ];
                Message [msgkey, twrite ['MTScoreES (dG): {} kcal/mol\n', ScoreMTScore_dG [
                    cat diff [Atoms[], _Atoms '$$ligand'],
                    cat _Atoms '$$ligand'
                ]]];
                SystemPop pdata;
            endif
            sleep 0.5;
        endloop
    endif
endfunction

// functions necessary for the qbInteractiveMTScoreUpdate panel

const WINDOW_NAME = 'QuantumBio/MTScore BETA';		// window title

// MakePanel only takes care of what the panel looks like but not the contents or processing any triggers.
local function MakePanel opt

    local opt_enableSidepanel = GetRCBoolean ['QuantumBio.MTInteractions.enableSidepanel', 0];

    local openicon = gr_icon ['$MOE/lib/icon/open.ico', 12, 'foreground'];
    
//    write ['{}\n',qbWSConfig ['getWidget']];       // lmw - standard WS config widget
            
    local window = [
        title: WINDOW_NAME,
        name: 'shell', 
        text: [select ['Detach', 'Attach', opt_enableSidepanel], 'Close'],
        onTrigger: ['return', 'exit'],
        Vbox: [
            Hbox:   qbWSConfig ['getWidget'],       // lmw - standard WS config widget
            Hbox:   [
                Label:  [
                    text: 'Status: '
                ],
                Label: [
                    name: 'sysok',
                    text: ''
                ]
            ],
            Button: [
                text: 'Structure Preparation', name: 'button_MOEPreparation', extendH: 1,
                bubbleHelp: 
                    'Configure and run the MOE-based structure preparation.\n'
                    '   Warning, if less then 49% the atoms are protons. FIX: Run Protonate3D.\n'
                    '   Noted, if there was no change to the structure before and after structure preparation.\n'
                    '   Noted, if not performed.'
            ],
            Mbox: [
                columns: 3, extendH: 1,
                Label: [
                    text: 'MDB: '
                ],

                FSBText: [
                name: 'outdb', len: 25, extendH: 1, mode: 'saveAs',sensitive:0,
                bubbleHelp:
                    'The database to which the generated structures\n'
                    'will be written.'
                ],
                Button: [
                    title: '', name: 'browse_outdb', graphics: openicon,
                    bubbleHelp: 'Select / Create MDB to store ligands of interest.\nNew DB will be created while existing DB will be read and added to list below.'
                ]
            ],
            Hbox:   [
                Label:  [
                    text: 'Optimize: ',
                    bubbleHelp: 'Optimize ligand or receptor pocket prior to score.'
                ],
                Radio:  [
                    name: 'optlevel',
                    text: ['None','Ligand','Pocket'],
                    onTrigger: 'return',
                    bubbleHelp: 'Optimize ligand or receptor pocket prior to score.'                
                ],
                Button: [
                        name: 'addCurrent', text: 'Add',
                        bubbleHelp: 'Add the selected ligand within the MOE window to the list and calculate MTScoreES.'
                ]
                ,
                Button: [
                        name: 'deleteSelection', text: 'X', font: 'mediumBold',flushLeft: 0,
                        bubbleHelp: 'Delete selected ligand from the list.'
                ]
            ],
            Listbox : [
                name: 'slist',
                onTrigger: 'return',
                multiSelect: 0,
                type: 'int',
                sortEnable: 1,
//                header: twrite ['{}\{.{}n\}', listHeader, length listHeader] ,
                header: 'Label\tScore{15n}',
//                header: 'MTScoreES (kcal/mol)',
                resizeV:1,
                extendH:1,
//                len:5,
//                :5,
//                resizeH:1,
                width: 30
            ],
            Hbox:   [
                Text    :   [
                    name:   'tLigName',
                    len:    20,
                    type:   'char',
                    onTrigger: 'return'
                ],
                Button  :   [
                    name:   'bRename',
                    text:   'Rename'
                ]
            ],
            Data:   [name:'molList'],
            Data:   [name:'scoresList'],
            Data:   [name:'namesList'],
            Data:   [name:'currentState', value:-1],
            Data:   [name:'currentPos', value:[[0],[0],[0]]],
            Data:   [name:'msgkey', value:0]
        ]
    ];
    
    if opt_enableSidepanel then
	    window.location = 'MOE_Right';
    else
	    window.windowName = WINDOW_NAME;
    endif

    return window;
endfunction

// forward declarations
function PartialCharge;

local function SyncMDB wkey
    // If the DB exists, open it and check contents
    local dataFile = second cat WindowGetData [wkey, 'outdb'];
    if dataFile == '' then
        return;
    endif
    if ftype dataFile == '' then
        db_Open [dataFile, 'create'];
    endif
    db_EnsureField [dataFile, 'Label', 'char'];
    db_EnsureField [dataFile, 'Complex', 'moe'];
    db_EnsureField [dataFile, 'MTScoreES', 'double'];
    // if the contents are MT contents, then read them in and add them to the viewer list
    local molList = [];
    local scoresList = [];
    local namesList = [];
    local ent = 0;
    while ent = db_NextEntry [dataFile,ent] loop
        local [tmpLabel, tmpComplex, tmpMTScoreES] = db_ReadFields [ dataFile, ent, ['Label','Complex','MTScoreES'] ];
        if not isnull tmpLabel and not isnull tmpComplex and not isnull tmpMTScoreES then
            molList = append [molList,ent];
            scoresList = append [scoresList, tmpMTScoreES];
            namesList = append [namesList, tmpLabel];
        endif
    endloop

    WindowSetAttr[wkey, [
        slist:      [text : apt twrite ['{}\t{}',namesList,scoresList]],
        molList:    [value:molList],
        scoresList: [value:scoresList],
        namesList:  [value:namesList]
    ]];                

    return [dataFile,molList,scoresList,namesList];
endfunction

// Monitor loop for addressing changing items in the UI
local function ReadyMonitor wkey
    local systemNonviewState = -1;
    local dbState = -1;
    
    local sysbool = 1;
    
    local dataFile;
    local prevDataFile = '';
    
    loop
        dataFile = second cat WindowGetData [wkey, 'outdb'];
        
        if dataFile <> '' then
            if dbState <> db_State dataFile then
                dbState = db_State dataFile;
                SyncMDB wkey;
            endif
        endif
        
        if systemNonviewState <> SystemNonviewState[] or dataFile <> prevDataFile or sysbool == 0 then
            systemNonviewState = SystemNonviewState [];
            prevDataFile = dataFile;
            
            if second cat WindowGetData [wkey, 'currentState'] <> SystemTopologyState [] or 
                not (second cat WindowGetData [wkey, 'currentPos'] === aPos Atoms[]) then
                    Message [second cat WindowGetData [wkey, 'msgkey'], ''];
                    WindowSetAttr[wkey, [   slist:    [value : -1 ]]];  
            endif

            local syskeys = SystemPush active Atoms[];    // limit the chances of concurrent molecule object editing errors
            static sys_serial, q_save, pot_serial;
            local atoms = Atoms[];

            local q = aCharge atoms;

            local check = not isnull wkey and not (
                SystemTopologyState[] === sys_serial
            and (q === q_save)
            and (pot_Info[]).serial === pot_serial
            );

            local fixH = 0, fixQ = 0;

            local xh = aExplicitHCount atoms;			// check H
            local hc = select [0, aHCount atoms, pot_Parm_uh atoms];
            fixH = fixH or orE (xh <> hc);

            local xlp = app add not aAtomicNumber aBonds atoms;	// check LP
            local lpc = pot_Parm_lp atoms;

            if orE lpc then
                local idx = x_pack lpc;
                lpc[idx | sm_Match ['[Lp1]', atoms[idx]]] = 1;
                lpc[idx | sm_Match ['[Lp2]', atoms[idx]]] = 2;
                lpc[idx | sm_Match ['[Lp3]', atoms[idx]]] = 3;
                lpc[idx | sm_Match ['[Lp4]', atoms[idx]]] = 4;
            endif

            fixH = fixH or orE (xlp <> lpc);

            local fq = first PartialCharge [atoms, 'FF'];
            local chargesEQ = max abs (q - fq) < 1e-5;

            fixQ = fixQ or not chargesEQ;
        
    //        if fixQ then
    //            pot_SetCharges[];
    //            fq = first PartialCharge [atoms, 'FF'];
    //            chargesEQ = max abs (q - fq) < 1e-5;
    //            fixQ = fixQ or not chargesEQ;
    //        endif
        
            local systext = 'Molecular system parameterized.';
            sysbool = 1;
            local syscolors = ['red','blue'];
    
            if isnull Atoms[] then
                systext = 'Open molecular system';
                sysbool = 0;
            elseif dataFile == '' then
                systext = 'Open/Create project database';
                sysbool = 0;
            elseif orE (aMMType atoms == '??') then
                systext = 'Unparameterized atoms in the system';
                sysbool = 0;
            elseif chargesEQ and abs (add q - add aIon atoms) > 1e-3 then
                systext = 'Missing atoms in the system';
                sysbool = 0;
            elseif fixH then
                systext = 'Error in Hydrogens or partial charges';
                sysbool = 0;
            elseif length uniq aResidue _Atoms '$$ligand' <> 1 then
                systext = 'Designate one residue as a ligand';
                sysbool = 0;
            elseif length uniq aResidue _Atoms '$$pocket' < 1 then
                systext = 'Designate residues as pocket';
                sysbool = 0;
            elseif length qbWSTestEndpoint [] < 1 then
                systext = 'Can not connect to qbWebService';
                sysbool = 0;
            endif

            WindowSetAttr [wkey, [sysok:  [text: systext, foreground: syscolors [sysbool+1] ]]];
            WindowSetAttr [wkey, [addCurrent:  [sensitive: sysbool]]];

            q_save = q;
            sys_serial = SystemTopologyState[];
            pot_serial = (pot_Info[]).serial;
            SystemPop syskeys;
        endif
        
        if sysbool == 0 then
            sleep 1.0;
        else
            sleep 0.25;
        endif
    endloop
endfunction

// qbAmberTIPanel is a function which is to take care of all of the AMBERTI processing (so the changes to CCG code is minimal)
global function qbAmberTIPanel [cmd, wkey, trigger, values]
    if cmd == 'getWidget' then
        return [
            margin: 5,
            columns: 1, extendH: 0,
            Hbox: qbWSConfig ['getWidget'],       // standard call to build/get qbWebService status (consistent between QB widgets)
            Label : [text: 'this is a test']
        ];
    elseif cmd == 'processWidget' then
        return qbWSConfig ['processWidget', wkey, trigger, values];
    endif
endfunction

global function qbInteractiveMTScoreUI opt

    local wkey = WindowCreate MakePanel opt;
    WindowShow wkey;

//    local currentState = 0;
    local currentState = second cat WindowGetData [wkey, 'currentState'];
//    local currentPos = aPos Atoms[];
    local currentPos = second cat WindowGetData [wkey, 'currentPos'];
    local currentOptLevel = second cat WindowGetData [wkey, 'optlevel'];
    local currentMTScoreES = 0;

    const RUNNINGMT = 'Running MTScore to update current binding affinity....';
    const RUNNINGMM = 'Running MM opt of ligand+pocket to update current binding affinity....';
    local msgkey = Message [ 0, '' ];
    
    local scoresList = [];
    local namesList = [];
    local molList = [];
    local prevSelected = 0;
    
    local dataFile;
    local prevDataFile;
    
    local status;
    
    local mdb_key;
    local tmpLabel, tmpComplex, tmpMTScoreES;

// local functions
    local function StartName []
        local timevec = clock_to_timevec clock [];
        function formNum [inVal]
            inVal = round inVal;
            if inVal < 10 then  return twrite ['0{}',inVal];
            else                return twrite ['{}',inVal];
            endif
        endfunction
        return twrite ['{}',twrite ['{}:{}:{}', formNum timevec(7), formNum timevec(8), formNum timevec(9)]];
    endfunction
        
    if second task_fork [master:'mutual', idle:1, prio:0] === 'child' then
        ReadyMonitor wkey;
        exit [];
    endif

// main loop
    loop
        local [values, trigger] = WindowWait wkey;
        molList = values.molList;
        scoresList = values.scoresList;
        namesList = values.namesList;
//        write ['values: {}\ntrigger: {}\n', values, trigger];        
        if trigger === 'showSelection' or trigger === 'slist' then
            if first values.slist and first values.slist <> prevSelected then
                prevSelected = first values.slist;
                local parentResidue = uniq aResidue _Atoms '$$ligand';
                local tmpBondLook = first aBondLook cat _Atoms '$$ligand';
                oDestroy Chains[];
                _moe_Create [ db_ReadFields [dataFile, molList(first values.slist), 'Complex'], [view:0] ];
                currentState = SystemTopologyState [];
                currentPos = aPos Atoms[];
                WindowSetAttr[wkey, [
                    currentState:   [value : currentState ],
                    currentPos:     [value : currentPos ],
                    msgkey:         [value : msgkey ]
                ]];  
                WindowSetAttr[wkey, [   tLigName:    [value : namesList(first values.slist) ]]];  
                Message [msgkey, twrite ['MTScoreES (dG): {} kcal/mol\n', scoresList(first values.slist)]];
            endif
        elseif trigger === 'addCurrent' then
            WindowSetAttr [wkey, [addCurrent:  [sensitive: 0]]];
            if currentState <> SystemTopologyState [] 
                        or not (currentPos === aPos active Atoms[]) 
                        or values.optlevel <> currentOptLevel then
                if values.optlevel <> 'None' then
                    Message [ msgkey, RUNNINGMM ];
                    local originalFixed = Atoms[] | aFixed Atoms[];
                    aSetFixed [Atoms[], 1];
                    aSetFixed [active _Atoms '$$ligand', 0];
                    if values.optlevel == 'Pocket' then
                        aSetFixed [active _Atoms '$$pocket', 0];
                    endif
                    MM [ gtest:0.01, maxit:200 ];
                    aSetFixed [Atoms[], 0];
                    aSetFixed [originalFixed, 1];
                endif
                Message [ msgkey, RUNNINGMT ];
                local pdata = SystemPush Atoms[];
                // Try #1:
//                currentMTScoreES = ScoreMTScore_dG [active cat _Atoms '$$receptor', active cat _Atoms '$$ligand'];
                currentMTScoreES = first task_call ['ScoreMTScore_dG', [active cat _Atoms '$$receptor', active cat _Atoms '$$ligand'], [errmsg:'ignore']];
                // Try #2:
                if isnull currentMTScoreES then
                    write ['MTScore Calculation failed (likely unable to reach host): trying again....\n'];
                    sleep 1.0;
//                    currentMTScoreES = ScoreMTScore_dG [active cat _Atoms '$$receptor', active cat _Atoms '$$ligand'];
                    currentMTScoreES = first task_call ['ScoreMTScore_dG', [active cat _Atoms '$$receptor', active cat _Atoms '$$ligand'], [errmsg:'ignore']];
                endif
                tmpLabel = StartName[];
                SystemPop pdata;
                if not isscalarnum currentMTScoreES then
                    if isnull currentMTScoreES then
                        currentMTScoreES = 'ERROR';
                    endif
                    Message [msgkey, twrite ['MTScoreES (dG): {}\n', currentMTScoreES]];
                else
                    currentOptLevel = values.optlevel;
                    currentState = SystemTopologyState [];
                    currentPos = aPos active Atoms[];
                    WindowSetAttr[wkey, [
                        currentState:   [value : currentState ],
                        currentPos:     [value : currentPos ],
                        msgkey:         [value : msgkey ]
                    ]];  
                    db_Write [ dataFile, 0, [
                            Label : string tmpLabel,
                            Complex : _moe_Extract [Chains[]],
                            MTScoreES : currentMTScoreES
                    ]];
                    Message [msgkey, twrite ['MTScoreES (dG): {} kcal/mol\n', currentMTScoreES]];
                endif
                [dataFile,molList,scoresList,namesList] = SyncMDB wkey;
                WindowSetAttr[wkey, [   slist:    [value : length molList ]]];
            else
                local tmpMsg = Message [0,'The molecule has not changed since last execution. Please edit molecule in order to run again.'];
                sleep 5;
                Message [tmpMsg,''];
            endif
            WindowSetAttr [wkey, [addCurrent:  [sensitive: 1]]];
        elseif trigger === 'deleteSelection' then
            WindowSetAttr [wkey, [deleteSelection:  [sensitive: 0]]];
            db_Delete [dataFile, molList(first values.slist)];
            [dataFile,molList,scoresList,namesList] = SyncMDB wkey;
            Message [second cat WindowGetData [wkey, 'msgkey'], ''];
            WindowSetAttr[wkey, [   slist:    [value : -1 ]]];  
            currentState = -1;
            currentPos = [[0],[0],[0]];
            WindowSetAttr[wkey, [
                currentState:   [value : currentState ],
                currentPos:     [value : currentPos ],
                msgkey:         [value : msgkey ]
            ]];  
            WindowSetAttr [wkey, [deleteSelection:  [sensitive: 1]]];
        elseif trigger === 'button_MOEPreparation' then
            run ['structprep_ui.svl', [cmd:'interactive']];
            status.ran_structprep = 1;
            sleep 2.0;      // needs a couple of seconds to init StructurePrep function
            while WindowKey 'Structure Preparation' loop
                sleep 0.15;
                if WindowKey 'Protonate3D' then
                    status.ran_protonate = 1;
                endif
            endloop
        elseif trigger === 'optlevel' then
            local prevSelection = Atoms[] | aSelected Atoms[];
            aSetSelected [Atoms[], 0];
            if values.optlevel == 'Ligand' then
                aSetSelected [active _Atoms '$$ligand', 1];
            elseif values.optlevel == 'Pocket' then
                aSetSelected [cat [active _Atoms '$$pocket',active _Atoms '$$ligand'], 1];
            endif
            sleep 1.0;
            aSetSelected [Atoms[], 0];
            aSetSelected [prevSelection, 1];
        elseif trigger === 'browse_outdb' then
            local btid = run ['fbrowse.svl', [wkey, trigger, [outdb: [
                title: 'Output Database',
                mode: 'file',
                filter: '*.mdb',
                autoExtension: 'mdb'
            ]]]];
            // wait until the above noted task is complete - we need to do some processing.
            while task_key btid loop
                sleep 0.50;
            endloop
            [dataFile,molList,scoresList,namesList] = SyncMDB wkey;
            if not isnull dataFile then
                task_call ['dbv_OpenFile', dataFile, [errmsg:'ignore']];
            endif
        elseif trigger === 'bRename' or trigger === 'tLigName' then
            namesList(first values.slist) = first values.tLigName;
            db_Write [ dataFile, molList(first values.slist), [Label : string namesList(first values.slist) ] ];
            [dataFile,molList,scoresList,namesList] = SyncMDB wkey;
        elseif trigger === 'shell' then
            WindowDestroy WindowKey wkey;
            if values.shell === 'Attach' or values.shell === 'Detach' then
                SetRCBoolean ['QuantumBio.MTInteractions.enableSidepanel', values.shell==='Attach'];
                task_call [ 'qbInteractiveMTScoreUI', [], [master:'none', creator:'detach', statics: 'new'] ];
            endif
            break;
        elseif qbWSConfig ['processWidget', wkey, trigger, values] then
            values = WindowValues wkey;
        endif
    endloop

endfunction

#eof

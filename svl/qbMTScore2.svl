#svl

// ScoreMTScore_dG takes receptor atoms and ligand atoms and returns an 
// estimate of the binding affinity using the MTScore dG. This is a one-shot 
// calculation
// FUNCTION : 	Calculate the MTScore score between recatoms and ligatoms
// INPUT: 	recatoms = receptor atoms
//		ligatoms = ligand atoms
//		ff = options (1 = [fast]endpoint parameters,2 = [slower]endemble parameters)
//		rec = if docking cached receptor energy terms.
// RETURN:	MTScore score.
// NOTE:	This function must be used within a private system.

// Turn on/off new features
const NEWTOOLS = 0;

// QBio function forward declarations
function qbWS_MTScore;
function qbWSTestEndpoint;
function qbWSConfig;
function qbExecManager;
function MTScore_dG_TaskManager;
function qbuuid;

// CCG global function forward declarations
function RenderProtein;
function DockAtoms;
function dock_score_GBVIWSA_dG;
function MM; 

local function active atoms
    return atoms | not aInert atoms;
endfunction

local function StartName []
    local timevec = clock_to_timevec clock [];
    function formNum [inVal]
        inVal = round inVal;
        if inVal < 10 then  return twrite ['0{}',inVal];
        else                return twrite ['{}',inVal];
        endif
    endfunction
    return twrite ['{}',twrite ['{}:{}:{}', formNum timevec(7), formNum timevec(8), formNum timevec(9)]];
endfunction

global function ScoreMTScore_dG [recatoms, ligatoms, opt]
    // This function is effectively a "wrapper" for the call to the MTScore webservice
//    local tmpJSON = qbWS_MTScore [diff [Atoms[], _Atoms '$$ligand'],_Atoms '$$ligand'];

//    local tmpJSON = qbWS_MTScore [recatoms,ligatoms];
    local tmpJSON = qbExecManager ['RunMTScore', [recatoms,ligatoms, opt]];
    
    if tmpJSON.success then
        return atof tmpJSON.('MTScoreES(s)');
    else
        return null[];
    endif
endfunction

global function dock_score_qbMTScore [cmd, arg, opt]
    local ligpos = [], lig = [], rec=[], score;

    const MTSCORE_OPT_DEFAULTS = [
        ['mttyperdio',      'Endstate'         ]
    ];
    
    const MTTYPES = [
        'Endstate',
        'Ensemble'
    ];

    local DEFAULTS = [
        qbWSHostname: GetRC ['QuantumBio.qbWSHostname','localhost'],
        qbWSPort:     GetRCNumber ['QuantumBio.qbWSPort',8080]
    ];
    
    const PANEL = [
        Mbox : [
            Text : [
                title: 'Hostname:', name: 'qbWSHostname', type: 'char',
                shortcut: ['localhost'],
                bubbleHelp: 'Enter hostname (default: localhost).'
            ],
            Text : [
                title: 'Port:', name: 'qbWSPort', type: 'int',
                shortcut: ['8080','8081','8082'],
                bubbleHelp: 'Enter the port number (default: 8080).'
            ]
        ]
    ];
    
//    write ['DEBUG: cmd: {} | arg: {}\n', cmd, arg];

    if cmd === 'ID' then
        return 'MTScoreES dG [QuantumBio]';
    elseif cmd === 'configpanelwidgets' then
        return PANEL;
    elseif cmd === 'configpanelevent' then   // arg = [val, trig]
        local [val, trig, wkey] = arg;
        return 0;
    elseif cmd === 'configvalues' then        // arg = val
        return tagcat [arg, DEFAULTS];
    elseif cmd === 'validateOptions' then        // arg = val
        SetRC ['QuantumBio.qbWSHostname',arg.qbWSHostname];
        SetRCNumber ['QuantumBio.qbWSPort',arg.qbWSPort];
        return;
    elseif cmd === 'openReceptor' then      // arg = rec
        return;
    elseif cmd === 'closeReceptor' then     // arg = rec
        return;
    elseif cmd === 'openLigand' then        // arg = lig
        return;
    elseif cmd === 'closeLigand' then       // arg = lig
        return;
    elseif not (cmd === 'score') then       // arg = [ligpos, lig, rec]
        return;
    endif
    
    [ligpos, lig, rec] = arg;
    SetRC ['QuantumBio.qbWSHostname',opt.qbWSHostname];
    SetRCNumber ['QuantumBio.qbWSPort',opt.qbWSPort];
    opt = tagcat [opt, DEFAULTS];

    local [osys, nsys] = SystemPush [];
    oDestroy Chains [];
    
    local recatoms = cat oAtoms mol_Create *rec.mol;
    local ligatoms = cat oAtoms mol_Create *lig.mol;
    aSetPos [ligatoms, ligpos];

    local starttime = clock[];
    score = ScoreMTScore_dG [recatoms, ligatoms];
    write ['MTScoreES (dG): {} kcal/mol in {} secs\n', score, (clock[] - starttime)];
        
    oDestroy Chains [];
    SystemPop [osys, nsys];
    return score;
endfunction

global function qbInteractiveMTScoreUpdate []
    const RUNNINGMT = 'Running MTScore to update current binding affinity....';
    const RUNNINGMM = 'Running MM opt of ligand+pocket to update current binding affinity....';
    local currentState = 0;
    local currentPos = aPos Atoms[];
    if second task_fork[] == 'child' then
        task_settitle [-1, 'qbInteractiveMTScoreUpdate'];
        local msgkey = Message [ 0, '' ];
        loop
            if length uniq aResidue _Atoms '$$ligand' <> 1 then
                write ['Please select one and only one residue as a ligand\n'];
            elseif currentState <> SystemTopologyState [] or not (currentPos === aPos Atoms[]) then
                Message [ msgkey, RUNNINGMM ];
                local originalFixed = Atoms[] | aFixed Atoms[];
                aSetFixed [diff [Atoms[], _Atoms '$$ligand'], 1];
                MM [ gtest:0.01, maxit:200 ];
                aSetFixed [Atoms[], 0];
                aSetFixed [originalFixed, 1];
                currentState = SystemTopologyState [];
                currentPos = aPos Atoms[];
                local pdata = SystemPush Atoms[];
                Message [ msgkey, RUNNINGMT ];
                Message [msgkey, twrite ['MTScoreES (dG): {} kcal/mol\n', ScoreMTScore_dG [
                    cat diff [Atoms[], _Atoms '$$ligand'],
                    cat _Atoms '$$ligand'
                ]]];
                SystemPop pdata;
            endif
            sleep 0.5;
        endloop
    endif
endfunction

// functions necessary for the qbInteractiveMTScoreUpdate panel

const WINDOW_NAME = 'QuantumBio/MTScore BETA';		// window title
function qbExecManager;

// MakePanel only takes care of what the panel looks like but not the contents or processing any triggers.
local function MakePanel opt

//    local opt_enableSidepanel = GetRCBoolean ['QuantumBio.MTInteractions.enableSidepanel', 1];
    DelRC ['QuantumBio.MTInteractions.enableSidepanel'];        // currently unsupported option - remove the option and start from scratch for now
    local opt_enableSidepanel = 1;
    
    local openicon = gr_icon ['$MOE/lib/icon/open.ico', 12, 'foreground'];
    local configicon = gr_icon ['$MOE/lib/icon/config.ico', 12, 'foreground'];
            
    local window = [
        title: WINDOW_NAME,
        name: 'shell', 
        text: [select ['Detach', 'Attach', opt_enableSidepanel], 'Close'],
        sensitive : [0,1],
        onTrigger: ['return', 'exit'],
        Vbox: [
//            Hbox:   qbWSConfig ['getWidget'],       // lmw - standard WS config widget
            Hbox:   qbExecManager ['getStatusWidget'],       // lmw - standard WS config widget
            Hbox:   [
                Label:  [
                    text: 'Status: '
                ],
                Label: [
                    name: 'sysok',
                    text: ''
                ]
            ],
            Button: [
                text: 'Structure Preparation', name: 'button_MOEPreparation', extendH: 1,
                bubbleHelp: 
                    'Configure and run the MOE-based structure preparation.\n'
                    '   Warning, if less then 49% the atoms are protons. FIX: Run Protonate3D.\n'
                    '   Noted, if there was no change to the structure before and after structure preparation.\n'
                    '   Noted, if not performed.'
            ],
            Mbox: [
                columns: 3, extendH: 1
                , Label: [
                        text: 'MDB: '
                ]
                , FSBText: [
                    name: 'outdb', len: 25, extendH: 1, mode: 'saveAs',sensitive:0,
                    bubbleHelp:
                        'The database to which the generated structures\n'
                        'will be written.'
                ]
                , Button: [
                    title: '', name: 'browse_outdb', graphics: openicon,
                    bubbleHelp: 'Select / Create MDB to store ligands of interest.\nNew DB will be created while existing DB will be read and added to list below.'
                ]
            ]
            , Hbox:   [
                Label:  [
                    text: 'Optimize: ',
                    bubbleHelp: 'Optimize ligand or receptor pocket prior to score.'
                ]
                , Radio:  [
                    name: 'optlevel',
                    text: ['None','Ligand','Pocket','Dock'],
                    onTrigger: 'return',
                    bubbleHelp: 'Optimize ligand or receptor pocket prior to score.'                
                ]
                , Button: [
                    name: 'configDock', graphics: configicon,
                    bubbleHelp: 'Configure QuantumBio Executor (application, host and port).'
                ]
                , Button: [
                        name: 'addCurrent', text: 'Add',
                        bubbleHelp: 'Add the selected ligand within the MOE window to the list and calculate MTScoreES.'
                ]
            ]
#if NEWTOOLS
            , Hbox:   [
                Label:  [
                    text: 'Ensemble: ',
                    bubbleHelp: 'Execute Ensemble MTScore calculation using chosen executor on chosen structures.\n   All mseq poses will be used when "Input" is selected otherwise the MOE/Dock tool will be used.'
                ]
                , Radio:  [
                    name: 'docklevel',
                    text: ['Input','Dock'],
                    onTrigger: 'return',
                    bubbleHelp: 'Use the input protein:ligand poses or generate poses using MOE/Dock'                
                ]
                , Button: [
                        name: 'runSelected', text: 'RunE',
                        bubbleHelp: 'Add the selected ligand within the MOE window to the list and calculate MTScoreES.'
                ]
            ]
#endif
            , Listbox : [
                name: 'slist'
                , onTrigger: 'return'
                , multiSelect: 0
                , type: 'int'
                , sortEnable: 1
                , zebra: 1
                , header: 'Label\tMTScoreES\tPoses\tMTScoreE'
                , resizeV:1
                , extendH:1
                , width: 40
            ]
            , Hbox:   [
                Text    :   [
                    name:   'tLigName'
                    , len:    20
                    , type:   'char'
                    , onTrigger: 'return'
                ]
                , Button  :   [
                    name:   'bRename'
                    , text:   'Rename'
                ]
                , Button: [
                        name: 'deleteSelection', text: 'X', font: 'mediumBold',flushLeft: 0
                        , bubbleHelp: 'Delete selected ligand from the list.'
                ]            ]
            , Hbox:   [
                Label    :   [
                    text:    'Show: '
                    , bubbleHelp: 'Select which pose to show when example is selected in sidecar.\n NOTE: this function is currently unavailable and will be added in a future version.'                
                ]
                , Radio:  [
                    name: 'showlevel'
                    , text: ['Top','All','Selected']
                    , onTrigger: 'return'
                    , sensitive: 0
                    , bubbleHelp: 'Select which pose to show when example is selected in sidecar.\n NOTE: this function is currently unavailable and will be added in a future version.'                
                ]
            ]
            ,   Data:   [name:'molList']
            ,   Data:   [name:'scoresList']
            ,   Data:   [name:'namesList']
            ,   Data:   [name:'poseCountList']
            ,   Data:   [name:'ensembleScoreList']
            ,   Data:   [name:'currentState', value:-1]
            ,   Data:   [name:'currentPos', value:[[0],[0],[0]]]
            ,   Data:   [name:'msgkey', value:0]
            ,   Data:   [name:'addState', value:1]
            ,   Data:   [name:'isBricked', value:0]
        ]
    ];
    
    if opt_enableSidepanel then
	    window.location = 'MOE_Right';
    else
	    window.windowName = WINDOW_NAME;
    endif

    return window;
endfunction

// forward declarations
function PartialCharge;

local function SyncMDB wkey
    // If the DB exists, open it and check contents
    local dataFile = second cat WindowGetData [wkey, 'outdb'];
    if dataFile == '' then
        return;
    endif
    if ftype dataFile == '' then
        db_Open [dataFile, 'create'];
    endif
    db_EnsureField [dataFile, 'Label', 'char'];
    db_EnsureField [dataFile, 'Complex', 'moe'];
    db_EnsureField [dataFile, 'MTScoreES', 'double'];
    db_EnsureField [dataFile, 'mseq', 'int'];
    db_EnsureField [dataFile, 'S', 'float'];
    db_EnsureField [dataFile, 'jobtag', 'char'];
        
    db_SetEnv [ dataFile, 'QBMDBType', 'MTDB' ];
    // if the contents are MT contents, then read them in and add them to the viewer list
    local molList = [];
    local scoresList = [];
    local namesList = [];
    local poseCountList = [];
    local ensembleScoreList = [];
    local ent = 0;
    local inEntry;
        
    if db_GetEnv [dataFile, 'source'] == 'DOCK' then
        write ['in db_GetEnv\n'];
        local syskeys = SystemPush [];
        while ent = db_NextEntry [dataFile,ent] loop
            Close [force: 1];
            inEntry = db_Read [ dataFile, ent];
            if isnull inEntry.Complex then
                write ['in isnull tmpComplex: {} | {} | {}\n', length inEntry.mol, type inEntry.mol, inEntry.mol];
                mol_Create inEntry.receptor;
                mol_Create inEntry.mol;
                inEntry.Label = first inEntry.mol;
                write ['Chains: {}\n', length Chains[]];
                RenderProtein [Chains[]];
                local moe = _moe_Extract [Atoms[], GKeyList[], [mol_name: first cTag Chains[]]];
                db_Write [ dataFile, ent, [ Label : string inEntry.Label, Complex : moe ]];
            endif
        endloop
        SystemPop syskeys;
    endif

    ent = 0;
    syskeys = SystemPush [];
    while ent = db_NextEntry [dataFile,ent] loop
        Close [force: 1];
        inEntry = db_Read [ dataFile, ent];
        if isnull inEntry.S then
            _moe_Create [inEntry.Complex];
            inEntry.S = dock_score_GBVIWSA_dG ['scoreLigX', [cat [cat _Atoms '$$receptor', cat _Atoms '$$solvent'],cat _Atoms '$$ligand']];
            write ['Updating GBVIWSA_dG score (missing): {} | {} | {}\n', inEntry.Label, inEntry.mseq, inEntry.S];
            db_Write [ dataFile, ent, [ S : inEntry.S ]];
        endif
    endloop
    SystemPop syskeys;
    
    db_Sort [dataFile,['mseq','S'],[0,0]];
    ent = 0;
    local mseqEntry;
    local mseqColumn = cat db_ReadColumn [dataFile, 'mseq' ];
    local entry_keys = db_Entries dataFile;
    for mseqEntry in uniq mseqColumn loop
        ent = first (entry_keys | mseqColumn == mseqEntry);
        inEntry = db_Read [ dataFile, ent ];
        if not isnull inEntry.Label and not isnull inEntry.Complex then
            if isnull inEntry.MTScoreES then
                inEntry.MTScoreES = 0.0;
            endif
            molList = append [molList,ent];
            scoresList = append [scoresList, inEntry.MTScoreES];
            namesList = append [namesList, inEntry.Label];
            poseCountList = append [poseCountList, length (mseqColumn | mseqColumn == inEntry.mseq)];
            ensembleScoreList = append [ensembleScoreList, '-'];
        endif
    endloop

    WindowSetAttr[wkey, [
        slist:      [text : apt twrite ['{}\t{}\t{}\t{}',namesList,scoresList,poseCountList,ensembleScoreList]]
        , molList:    [value:molList]
        , scoresList: [value:scoresList]
        , namesList:  [value:namesList]
        , poseCountList: [value:poseCountList]
        , ensembleScoreList: [value:ensembleScoreList]
    ]];                

    return [dataFile,molList,scoresList,namesList];
endfunction

local function MergeMDB [inQBMDB, inDockMDB, inTargetMol]
    local success = 0;
    
    local [fldnames, fldtypes] = db_Fields inDockMDB;
    local fldname, fldtype, mfield;
    mfield = fldnames | fldtypes == 'molecule';
    if length mfield == 1 and isnull inTargetMol then
        exit 'ERROR: If there is only one mfield then you must provide target mol';
    endif

    for fldname in fldnames loop
        fldtype = fldtypes (indexof [fldname, fldnames]);
        db_EnsureField [inQBMDB, fldname, fldtype];
    endloop
    local newmseq;
    if isnull db_ReadColumn [inQBMDB, 'mseq' ] then
        newmseq = 1;
    else
        newmseq = (max cat db_ReadColumn [inQBMDB, 'mseq' ]) + 1;
    endif
    local ent = 0;
    local outKeys = [];
    local inEntry;
    local syskeys = SystemPush [];
    while ent = db_NextEntry [inDockMDB,ent] loop
        Close [force: 1];
        inEntry = db_Read [ inDockMDB, ent];
        if length mfield == 2 then
            mol_Create inEntry.receptor;
        else
            mol_Create inTargetMol;
        endif
        mol_Create inEntry.mol;
        inEntry.mseq = newmseq;
        inEntry.Label = string first inEntry.mol;
        RenderProtein [Chains[]];
        inEntry.Complex = _moe_Extract [Atoms[], GKeyList[], [mol_name: first cTag Chains[]]];
        local tmpKey = db_Write [ inQBMDB, 0, inEntry];
        outKeys = append [outKeys, tmpKey];
    endloop
    SystemPop syskeys;
    
    if length outKeys > 0 then
        success = first outKeys;
    endif
    return success;
endfunction

local function DeleteMDB [inQBMDB, ent]
    local inEntry = db_Read [ inQBMDB, ent];
    if isnull inEntry then
        return;
    endif
    local entry_keys = db_Entries inQBMDB;
    local mseqs = db_ReadColumn [ inQBMDB, 'mseq' ];
    db_Delete [inQBMDB, entry_keys | mseqs == inEntry.mseqs];
endfunction

// Monitor loop for addressing changing items in the UI
local function ReadyMonitor wkey
    local systemNonviewState = -1;
    local dbState = -1;
    
    local sysbool = 1;
    
    local dataFile;
    local prevDataFile = '';
    
    loop
        if second cat WindowGetData [wkey, 'isBricked'] then
            sleep 1;
            continue;
        endif

        dataFile = second cat WindowGetData [wkey, 'outdb'];
        
        if dataFile <> '' then
            qbExecManager ['UpdateQBDB', [dataFile]];
            if dbState <> db_State dataFile then
                dbState = db_State dataFile;
                SyncMDB wkey;
            endif
        endif
        
        if systemNonviewState <> SystemNonviewState[] or dataFile <> prevDataFile or sysbool == 0 then
            systemNonviewState = SystemNonviewState [];
            prevDataFile = dataFile;
            
            if second cat WindowGetData [wkey, 'currentState'] <> SystemTopologyState [] or 
                not (second cat WindowGetData [wkey, 'currentPos'] === aPos Atoms[]) then
                    Message [second cat WindowGetData [wkey, 'msgkey'], ''];
                    WindowSetAttr[wkey, [   slist:    [value : -1 ]]];
                    WindowSetAttr[wkey, [   addCurrent: [text : 'Add' ], addState: [value : 1 ]]];
            elseif second cat WindowGetData [wkey, 'optlevel'] <> 'None' then
                    WindowSetAttr[wkey, [   addCurrent: [text : 'Add' ], addState: [value : 1 ]]];
            else
                    WindowSetAttr[wkey, [   addCurrent: [text : 'Update' ], addState: [value : 0 ]]];
            endif

            local syskeys = SystemPush active Atoms[];    // limit the chances of concurrent molecule object editing errors
            static sys_serial, q_save, pot_serial;
            local atoms = Atoms[];

            local q = aCharge atoms;

            local check = not isnull wkey and not (
                SystemTopologyState[] === sys_serial
            and (q === q_save)
            and (pot_Info[]).serial === pot_serial
            );

            local fixH = 0, fixQ = 0;

            local xh = aExplicitHCount atoms;			// check H
            local hc = select [0, aHCount atoms, pot_Parm_uh atoms];
            fixH = fixH or orE (xh <> hc);

            local xlp = app add not aAtomicNumber aBonds atoms;	// check LP
            local lpc = pot_Parm_lp atoms;

            if orE lpc then
                local idx = x_pack lpc;
                lpc[idx | sm_Match ['[Lp1]', atoms[idx]]] = 1;
                lpc[idx | sm_Match ['[Lp2]', atoms[idx]]] = 2;
                lpc[idx | sm_Match ['[Lp3]', atoms[idx]]] = 3;
                lpc[idx | sm_Match ['[Lp4]', atoms[idx]]] = 4;
            endif

            fixH = fixH or orE (xlp <> lpc);

            local fq = first PartialCharge [atoms, 'FF'];
            local chargesEQ = max abs (q - fq) < 1e-5;

            fixQ = fixQ or not chargesEQ;
        
    //        if fixQ then
    //            pot_SetCharges[];
    //            fq = first PartialCharge [atoms, 'FF'];
    //            chargesEQ = max abs (q - fq) < 1e-5;
    //            fixQ = fixQ or not chargesEQ;
    //        endif
        
            local systext = 'Molecular system parameterized.';
            sysbool = 1;
            local syscolors = ['red','blue'];
    
            if isnull Atoms[] then
                systext = 'Open molecular system';
                sysbool = 0;
            elseif dataFile == '' then
                systext = 'Open/Create project database';
                sysbool = 0;
            elseif orE (aMMType atoms == '??') then
                systext = 'Unparameterized atoms in the system';
                sysbool = 0;
            elseif chargesEQ and abs (add q - add aIon atoms) > 1e-3 then
                systext = 'Missing atoms in the system';
                sysbool = 0;
            elseif fixH then
                systext = 'Error in Hydrogens or partial charges';
                sysbool = 0;
            elseif length uniq aResidue _Atoms '$$ligand' <> 1 then
                systext = 'Designate one residue as a ligand';
                sysbool = 0;
            elseif length uniq aResidue _Atoms '$$pocket' < 1 then
                systext = 'Designate residues as pocket';
                sysbool = 0;
//            elseif length qbWSTestEndpoint [] < 1 then
            elseif qbExecManager ['testEndpoint', wkey]  == 'error' then
                systext = 'Can not connect to chosen executor.';
                sysbool = 0;
            endif

            WindowSetAttr [wkey, [sysok:  [text: systext, foreground: syscolors [sysbool+1] ]]];
            WindowSetAttr [wkey, [addCurrent:  [sensitive: sysbool]]];

            q_save = q;
            sys_serial = SystemTopologyState[];
            pot_serial = (pot_Info[]).serial;
            SystemPop syskeys;
        elseif second cat WindowGetData [wkey, 'optlevel'] <> 'None' then
                    WindowSetAttr[wkey, [   addCurrent: [text : 'Add' ], addState: [value : 1 ]]];
        elseif not (isnull first second cat WindowGetData [wkey, 'slist']) then
                    WindowSetAttr[wkey, [   addCurrent: [text : 'Update' ], addState: [value : 0 ]]];
        endif
        
        sleep 1.0;
        
//        if sysbool == 0 then
//            sleep 1.0;
//        else
//            sleep 5.0;
//        endif
    endloop
endfunction

global function MTScore_dG_TaskManager mdbreference
    local pdata = SystemPush [];
        local dbEntry = db_Read [ mdbreference.dataFile, mdbreference.molEntry];
        _moe_Create [dbEntry.Complex];
    // Try #1:
//                currentMTScoreES = ScoreMTScore_dG [active cat _Atoms '$$receptor', active cat _Atoms '$$ligand'];
//    local currentMTScoreES = first task_call ['ScoreMTScore_dG', [active cat _Atoms '$$receptor', active cat _Atoms '$$ligand', mdbreference], [errmsg:'ignore']];
    local currentMTScoreES = ScoreMTScore_dG [active cat _Atoms '$$receptor', active cat _Atoms '$$ligand', mdbreference];
    // Try #2:
    if isnull currentMTScoreES then
        write ['MTScore Calculation failed (likely unable to reach host): trying again....\n'];
        sleep 1.0;
//                    currentMTScoreES = ScoreMTScore_dG [active cat _Atoms '$$receptor', active cat _Atoms '$$ligand'];
//        currentMTScoreES = first task_call ['ScoreMTScore_dG', [active cat _Atoms '$$receptor', active cat _Atoms '$$ligand', mdbreference], [errmsg:'ignore']];
    endif
//    Message [ msgkey, RUNNINGMT ];
    SystemPop pdata;
    if not isscalarnum currentMTScoreES then
        if isnull currentMTScoreES then
            currentMTScoreES = 'ERROR';
        endif
//        Message [msgkey, twrite ['MTScoreES (dG): {}\n', currentMTScoreES]];
    else
        dbEntry.MTScoreES = currentMTScoreES;
        db_Write [ mdbreference.dataFile, mdbreference.molEntry, dbEntry ];
    endif
//    local [dataFile,molList,scoresList,namesList] = SyncMDB mdbreference.wkey;
//    WindowSetAttr[mdbreference.wkey, [   slist:    [value : length molList ]]];
endfunction

// qbAmberTIPanel is a function which is to take care of all of the AMBERTI processing (so the changes to CCG code is minimal)
global function qbAmberTIPanel [cmd, wkey, trigger, values]
    if cmd == 'getWidget' then
        return [
            margin: 5,
            columns: 1, extendH: 0,
            Hbox: qbWSConfig ['getWidget'],       // standard call to build/get qbWebService status (consistent between QB widgets)
            Label : [text: 'this is a test']
        ];
    elseif cmd == 'processWidget' then
        return qbWSConfig ['processWidget', wkey, trigger, values];
    endif
endfunction

global function qbInteractiveMTScoreUI opt

    local wkey = WindowCreate MakePanel opt;
    WindowShow wkey;

//    local currentState = 0;
    local currentState = second cat WindowGetData [wkey, 'currentState'];
//    local currentPos = aPos Atoms[];
    local currentPos = second cat WindowGetData [wkey, 'currentPos'];
    local currentOptLevel = second cat WindowGetData [wkey, 'optlevel'];
    local currentMTScoreES = 0;

    const RUNNINGMT = 'Running MTScore to update current binding affinity....';
    const RUNNINGMM = 'Running MM opt of ligand+pocket to update current binding affinity....';
    local msgkey = Message [ 0, '' ];
    
    local scoresList = [];
    local namesList = [];
    local molList = [];
    local prevSelected = 0;
    
    local dataFile;
    local prevDataFile;
    
    local status;
    
    local mdb_key;
    local tmpLabel, tmpComplex, tmpMTScoreES;

// local functions
    
    local function brickpanel [wkey,status]
        WindowSetAttr[wkey, [
            isBricked:      [value : status ]
        ]];  
    endfunction
        
    if second task_fork [master:'mutual', idle:1, prio:0] === 'child' then
        ReadyMonitor wkey;
        exit [];
    endif
    
// main loop //
    loop
        local [values, trigger] = WindowWait wkey;
// write ['trigger: {}\n', trigger];
        molList = values.molList;
        scoresList = values.scoresList;
        namesList = values.namesList;
        if trigger === 'showSelection' or trigger === 'slist' then
            if first values.slist and first values.slist <> prevSelected then
                prevSelected = first values.slist;
                local parentResidue = uniq aResidue _Atoms '$$ligand';
                local tmpBondLook = first aBondLook cat _Atoms '$$ligand';
                local inEntity = db_Read [ dataFile, molList(first values.slist) ];
                oDestroy Chains[];
//                _moe_Create [ db_ReadFields [dataFile, molList(first values.slist), 'Complex'], [view:0] ];
                _moe_Create [ inEntity.Complex, [view:0] ];
                currentState = SystemTopologyState [];
                currentPos = aPos Atoms[];
                WindowSetAttr[wkey, [
                    currentState:   [value : currentState ],
                    currentPos:     [value : currentPos ],
                    msgkey:         [value : msgkey ]
                ]];  
                WindowSetAttr[wkey, [   tLigName:    [value : namesList(first values.slist) ]]];  
                Message [msgkey, twrite ['MTScoreES (dG): {} kcal/mol\n', scoresList(first values.slist)]];
            endif
        elseif trigger === 'addCurrent' then
            WindowSetAttr [wkey, [addCurrent:  [sensitive: 0]]];
            if currentState <> SystemTopologyState [] 
                        or not (currentPos === aPos active Atoms[]) 
                        or values.optlevel <> currentOptLevel then
                if values.optlevel <> 'None' then
                    Message [ msgkey, RUNNINGMM ];
                    if values.optlevel <> 'Dock' then
                        local originalFixed = Atoms[] | aFixed Atoms[];
                        aSetFixed [Atoms[], 1];
                        aSetFixed [active _Atoms '$$ligand', 0];
                        if values.optlevel == 'Pocket' then
                            aSetFixed [active _Atoms '$$pocket', 0];
                        endif
                        MM [ gtest:0.01, maxit:200 ];
                        aSetFixed [Atoms[], 0];
                        aSetFixed [originalFixed, 1];
                    endif
                endif
                
                if values.optlevel <> 'Dock' then
                    currentOptLevel = values.optlevel;
                    currentState = SystemTopologyState [];
                    currentPos = aPos active Atoms[];
                    WindowSetAttr[wkey, [
                        currentState:   [value : currentState ],
                        currentPos:     [value : currentPos ],
                        msgkey:         [value : msgkey ]
                    ]];  
                    Message [ msgkey, RUNNINGMT ];
                    tmpLabel = StartName[];
                    local newmseq;
                    if isnull db_ReadColumn [dataFile, 'mseq' ] then
                        newmseq = 1;
                    else
                        newmseq = (max cat db_ReadColumn [dataFile, 'mseq' ]) + 1;
                    endif
                    local molEntry = db_Write [ dataFile, 0, [
                            Label : string tmpLabel
                            , Complex : _moe_Extract [Chains[]]
                            , mseq : newmseq
                    ]];
                endif
                
                local mdbreference;
                mdbreference.dataFile = dataFile;
                mdbreference.molEntry = molEntry;
                mdbreference.msgkey = msgkey;
                mdbreference.wkey = wkey;
                
                if second task_fork [master:'parent', idle:1, prio:0] === 'child' then
                    if values.optlevel == 'Dock' then
                        local dockMDB = twrite ['{}.mdb', qbuuid[]];
                        local dockopt;
//                        dockopt.refine='Induced Fit';
//                        dockopt.refine_opt.fixrec='Tether';
                        local psys = SystemPush Atoms[];
// TODO: what happens if there are multiple poses? (numposes > 1) idea: throw a yes/no dialog to confirm? then do we go to ensemble docking?
// TODO: road from RC settings (which would have been set by config)
// TODO: test use/impact of water?
// TODO: test what happens with multiple ligands in complex?
                        DockAtoms [_Atoms '$$receptor', _Atoms '$$ligand', _Atoms '$$ligand', dockMDB, dockopt];
                        db_Sort [dockMDB,'S',0];
                        mdbreference.molEntry = MergeMDB [dataFile, dockMDB, mol_Extract _Atoms '$$receptor', dockopt];
                        SystemPop psys;
                        dbv_Close dbv_Open dockMDB;
                        fdelete dockMDB;
                    endif
                    MTScore_dG_TaskManager mdbreference;
                    exit [];
                endif
            else
                local tmpMsg = Message [0,'The molecule has not changed since last execution. Please edit molecule in order to run again.'];
                sleep 5;
                Message [tmpMsg,''];
            endif
            WindowSetAttr [wkey, [addCurrent:  [sensitive: 1]]];
        elseif trigger === 'deleteSelection' then
            WindowSetAttr [wkey, [deleteSelection:  [sensitive: 0]]];
            db_Delete [dataFile, molList(first values.slist)];
            [dataFile,molList,scoresList,namesList] = SyncMDB wkey;
            Message [second cat WindowGetData [wkey, 'msgkey'], ''];
            WindowSetAttr[wkey, [   slist:    [value : -1 ]]];  
            currentState = -1;
            currentPos = [[0],[0],[0]];
            WindowSetAttr[wkey, [
                currentState:   [value : currentState ],
                currentPos:     [value : currentPos ],
                msgkey:         [value : msgkey ]
            ]];  
            WindowSetAttr [wkey, [deleteSelection:  [sensitive: 1]]];
        elseif trigger === 'button_MOEPreparation' then
            if second task_fork [master:'parent', idle:1, prio:0] === 'child' then
                run ['structprep_ui.svl', [cmd:'interactive']];
                status.ran_structprep = 1;
                sleep 2.0;      // needs a couple of seconds to init StructurePrep function
                while WindowKey 'Structure Preparation' loop
                    sleep 0.15;
                    if WindowKey 'Protonate3D' then
                        status.ran_protonate = 1;
                    endif
                endloop
                exit [];
            endif
        elseif trigger === 'optlevel' then                
            local prevSelection = Atoms[] | aSelected Atoms[];
            aSetSelected [Atoms[], 0];
            if values.optlevel == 'Ligand' then
                aSetSelected [active _Atoms '$$ligand', 1];
            elseif values.optlevel == 'Pocket' then
                aSetSelected [cat [active _Atoms '$$pocket',active _Atoms '$$ligand'], 1];
            endif
            sleep 1.0;
            aSetSelected [Atoms[], 0];
            aSetSelected [prevSelection, 1];
        elseif trigger === 'browse_outdb' then
            local btid = run ['fbrowse.svl', [wkey, trigger, [outdb: [
                title: 'Output Database',
                mode: 'file',
                filter: '*.mdb',
                autoExtension: 'mdb'
            ]]]];
            // wait until the above noted task is complete - we need to do some processing.
            while task_key btid loop
                sleep 0.50;
            endloop
            [dataFile,molList,scoresList,namesList] = SyncMDB wkey;
            if not isnull dataFile then
                qbExecManager ['UpdateQBDB', [dataFile]];
                task_call ['dbv_OpenFile', dataFile, [errmsg:'ignore']];
            endif
        elseif trigger === 'bRename' or trigger === 'tLigName' then
            namesList(first values.slist) = first values.tLigName;
            db_Write [ dataFile, molList(first values.slist), [Label : string namesList(first values.slist) ] ];
            [dataFile,molList,scoresList,namesList] = SyncMDB wkey;
        elseif trigger === 'shell' then
            if values.shell === 'Attach' or values.shell === 'Detach' then
//                SetRCBoolean ['QuantumBio.MTInteractions.enableSidepanel', values.shell==='Attach'];
//                task_call [ 'qbInteractiveMTScoreUI', [], [master:'none', creator:'detach', statics: 'new'] ];
            else
                WindowDestroy WindowKey wkey;
                break;
            endif
        elseif trigger === 'button_WSsetup' then
            if second task_fork [master:'parent', idle:1, prio:0] === 'child' then
                qbExecManager ['processWidget', [wkey, trigger, values]];
                values = WindowValues wkey;
                exit [];
            endif
        endif
    endloop

endfunction

#eof

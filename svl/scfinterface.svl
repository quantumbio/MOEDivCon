#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.
    
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

#set title   'QuantumBio SCF Interface'
#set class   'QuantumBio'
#set version '2010.02'
#set main 'qb_SCF_GeomOpt'

const BOHR_TO_ANG = 0.529177249;
const ANG_TO_BOHR = inv BOHR_TO_ANG;
const AU_TO_KCALMOL = 627.5095;
const KCALMOL_TO_AU = inv AU_TO_KCALMOL;
const AU_TO_EV = 27.211396;
const EV_TO_AU = inv AU_TO_EV;


local function divcon_IsAvailable []
    // It is required that moedivcongeomopt be in the user's PATH.
    return 1;
endfunction


global function qb_SCF_GeomOpt param

local [cfg, cmd, act] = param;
if tok_length cfg.jobtitle == 0 then
    Warning 'Empty job title.';
    return cfg;
endif

//@todo the env and master need to be defined
local process_key = exe_open ['moedivcongeomopt', '.', [], 1];
local process_keys = [process_key];
local status    = exe_status   process_keys;

local prios    = exe_getpriority process_keys;
exe_setpriority [ process_keys, prios ];

local stdin    = exe_stdin process_keys;
local stdout   = exe_stdout process_keys;
local stderr   = exe_stderr process_keys;

//  pass over options
fwrite [stdin, '{t:}\n', cfg.jobtitle];
fwrite [stdin, '{t:}\n', cfg.basisname];
local solvent_model = cfg.solvent_model;
if length solvent_model === 0 then
    fwrite [stdin, '{n:}\n', 0];
else
    fwrite [stdin, '{n:}\n', 1];
    fwrite [stdin, '{c:}\n', solvent_model(1)];
    fwrite [stdin, '{n:}\n', solvent_model(2)];
endif
fwrite [stdin, '{n:}\n', act.optimize];
fwrite [stdin, '{n:}\n', act.vibfreq];

print act;  //DEBUG

//  pass the backbone to QuantumBio's divcon qm geometry optimizer
local mol = mol_Extract Chains [];
fwrite [stdin, '{n:}\n', mol_cCount mol];
local count = 1;
local residueIndex = 1;
local atomIndex = 0;
for  mol_cCount mol loop
    local chain = mol(2);
    local residueCount = chain(MOL_CHAIN_NRES)(count);
    fwrite [stdin, '{n:}\n', residueCount];
    for  residueCount loop
        local residueAtomCount = mol(3)(MOL_RES_NATOMS)(residueIndex);
        fwrite [stdin, '{c:} {n:} {n:}\n', mol(3)(MOL_RES_NAME)(residueIndex),
            mol(3)(MOL_RES_UID)(residueIndex), residueAtomCount];
        residueIndex=residueIndex+1;
        for  residueAtomCount loop
            atomIndex = atomIndex + 1;
            fwrite [stdin, '{c:} {c:} {n:.5f}\n',  
                mol(4)(MOL_ATOM_NAME)(atomIndex), 
                mol(4)(MOL_ATOM_EL)(atomIndex), 
                mol(4)(MOL_ATOM_CHARGE)(atomIndex)];
            fwrite [stdin, '{n:.5f} {n:.5f} {n:.5f}\n', 
                mol(4)(MOL_ATOM_X)(atomIndex), 
                mol(4)(MOL_ATOM_Y)(atomIndex), 
                mol(4)(MOL_ATOM_Z)(atomIndex)];
        endloop
    endloop
    count = count + 1;
endloop

local retValue;
local endit;
[retValue] = fread [stdout, '{n:}'];

//divcon([mol_aCount mol, aPos a]);

local sleep_time = 0.05, sleep_inc = 0.05;
local return_statement;
while exe_status process_key loop
    sleep sleep_time;
    sleep_time = min [1, sleep_time + sleep_inc];

    [[return_statement]] = fread [stdout, '{c:*}'];
    if cfg.verbose then print return_statement; endif;
    if return_statement === "updatecoordinates" then
        local totalEnergy;
        local heatOfFormation;
        [[totalEnergy, heatOfFormation]] = fread [stdout, '{n:}{n:}'];
        print [totalEnergy, heatOfFormation]; //DEBUG
        cfg.energy =  KCALMOL_TO_AU * totalEnergy;
        cfg.heat_of_formation = heatOfFormation;
        local atomCount = atomIndex;
        print atomCount; //DEBUG
        atomIndex = 1;
        local atoms = [[], [], [], [], []];
        local mullikens = [];
        local cm1s = [];
        local cm2s = [];
        for atomCount loop
            local elementIndex;
            local x;
            local y;
            local z;
            local mullikenCharge;
            local cm1Charge;
            local cm2Charge;
            [[elementIndex, x, y, z, mullikenCharge, cm1Charge, cm2Charge]] =
                fread [stdout, '{n:}{n:}{n:}{n:}{n:}{n:}{n:}'];
            atoms = apt cat [atoms, cat ['X', elementIndex, ANG_TO_BOHR * x, 
                ANG_TO_BOHR * y, ANG_TO_BOHR * z]];
            mullikens = cat [ mullikens, [mullikenCharge]];
            cm1s = cat [ cm1s, [cm1Charge]];
            cm2s = cat [ cm2s, [cm2Charge]];
            atomIndex = atomIndex + 1;
        endloop

//         atoms[[3,4,5]] = atoms[[3,4,5]] * ANG_TO_BOHR;
        atoms(1) = ELEMENT_SYM[atoms(2)];
        cfg.atoms = atoms;
        cfg.natoms = l_length atoms;
        cfg.charge_model.Mulliken = mullikens;
        cfg.charge_model.CM1 = cm1s;
        cfg.charge_model.CM2 = cm2s;
        local eigenCount;
        [eigenCount] = fread [stdout, '{n:}'];
        print ['eigenCount', eigenCount];
        cfg.nao = eigenCount ;
        cfg.eigenvalues = [];
        cfg.eigenvectors = [];
        cfg.density_matrix = [];
        cfg.overlap_integrals = [];
        cfg.slater_orbitals = [];
        local eigval = rep [rep [0, cfg.nao ], 2];
        local part = 1;
        for eigenCount loop
            local eigenIndex;
            local eigenValue;
            local eigenVectorSq;
            [[eigenIndex, eigenValue, eigenVectorSq]] =
                fread [stdout, '{n:}{n:}{n:}'];
            eigval(part) = put [eigval(part), eigenIndex,
                EV_TO_AU * eigenValue];
            if cfg.verbose then
                print [eigenIndex, eigenValue, eigenVectorSq];
            endif;
        endloop

        cfg.eigenvalues = eigval(part);
        [eigenCount] = fread [stdout, '{n:}'];
//        cfg.nao = eigenCount ;
        print ['eigenCount', eigenCount];
        local i = 1;
        local j = 1;
        local eigvec = rep [rep [rep [0,eigenCount], eigenCount], 2];
//        local eigvec = rep [rep [0,eigenCount], eigenCount];
        local eigmask = rep [0, cfg.nao];
        for eigenCount loop
            local eigenVector;
            [[eigenIndex]]= fread [stdout, '{n:}'];
            for i = 1, eigenCount loop
                [[eigenVector]] = fread [stdout, '{n:}'];
                // !!! switch to column-based interpretation
//                eigvec(part)(i) = put [eigvec(part)(i), eigenIndex, eigenVector];
                eigvec(part)(j)(i) = EV_TO_AU * eigenVector;
            endloop

            j = j + 1;
        endloop

        print [cfg.nao, 'eigvec', length eigvec, length eigvec(1)]; //DEBUG
//        cfg.eigenvectors = 0.5 * add app tr eigvec;
        cfg.eigenvectors = eigvec(part);
        local densityCount;
        [densityCount] = fread [stdout, '{n:}'];
        print ['densityCount', densityCount]; //DEBUG
        local density = rep [rep [rep [0,densityCount], densityCount], 2];
        i = 1;
        j = 1;
        for densityCount loop
            local p;
            local pIndex;
            [[pIndex]] = fread [stdout, '{n:}'];
            for i = 1, densityCount loop
                [[p]] = fread [stdout, '{n:}'];
                // !!! switch to column-based interpretation
                density(part)(j)(i) = EV_TO_AU * p;
            endloop

            j = j + 1;
        endloop

        cfg.density_matrix = density(part);
        local overlap = rep [rep [rep [0,densityCount], densityCount], 2];
        i = 1;
        j = 1;
        for densityCount loop
            local op;
            local opIndex;
            [[opIndex]] = fread [stdout, '{n:}'];
            for i = 1, densityCount loop
                [[op]] = fread [stdout, '{n:}'];
                // !!! switch to column-based interpretation
                overlap(part)(j)(i) = EV_TO_AU * op;
            endloop

            j = j + 1;
        endloop

        cfg.overlap_integrals = overlap(part);
        print ['overlap']; //DEBUG
        for densityCount loop
            local atidx;
            local atno;
            local mx;
            local my;
            local mz;
            local mr;
            local zeta;
            local N;
            [[atidx, atno, x, y, z, mx, my, mz, mr, zeta, N]] =
                fread [stdout, '{n:}{n:}{n:}{n:}{n:}{n:}{n:}{n:}{n:}{n:}{n:}'];
            cfg.slater_orbitals = cat [cfg.slater_orbitals ,
                [atidx, atno, x, y, z, mx, my, mz, mr, zeta, N]];
        endloop

//        cfg.slater_orbitals = app tr cfg.slater_orbitals;
        print ['cfg.slater_orbitals', cfg.slater_orbitals]; //DEBUG
        fwrite [stdin, '{c:}\n', 'Ok'];
    endif
endloop


print "killing moestdiodivcon ";

exe_kill  [process_key, 0];
exe_kill  process_key;
exe_close process_keys;
return cfg;
endfunction

// ---------------------------- External interface ----------------------------

global function scf_EngineDivcon param
    if isnull param then
        return [
        wavefn:     1,
        geomopt:    1,
        molorb:     1,
        eldens:     1,
        basis:      ['RM1', 'PM6', 'AM1', 'PM3', 'MNDO', 'MNDO/d'],
        basfunc:    'Slater',
        bascoord:   'Angstrom',
        uhf:        0,
        dft:        0,
        vibfreq:    1,
        keywords:   0,
        chgmodels:  ['Mulliken', 'CM1', 'CM2', 'BCC'],
        solvmodels: ['PB'],
        available:  divcon_IsAvailable []
    ];
    endif

    local [cfg, cmd, act] = param;
        
    // preconfiguration
    cfg.nelectrons = add cfg.atoms(2) - cfg.charge;
    cfg.input_notes = [];
    cfg.output_notes = [];
    cfg.error_notes = [];

    // nothing more to do
    if cmd == 'pre' then return cfg; endif
    if cmd == 'inp' then return cfg; endif
    if cmd == 'out' then return cfg; endif

    cfg = qb_SCF_GeomOpt param;

    return cfg;
endfunction

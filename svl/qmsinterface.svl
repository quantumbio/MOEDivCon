#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.

 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information,
 including trade secrets, belonging to QuantumBio Inc. and/or its
 affiliates.

 Use, duplication, or disclosure of this source code is strictly
 prohibited without prior written authorization by the management of
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif

#set title   'QuantumBio QMScore Interface'
#set class   'QuantumBio'
#set version '2010.02'
#set main 'qb_QMScore'

function qb_CheckChgTestDivConComplex;
function qb_GetWhich;
function qb_HamSetsInit;
function qb_PassBackbone;
function qb_PassValues;

/*  NOTE:  If you change the key lists here, you need to update the
 *         option lists and default indices in qbcore.svl and qmspanel.svl.
           The unused Hamilitonians were masked when the core was created.
 */

const HAM_KEYS =
    [
    'am1',
    'mndo',
    'mndod',
    'pddgpm3',
    'pm3',
    'pm6'
    ];

const LIG_KEYS =
    [
    'NOOPT',
    'LIGOPT',
    'COMPLEXOPT'
    ];

global function qb_QMScore [recmol, ligmol, perfile, coreopts, appopts,
        errortests,nonQBtagged]

    local osys, nsys, errmess = "";
    if not MOE_BATCH then
        [osys, nsys] = SystemPush [];
    endif

    //  If there are any errors, return immediately.  Run all error tests
    //  unless forced not to by user.
    qb_HamSetsInit [];
    local [recressets, recok, recchgok, ligressets, ligok, ligchgok, ckmsg]
        = qb_CheckChgTestDivConComplex [recmol, coreopts.recchg, ligmol,
            coreopts.ligchg, errortests, errortests, errortests,
            coreopts.testH, coreopts.testMM,
            'qms', HAM_KEYS (coreopts.ham)];
    if not alltrue [recok, recchgok, ligok, ligchgok] then
        if not alltrue [recok, ligok] then
            if tok_length ckmsg > 0 then
                errmess = cat [errmess, swrite ['Skipping!\n{}', ckmsg]];
                errmess = droplast errmess;  //drop the extra newline
            else
                errmess = cat [errmess, 
                    swrite ['Problematic molecule in {}, skipping!\n',
                    qb_GetWhich [not recok, not ligok]]];
            endif
        endif

        if not alltrue [recchgok, ligchgok] then
            errmess =  cat [errmess, 
                swrite ['Problematic charge for {}, skipping!', 
                qb_GetWhich [not recchgok, not ligchgok]]];
        endif

        oDestroy uniq cat oChains cat recressets;
        oDestroy uniq cat oChains cat ligressets;
        if not MOE_BATCH then
            SystemPop [osys, nsys];
        endif

        return [[], errmess];
    endif

    //  If there are any warnings, pass them up.
    if tok_length ckmsg > 0 then
        errmess = string ckmsg;
    endif

    local subdirname, delsubdir = 0;
    if coreopts.task === [] or coreopts.task === 0 then
        subdirname = coreopts.workdir;
    else
        delsubdir = 1;
        subdirname = twrite ['{}/qb_out{n:}', coreopts.workdir, coreopts.task];
        local okay = _fmkdir subdirname;
        if okay === -1 then
            errmess = cat [swrite ['Unable to create subdirectory:  {}\n',
                subdirname], errmess];

            oDestroy uniq cat oChains cat recressets;
            oDestroy uniq cat oChains cat ligressets;
            if not MOE_BATCH then
                SystemPop [osys, nsys];
            endif

            return [[], errmess];
        endif
    endif

    //  exe_open child process inherits parent's environment.
    local process_key = exe_open ['moedivconscoring', subdirname, [], 0];
    local process_keys = [process_key];
    local status = exe_status process_keys;

    local prios = exe_getpriority process_keys;
    exe_setpriority [process_keys, prios];

    local stdin = exe_stdin process_keys;
    local stdout = exe_stdout process_keys;
    local stderr = exe_stderr process_keys;

    //  Pass the two backbones to QuantumBio's DivCon QMScore
    //
    //  SplitReceptor ensures that there is only one chain per molecule
    //  in the receptor collection.
    local success = 0;
    fwrite [stdin, '{c:}\n', perfile];
    fwrite [stdin, '{c:}\n', select ['PWD', 'NOPWD', appopts.analpwd]];
    fwrite [stdin, '{c:}\n', select ['COMPRESSION', 'NOCOMPRESSION', 1]];
    fwrite [stdin, '{c:}\n', select ['PERSISTCOMPLEXDENSITY', 'NOPERSISTCOMPLEXDENSITY', 0]];
    fwrite [stdin, '{c:}\n', HAM_KEYS(coreopts.ham)];
    fwrite [stdin, '{c:}\n', select ['NOSTANDARD', 'STANDARD',
        coreopts.scaling === 1]];
    fwrite [stdin, '{c:}\n', select ['FREQ', 'NOFREQ', appopts.freq]];
    fwrite [stdin, '{c:}\n', LIG_KEYS(appopts.opt)];
    fwrite [stdin, '{n:}\n', appopts.shift];

    // we already did the work of figuring out which is receptor and which is ligand.
    // @todo: the divcon structure testing code changes the ressets. It is unclear if this was significant. Need to do some testing, but it seems redundent.
    recressets = mol_Create recmol;
    ligressets = mol_Create ligmol; 
    
    fwrite [stdin, '{c:}\n', recmol(1)(MOL_NAME)];
    fwrite [stdin, '{n:}\n', coreopts.recchg];
    qb_PassBackbone [stdout, stdin, recressets];
    qb_PassValues [stdout, stdin, [] ];

    fwrite [stdin, '{c:}\n', ligmol(1)(MOL_NAME)];
    fwrite [stdin, '{n:}\n', coreopts.ligchg];
    qb_PassBackbone [stdout, stdin, ligressets];
    qb_PassValues [stdout, stdin, nonQBtagged ];

    oDestroy uniq cat oChains recressets;
    oDestroy uniq cat oChains ligressets;
    if not MOE_BATCH then
        SystemPop [osys, nsys];
    endif

    const NUMRESULTS = 11;
    local results, return_statement;
    local sleep_time = 0.1;
    local divconerrmess = "";
    local status_length=0;
    while exe_status process_key loop
        fwrite [stdin, '{c:}\n', 'status'];
        [[return_statement]] = fread [stdout, '{c:*}'];

        if return_statement === "noupdate" then
        elseif return_statement === "running" then
	    [[status_length]] = fread [stdout, '{n:}'];
            for status_length loop
                [[return_statement]] = fread [stdout, '{c:*}'];
                write ['    running | {}\n', return_statement];
            endloop
        elseif return_statement === "success" then
            local name, nameValue;
            local parameter, parameterValue;
            [[name]] = fread [stdout, '{c:*}'];
            [[nameValue]] = fread [stdout, '{c:*}'];
            results = cat [results, [[name, nameValue]]];
            for NUMRESULTS loop
                [[parameter]] = fread [stdout, '{c:*}'];
                [[parameterValue]] = fread [stdout, '{n:}'];
                results = cat [results, [[parameter, parameterValue]]];
            endloop
            success = 1;
            fwrite [stdin, '{c:}\n', 'Ok'];

        elseif return_statement === "error" then
            [[return_statement]] = fread [stdout, '{c:*}'];
            if neL [return_statement, "DivCon done."] then
                divconerrmess = cat [divconerrmess, return_statement];
                [[return_statement]] = fread [stdout, '{c:*}'];
            endif
            while neL [return_statement, "DivCon done."] loop
                divconerrmess = cat [divconerrmess, "\n", return_statement];
                [[return_statement]] = fread [stdout, '{c:*}'];
            endloop;
            fwrite [stdin, '{c:}\n', 'Ok'];
        endif
        
        if not MOE_BATCH then
            sleep sleep_time;
        endif
    endloop

    //  Look for error messages from stderr.
    local [[newerror]] = fread [stderr, '{c:*}'];
    while length newerror > 0 loop
       // Hack!  Skip openmpi ignored error messages
        local errstrs = wordsplit [newerror, "()"];
        local errtoks = app token errstrs;
        local idx = indexof ['ignored', errtoks];
        if idx === 0 then
            write ['MOEDivCon: {}\n', newerror];
            errmess = cat [newerror, errmess];
        endif

        [[newerror]] = fread [stderr, '{c:*}'];
    endloop

    exe_kill  [process_key, 0];
    exe_kill  process_key;
    exe_close process_keys;

    //  Clean up working directory.
    if success === 1 then
        local templist = flist [subdirname, 'divcon.log'];
        if delsubdir then
            templist = cat [templist, subdirname];
        endif

        local delerr = app _fdelete templist;
        if anytrue delerr then
            local errfiles = templist | neE [delerr, 0];
            errmess = cat [swrite ['Unable to delete files: {v}\n',
                errfiles], errmess];
        endif
    endif

    if success === 1 then
        return [results, errmess];
    else
        if isnull divconerrmess then divconerrmess = "Unknown error!"; endif
        if isnull errmess then
            errmess = cat [divconerrmess,
                swrite ['\nLog file:  {}:{}/divcon.log\n',
                getenv 'HOSTNAME', subdirname]];
        else
            errmess = cat [divconerrmess,
                swrite ['\nLog file:  {}:{}/divcon.log\n',
                getenv 'HOSTNAME', subdirname], errmess];
        endif
        return [[], errmess];
    endif
endfunction


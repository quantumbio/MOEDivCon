#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2012 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

#set title   'QuantumBio NMRScore Interface'
#set class   'QuantumBio'
#set version '2010.01'
#set main 'qb_NMRScore'

function qb_CheckChgTestDivConComplex;
function qb_GetElemIndices;
function qb_GetWhich;
function qb_HamSetsInit;
function qb_PassBackbone;
function qb_RMSD;

/*  NOTE:  If you change the key lists here, you need to update the
 *         option lists and default indices in qbcore.svl and nmrpanel.svl.
           The unused Hamilitonians were masked when the core was created.
 */

const HAM_KEYS =
    [
    'am1',
    'mndo'
    ];

const DIVCON_HAM_KEYS =
    [
    'am1_nmr',
    'mndo_nmr'
    ];

const GEOM_KEYS =
    [
    'NOOPT',
    'HONLYOPT',
    'HETEROOPT',
    'ALLOPT'
    ];
const CSP_KEYS =
    [
    'H_ONLY',
    'C_ONLY',
    'ALL'
    ];

global function qb_NMRScore [recmol, ligmol, perfile, coreopts, appopts, 
        errortests, indices, free, bound]

    local osys, nsys, errmess = "";
    if not MOE_BATCH then
        [osys, nsys] = SystemPush [];
    endif

    //  If there are any errors, return immediately.  Run all error tests
    //  unless forced not to by user.
    qb_HamSetsInit [];
    local [recressets, recok, recchgok, ligressets, ligok, ligchgok, ckmsg]
        = qb_CheckChgTestDivConComplex [recmol, coreopts.recchg, ligmol,
            coreopts.ligchg, errortests, errortests, errortests,
            coreopts.testH, coreopts.testMM,
            'nmr', HAM_KEYS (coreopts.ham)];

    if not alltrue [recok, recchgok, ligok, ligchgok] then
        if not alltrue [recok, ligok] then
            if tok_length ckmsg > 0 then
                errmess = cat [errmess, swrite ['Skipping!\n{}Skipping!',
                    ckmsg]];
            else
                errmess = cat [errmess, 
                    swrite ['Problematic molecule in {}, skipping!\n',
                    qb_GetWhich [not recok, not ligok]]];
            endif
        endif

        if not alltrue [recchgok, ligchgok] then
            errmess =  cat [errmess, 
                swrite ['Problematic charge for {}, skipping!', 
                qb_GetWhich [not recchgok, not ligchgok]]];
        endif

        oDestroy uniq cat oChains cat recressets;
        oDestroy uniq cat oChains cat ligressets;
        if not MOE_BATCH then
            SystemPop [osys, nsys];
        endif

        return [[], errmess];
    endif

    //  If there are any warnings, pass them up.
    if tok_length ckmsg > 0 then
        errmess = string ckmsg;
    endif

    local subdirname, delsubdir = 0;
    if coreopts.task === [] or coreopts.task === 0 then
        subdirname = cd [];
    else
        delsubdir = 1;
        subdirname = twrite ['{}/qb_out{n:}', cd [], coreopts.task];
        local okay = _fmkdir subdirname;
        if okay === -1 then
            errmess = cat [swrite ['Unable to create subdirectory:  {}',
                subdirname], errmess];

            oDestroy uniq cat oChains cat recressets;
            oDestroy uniq cat oChains cat ligressets;
            if not MOE_BATCH then
                SystemPop [osys, nsys];
            endif

            return [[], errmess];
        endif
    endif

    local poseidxs = qb_GetElemIndices [ligmol, appopts.csp];
    if neL [length indices, length poseidxs] then
        errmess = cat [swrite ['Skipping!  Atom indices are inconsistent:\n'
            '    Orig: {v}\n    Pose: {v}\n', indices, poseidxs], errmess];

        oDestroy uniq cat oChains cat recressets;
        oDestroy uniq cat oChains cat ligressets;
        if not MOE_BATCH then
            SystemPop [osys, nsys];
        endif

        return [[], errmess];
    endif
 
    if not alltrue eqE [indices, poseidxs] then
        errmess = cat [swrite ['Skipping!  Atom indices are inconsistent:\n'
            '    Orig: {v}\n    Pose: {v}\n', indices, poseidxs], errmess];

        oDestroy uniq cat oChains cat recressets;
        oDestroy uniq cat oChains cat ligressets;
        if not MOE_BATCH then
            SystemPop [osys, nsys];
        endif

        return [[], errmess];
    endif
 
    //  exe_open child process inherits parent's environment.
    local process_key = exe_open ['moedivconnmr', subdirname, [], 1];
    local process_keys = [process_key];
    local status = exe_status process_keys;

    local prios = exe_getpriority process_keys;
    exe_setpriority [process_keys, prios];

    local stdin = exe_stdin process_keys;
    local stdout = exe_stdout process_keys;
    local stderr = exe_stderr process_keys;

    //  Pass the options and the two backbones to QuantumBio's DivCon NMRScore
    //
    //  SplitReceptor ensures that there is only one chain per molecule
    //  in the receptor collection.

    local success = 0;

    fwrite [stdin, '{c:}\n', perfile];
    fwrite [stdin, '{c:}\n', recmol(1)(MOL_NAME)];
    fwrite [stdin, '{c:}\n', ligmol(1)(MOL_NAME)];
    fwrite [stdin, '{c:}\n', DIVCON_HAM_KEYS(coreopts.ham)];
    fwrite [stdin, '{c:}\n', select ['NOSTANDARD', 'STANDARD',
        coreopts.scaling === 1]];
    fwrite [stdin, '{c:}\n', GEOM_KEYS(appopts.opt)];
    fwrite [stdin, '{c:}\n', select ['GUESS', 'NOGUESS', appopts.guess]];
    fwrite [stdin, '{c:}\n', CSP_KEYS(appopts.csp)];

    fwrite [stdin, '{n:}\n', coreopts.recchg];
    fwrite [stdin, '{n:}\n', coreopts.ligchg];
    // we already did the work of figuring out which is receptor and which is ligand.
    // @todo: the divcon structure testing code changes the ressets. It is unclear if this was significant. Need to do some testing, but it seems redundent.
    recressets = mol_Create recmol;
    ligressets = mol_Create ligmol; 
    qb_PassBackbone [stdout, stdin, recressets];
    qb_PassBackbone [stdout, stdin, ligressets];

    oDestroy uniq cat oChains recressets;
    oDestroy uniq cat oChains ligressets;
    if not MOE_BATCH then
        SystemPop [osys, nsys];
    endif

    //    results has the format:  [nmrscore, [V1, V2, ... , Vn]]
    local results = [], return_statement;
    local sleep_time = 0.1;
    local divconerrmess = "";
    local status_length=0;
    while exe_status process_key loop
        fwrite [stdin, '{c:}\n', 'status'];
        [[return_statement]] = fread [stdout, '{c:*}'];

        if return_statement === "noupdate" then
        elseif return_statement === "running" then
	    [[status_length]] = fread [stdout, '{n:}'];
            for status_length loop
                [[return_statement]] = fread [stdout, '{c:*}'];
                print ['running', return_statement];
            endloop
        elseif return_statement === "success" then
            local atomindices = [], atomvalues = [];
            local [[numvals]] = fread [stdout, '{n:}'];
            for numvals loop
                local [[cspidx]] = fread [stdout, '{n:}'];
                local [[cspval]] = fread [stdout, '{n:}'];
                atomindices = append [atomindices, cspidx];
                atomvalues = append [atomvalues, cspval];
            endloop

            local sidx = x_sort atomindices;
            atomindices = atomindices [sidx];
            atomvalues = atomvalues [sidx];
            if neL [length indices, length atomindices] then
                errmess = cat [swrite ['Error! Atom indices are inconsistent:\n'
                    '    Orig: {v}\n    DivCon: {v}\n', indices, atomindices],
                    errmess];
                return [[], errmess];
            endif

            if not alltrue eqE [indices, atomindices] then
                errmess = cat [swrite ['Error! Atom indices are inconsistent:\n'
                    '    Orig: {v}\n    DivCon: {v}\n', indices, atomindices],
                    errmess];
                return [[], errmess];
            endif

            local score = qb_RMSD [atomvalues, free - bound];
            results = [score, atomvalues];
            success = 1;
            fwrite [stdin, '{c:}\n', 'Ok'];

        elseif return_statement === "error" then
            [[return_statement]] = fread [stdout, '{c:*}'];
            if neL [return_statement, "DivCon done."] then
                divconerrmess = cat [divconerrmess, return_statement];
                [[return_statement]] = fread [stdout, '{c:*}'];
            endif
            while neL [return_statement, "DivCon done."] loop
                divconerrmess = cat [divconerrmess, "\n", return_statement];
                [[return_statement]] = fread [stdout, '{c:*}'];
            endloop;
            fwrite [stdin, '{c:}\n', 'Ok'];
        endif
        if not MOE_BATCH then
            sleep sleep_time;
        endif
    endloop

    //  Look for error messages from stderr.
    local [[newerror]] = fread [stderr, '{c:*}'];
    while length newerror > 0 loop
        // Hack!  Skip openmpi ignored error messages //DEBUG
        local errstrs = wordsplit [newerror, "()"];
        local errtoks = app token errstrs;
        local idx = indexof ['ignored', errtoks];
        if idx === 0 then
            write ['MOEDivCon: {}\n', newerror];
            errmess = cat [newerror, errmess];
        endif

        [[newerror]] = fread [stderr, '{c:*}'];
    endloop

    exe_kill  [process_key, 0];
    exe_kill  process_key;
    exe_close process_keys;

    //  Clean up working directory.
    if success === 1 then
        local templist = flist [subdirname, 'divcon.log'];
        if delsubdir then
            templist = cat [templist, subdirname];
        endif

        local delerr = app _fdelete templist;
        if anytrue delerr then
            local errfiles = templist | neE [delerr, 0];
            errmess = cat [swrite ['Unable to delete files: {v}',
                errfiles], errmess];
        endif
    endif

    if success === 1 then
        return [results, errmess];
    else
        if isnull divconerrmess then divconerrmess = "Unknown error!"; endif
        if isnull errmess then
            errmess = cat [divconerrmess,
                swrite ['\nLog file:  {}:{}/divcon.log',
                getenv 'HOSTNAME', subdirname]];
        else
            errmess = cat [divconerrmess,
                swrite ['\nLog file:  {}:{}/divcon.log\n',
                getenv 'HOSTNAME', subdirname], errmess];
        endif
        return [[], errmess];
    endif
endfunction

// QuantumBio h5 Java/SVL interface functions

function __db_ImportASCII_DetectOptions;
function __db_ImportASCII_ReadFile;
function db_ImportASCII;
function db_Open;
function db_Close;

global function qb_cLetter chainid
    return fext cName chainid;
endfunction

// Functions necessary to find the corresponding Atoms from a QB-standard NMR CSV file
// The QB-standard NMR CSV file stores the following information:
//  "Chain","Residue ID","Sequence","Atom Name","Unbound ppm","Bound ppm"
//  "A","VAL",380,"CG1",0,-0.27
// these items point to atoms in the MOE window
local function FindAtoms values
    local interestResidue = Residues [] | qb_cLetter rChain Residues [] == token values.'Chain' and rUID Residues[] == values.'Sequence';
    local expBound;
    local expUnBound;
    if isnull interestResidue then
        write ['warning (residue not found): {} {} {}\n', values.'Chain', values.'Residue ID', values.'Sequence'];
        return [];
    endif

    local interestAtoms = cat rAtoms interestResidue;

    local centeredAtom = interestAtoms | aName interestAtoms == token values.'Atom Name';
    if length centeredAtom > 1 then
        write ['ERROR: There is more then one atom of name {} in residue {}:{}\n', token values.'Atom Name', token values.Chain,values.Sequence];
        centeredAtom = [];
    endif
    expBound = values.'Bound ppm';
    expUnBound = values.'Unbound ppm';
    return [centeredAtom,expBound,expUnBound];
endfunction

// MOE requires a MDB with which to work in subsequent steps.
//  This function will translate the user-provided CSV file (of same "format" as Pipeline) to that MDB file.
const INCSV_DEFAULTS = [
    db_file:[],
    ascii_file:[]
];

function db_ExportASCII;

local function qbNMRCSVtoMDB opt
    opt = tagcat[opt, INCSV_DEFAULTS];
    if isnull opt.ascii_file then
        write ['Error: opt.ascii_file not set prior to calling function\n'];
        return [];
    endif
    opt.db_file = twrite['{}-DELETE.mdb',fbase opt.ascii_file];
    db_Close db_Open [opt.db_file,'create'];
    opt = __db_ImportASCII_DetectOptions opt;
    opt = __db_ImportASCII_ReadFile opt;
    opt.types = ['char','char','int','char','float','float'];
    db_ImportASCII opt;
    // read in MDB file and return the corresponding atoms in the MOE window
    local mdbKey = db_Open [opt.db_file,'read'];
    local entryKeys = db_Entries mdbKey;
    local tmpEntryKey,runAtoms,boundData,unboundData;
    runAtoms = [];
    for tmpEntryKey in entryKeys loop
        local [centeredAtom,expBound,expUnBound] = FindAtoms db_Read [mdbKey,tmpEntryKey];
        if not isnull centeredAtom then
            boundData.(totok centeredAtom) = expBound;
            unboundData.(totok centeredAtom) = expUnBound;
            runAtoms = uniq cat [runAtoms,centeredAtom];
        endif
    endloop
    db_Close mdbKey;
    fdelete opt.db_file;
    return [runAtoms,boundData,unboundData];
endfunction

global function qbSendAtomsToNMRCSV [ascii_file,runAtoms,boundData,unboundData]
    if isnull ascii_file then
        write ['Error: opt.ascii_file not set prior to calling function\n'];
        return [];
    endif

    local db_file = twrite['{}-DELETE.mdb',fbase ascii_file];
    local names = ['Chain','Residue ID','Sequence','Atom Name','Unbound ppm','Bound ppm'];
    local types = ['char','char','int','char','float','float'];

    local mdbKey = db_Open [db_file,'create'];
    apt db_CreateField [mdbKey, names, types];
    local tmpAtom;
    for tmpAtom in runAtoms loop
       db_Write [mdbKey,0, tag [names,[
           string qb_cLetter aChain tmpAtom,string rName aResidue tmpAtom,
           rUID aResidue tmpAtom,string aName tmpAtom,
           unboundData.(totok tmpAtom),boundData.(totok tmpAtom)]]];
    endloop
    db_Close mdbKey;

    db_ExportASCII [db_file, ascii_file, first db_Fields [db_file], db_Entries [db_file], [delimiter:',', quotes:0, titles:1]];
    fdelete db_file;
endfunction

global function qbGetAtomsInNMRCSV [ascii_file]
    local opt = INCSV_DEFAULTS;
    opt.ascii_file = ascii_file;
    local [runAtoms,boundData,unboundData] = qbNMRCSVtoMDB opt;
    return [runAtoms,boundData,unboundData];
endfunction

function _Atoms;
function qbStoreModel;
function qbSetNMRAtomSelection;

global function qbProcessCSVNMR opt
    opt = tagcat[opt, INCSV_DEFAULTS];
    opt.h5file = [];
    opt.db_file = twrite['{}-DELETE.mdb',fbase opt.ascii_file];

    db_Close db_Open [opt.db_file,'create'];
    opt = qbNMRCSVtoMDB opt;

    local mdbKey = db_Open [opt.db_file,'read'];
    local entryKeys = db_Entries mdbKey;
    local tmpEntryKey, values, runAtoms;

    runAtoms = [];
    oDestroy Chains[];
    oSetCollection ['Receptor',cat oAtoms ReadAuto[opt.targ_file]];
    for tmpEntryKey in entryKeys loop
        runAtoms = uniq cat [runAtoms, FindAtoms db_Read [mdbKey,tmpEntryKey]];
    endloop

    local function writeElementList[outpat,atoms]
        local atmlist = sort aNumber uniq atoms;
        local outfile = twrite ['{}.atms',fbase ftail outpat];
        write ['INFO: Writing {} atom(s) to file {}\n', length atmlist, outfile];
        if not isnull atmlist then
            local fileHDL = fopenw outfile;
            local atmID;
            for atmID in atmlist loop
                fwrite [fileHDL,'    ATOM {}\n',atmID];
            endloop
            fclose fileHDL;
        else
            fdelete outfile;
        endif
    endfunction

    if not isnull opt.h5file then
        local model = qbStoreModel[opt.h5file,fbase opt.targ_file, mol_Extract Chains[]];   // I am assuming that the function returns a model reference that can then be used in subsequent calls.
        qbSetNMRAtomSelection[opt.h5file,model,join[runAtoms,_Atoms '$$receptor']];         // this then stores the selection associated with the model defined in the line above.
    else
        writeElementList [opt.targ_file,join[runAtoms,_Atoms '$$receptor']];
    endif

    runAtoms = [];
    oDestroy Chains[];
    oSetCollection ['Ligand',cat oAtoms ReadAuto[opt.lig_file]];
    for tmpEntryKey in entryKeys loop
        runAtoms = uniq cat [runAtoms, FindAtoms db_Read [mdbKey,tmpEntryKey]];
    endloop
     if not isnull opt.h5file then
        model = qbStoreModel[opt.h5file,fbase opt.lig_file,mol_Extract Chains[]];  // I am assuming that the function returns a model reference that can then be used in subsequent calls.
        qbSetNMRAtomSelection[opt.h5file,model,join[runAtoms,_Atoms '$$ligand']];   // this then stores the selection associated with the model defined in the line above.
    else
        writeElementList [opt.lig_file,join[runAtoms,_Atoms '$$ligand']];
    endif

    runAtoms = [];
    oDestroy Chains[];
    oSetCollection ['Receptor',cat oAtoms ReadAuto[opt.targ_file]];
    oSetCollection ['Ligand',cat oAtoms ReadAuto[opt.lig_file]];
    for tmpEntryKey in entryKeys loop
        runAtoms = uniq cat [runAtoms, FindAtoms db_Read [mdbKey,tmpEntryKey]];
    endloop
     if not isnull opt.h5file then
        model = qbStoreModel[opt.h5file,twrite['{}-{}',fbase opt.targ_file,fbase opt.lig_file],mol_Extract Chains[]];  // I am assuming that the function returns a model reference that can then be used in subsequent calls.
        qbSetNMRAtomSelection[opt.h5file,model,runAtoms];                           // this then stores the selection associated with the model defined in the line above.
    else
        writeElementList [opt.cmplx_file,runAtoms];
    endif
    
    db_Close [mdbKey];
    fdelete opt.db_file;

endfunction

function qbRetrieveNMRAverages;
function qbListModels;

// TODO: I need to edit this function a little so it matches above (or vise versa)
global function qbProcessComplexCSP[targetfile,ligandfile,targeth5,ligandh5,complexh5]

    if not tok_length ftype targetfile then
        write ['ERROR: {} does not exist\n', targetfile];
        return;
    endif
    if not tok_length ftype ligandfile then
        write ['ERROR: {} does not exist\n', ligandfile];
        return;
    endif
    if not tok_length ftype targeth5 then
        write ['ERROR: {} does not exist\n', targeth5];
        return;
    endif
    if not tok_length ftype ligandh5 then
        write ['ERROR: {} does not exist\n', ligandh5];
        return;
    endif
    if not tok_length ftype complexh5 then
        write ['ERROR: {} does not exist\n', complexh5];
        return;
    endif

    oDestroy Chains[];
    local targetChains=ReadAuto[targetfile];
    local ligandChains=ReadAuto[ligandfile];
    local complexChains=Chains[];

    local ligandAtoms = cat cAtoms ligandChains;
    local targetAtoms = cat cAtoms targetChains;
    local complexAtoms = cat cAtoms complexChains;

    local modelTags = cat qbListModels [ligandh5];
    local ligandValues=cat qbRetrieveNMRAverages [ligandh5, modelTags.target];

    modelTags = cat qbListModels [targeth5];
    local targetValues=cat qbRetrieveNMRAverages [targeth5, modelTags.target];

    modelTags = cat qbListModels [complexh5];
    local complexValues=cat qbRetrieveNMRAverages [complexh5, modelTags.target];

    local complexValuesProcessed;
    local targetValuesProcessed;
    local ligandValuesProcessed;

    local reference;
    for reference in complexValues.index loop
        complexValuesProcessed.(totok complexAtoms(reference)) = complexValues.average(indexof [reference,complexValues.index]);
    endloop

    for reference in ligandValues.index loop
        ligandValuesProcessed.(totok ligandAtoms(reference)) = ligandValues.average(indexof [reference,ligandValues.index]);
    endloop

    for reference in targetValues.index loop
        targetValuesProcessed.(totok targetAtoms(reference)) = targetValues.average(indexof [reference,targetValues.index]);
    endloop
    
    write ['length ligandAtoms: {}\n', length ligandAtoms];
    write ['length targetAtoms: {}\n', length targetAtoms];
    write ['length complexAtoms: {}\n', length complexAtoms];

    write ['\nLigand Observed (Atom Discrete):\n'];
    write ['Residue/Atom\tUnbound\t- Bound\t\t= CSP\n'];

    for reference in ligandAtoms loop
        if not isnull ligandValuesProcessed.(totok reference) and not isnull complexValuesProcessed.(totok reference) then
            write ['{} {}:{}:{}\t{}\t- {}\t= {}\n',
                rName aResidue reference,rNumber aResidue reference,aName reference,aPrioCIP reference,ligandValuesProcessed.(totok reference),
                complexValuesProcessed.(totok reference),ligandValuesProcessed.(totok reference)-complexValuesProcessed.(totok reference)];
            endif
    endloop
    
    write ['\nTarget Observed (Atom Discrete):\n'];
    write ['Residue/Atom\tUnbound\t- Bound\t\t= CSP\n'];

    for reference in targetAtoms loop
        if not isnull targetValuesProcessed.(totok reference) and not isnull complexValuesProcessed.(totok reference) then
            write ['{} {}:{}:{}\t{}\t- {}\t= {}\n',
                rName aResidue reference,rNumber aResidue reference,aName reference,aPrioCIP reference,targetValuesProcessed.(totok reference),
                complexValuesProcessed.(totok reference), targetValuesProcessed.(totok reference)-complexValuesProcessed.(totok reference)];
        endif
    endloop
endfunction



#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2012 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

#set title   'QuantumBio NMRScore Interface'
#set class   'QuantumBio'
#set version '2010.01'
#set main 'qb_NMRScore'

function qb_CheckChgTestDivConComplex;
function qb_GetElemIndices;
function qb_GetWhich;
function qb_HamSetsInit;
function qb_PassBackbone;
function qb_RMSD;

/*  NOTE:  If you change the key lists here, you need to update the
 *         option lists and default indices in qbcore.svl and nmrpanel.svl.
           The unused Hamilitonians were masked when the core was created.
 */

const HAM_KEYS =
    [
    'am1',
    'mndo'
    ];

const DIVCON_HAM_KEYS =
    [
    'am1_nmr',
    'mndo_nmr'
    ];

const GEOM_KEYS =
    [
    'NOOPT',
    'HONLYOPT',
    'HETEROOPT',
    'ALLOPT'
    ];
const CSP_KEYS =
    [
    'H_ONLY',
    'C_ONLY',
    'ALL'
    ];

global function qb_NMRScore [recmol, ligmol, perfile, coreopts, appopts, 
        errortests, indices, free, bound]

    local osys, nsys, errmess = "";
    if not MOE_BATCH then
        [osys, nsys] = SystemPush [];
    endif

    //  If there are any errors, return immediately.  Run all error tests
    //  unless forced not to by user.
    qb_HamSetsInit [];
    local [recressets, recok, recchgok, ligressets, ligok, ligchgok, ckmsg]
        = qb_CheckChgTestDivConComplex [recmol, coreopts.recchg, ligmol,
            coreopts.ligchg, errortests, errortests, errortests,
            coreopts.testH, coreopts.testMM,
            'nmr', HAM_KEYS (coreopts.ham)];

    if not alltrue [recok, recchgok, ligok, ligchgok] then
        if not alltrue [recok, ligok] then
            if tok_length ckmsg > 0 then
                errmess = cat [errmess, swrite ['Skipping!\n{}Skipping!',
                    ckmsg]];
            else
                errmess = cat [errmess, 
                    swrite ['Problematic molecule in {}, skipping!\n',
                    qb_GetWhich [not recok, not ligok]]];
            endif
        endif

        if not alltrue [recchgok, ligchgok] then
            errmess =  cat [errmess, 
                swrite ['Problematic charge for {}, skipping!', 
                qb_GetWhich [not recchgok, not ligchgok]]];
        endif

        oDestroy uniq cat oChains cat recressets;
        oDestroy uniq cat oChains cat ligressets;
        if not MOE_BATCH then
            SystemPop [osys, nsys];
        endif

        return [[], errmess];
    endif

    //  If there are any warnings, pass them up.
    if tok_length ckmsg > 0 then
        errmess = string ckmsg;
    endif

    local subdirname, delsubdir = 0;
    if coreopts.task === [] or coreopts.task === 0 then
        subdirname = cd [];
    else
        delsubdir = 1;
        subdirname = twrite ['{}/qb_out{n:}', cd [], coreopts.task];
        local okay = _fmkdir subdirname;
        if okay === -1 then
            errmess = cat [swrite ['Unable to create subdirectory:  {}',
                subdirname], errmess];

            oDestroy uniq cat oChains cat recressets;
            oDestroy uniq cat oChains cat ligressets;
            if not MOE_BATCH then
                SystemPop [osys, nsys];
            endif

            return [[], errmess];
        endif
    endif

    local poseidxs = qb_GetElemIndices [ligmol, appopts.csp];
    if neL [length indices, length poseidxs] then
        errmess = cat [swrite ['Skipping!  Atom indices are inconsistent:\n'
            '    Orig: {v}\n    Pose: {v}\n', indices, poseidxs], errmess];

        oDestroy uniq cat oChains cat recressets;
        oDestroy uniq cat oChains cat ligressets;
        if not MOE_BATCH then
            SystemPop [osys, nsys];
        endif

        return [[], errmess];
    endif
 
    if not alltrue eqE [indices, poseidxs] then
        errmess = cat [swrite ['Skipping!  Atom indices are inconsistent:\n'
            '    Orig: {v}\n    Pose: {v}\n', indices, poseidxs], errmess];

        oDestroy uniq cat oChains cat recressets;
        oDestroy uniq cat oChains cat ligressets;
        if not MOE_BATCH then
            SystemPop [osys, nsys];
        endif

        return [[], errmess];
    endif
 
    //  exe_open child process inherits parent's environment.
    local process_key = exe_open ['moedivconnmr', subdirname, [], 1];
    local process_keys = [process_key];
    local status = exe_status process_keys;

    local prios = exe_getpriority process_keys;
    exe_setpriority [process_keys, prios];

    local stdin = exe_stdin process_keys;
    local stdout = exe_stdout process_keys;
    local stderr = exe_stderr process_keys;

    //  Pass the options and the two backbones to QuantumBio's DivCon NMRScore
    //
    //  SplitReceptor ensures that there is only one chain per molecule
    //  in the receptor collection.

    local success = 0;

    fwrite [stdin, '{c:}\n', perfile];
    fwrite [stdin, '{c:}\n', recmol(1)(MOL_NAME)];
    fwrite [stdin, '{c:}\n', ligmol(1)(MOL_NAME)];
    fwrite [stdin, '{c:}\n', DIVCON_HAM_KEYS(coreopts.ham)];
    fwrite [stdin, '{c:}\n', select ['NOSTANDARD', 'STANDARD',
        coreopts.scaling === 1]];
    fwrite [stdin, '{c:}\n', GEOM_KEYS(appopts.opt)];
    fwrite [stdin, '{c:}\n', select ['GUESS', 'NOGUESS', appopts.guess]];
    fwrite [stdin, '{c:}\n', CSP_KEYS(appopts.csp)];

    fwrite [stdin, '{n:}\n', coreopts.recchg];
    fwrite [stdin, '{n:}\n', coreopts.ligchg];
    // we already did the work of figuring out which is receptor and which is ligand.
    // @todo: the divcon structure testing code changes the ressets. It is unclear if this was significant. Need to do some testing, but it seems redundent.
    recressets = mol_Create recmol;
    ligressets = mol_Create ligmol; 
    qb_PassBackbone [stdout, stdin, recressets];
    qb_PassBackbone [stdout, stdin, ligressets];

    oDestroy uniq cat oChains recressets;
    oDestroy uniq cat oChains ligressets;
    if not MOE_BATCH then
        SystemPop [osys, nsys];
    endif

    //    results has the format:  [nmrscore, [V1, V2, ... , Vn]]
    local results = [], return_statement;
    local sleep_time = 0.1;
    local divconerrmess = "";
    local status_length=0;
    while exe_status process_key loop
        fwrite [stdin, '{c:}\n', 'status'];
        [[return_statement]] = fread [stdout, '{c:*}'];

        if return_statement === "noupdate" then
        elseif return_statement === "running" then
	    [[status_length]] = fread [stdout, '{n:}'];
            for status_length loop
                [[return_statement]] = fread [stdout, '{c:*}'];
                print ['running', return_statement];
            endloop
        elseif return_statement === "success" then
            local atomindices = [], atomvalues = [];
            local [[numvals]] = fread [stdout, '{n:}'];
            for numvals loop
                local [[cspidx]] = fread [stdout, '{n:}'];
                local [[cspval]] = fread [stdout, '{n:}'];
                atomindices = append [atomindices, cspidx];
                atomvalues = append [atomvalues, cspval];
            endloop

            local sidx = x_sort atomindices;
            atomindices = atomindices [sidx];
            atomvalues = atomvalues [sidx];
            if neL [length indices, length atomindices] then
                errmess = cat [swrite ['Error! Atom indices are inconsistent:\n'
                    '    Orig: {v}\n    DivCon: {v}\n', indices, atomindices],
                    errmess];
                return [[], errmess];
            endif

            if not alltrue eqE [indices, atomindices] then
                errmess = cat [swrite ['Error! Atom indices are inconsistent:\n'
                    '    Orig: {v}\n    DivCon: {v}\n', indices, atomindices],
                    errmess];
                return [[], errmess];
            endif

            local score = qb_RMSD [atomvalues, free - bound];
            results = [score, atomvalues];
            success = 1;
            fwrite [stdin, '{c:}\n', 'Ok'];

        elseif return_statement === "error" then
            [[return_statement]] = fread [stdout, '{c:*}'];
            if neL [return_statement, "DivCon done."] then
                divconerrmess = cat [divconerrmess, return_statement];
                [[return_statement]] = fread [stdout, '{c:*}'];
            endif
            while neL [return_statement, "DivCon done."] loop
                divconerrmess = cat [divconerrmess, "\n", return_statement];
                [[return_statement]] = fread [stdout, '{c:*}'];
            endloop;
            fwrite [stdin, '{c:}\n', 'Ok'];
        endif
        if not MOE_BATCH then
            sleep sleep_time;
        endif
    endloop

    //  Look for error messages from stderr.
    local [[newerror]] = fread [stderr, '{c:*}'];
    while length newerror > 0 loop
        // Hack!  Skip openmpi ignored error messages //DEBUG
        local errstrs = wordsplit [newerror, "()"];
        local errtoks = app token errstrs;
        local idx = indexof ['ignored', errtoks];
        if idx === 0 then
            write ['MOEDivCon: {}\n', newerror];
            errmess = cat [newerror, errmess];
        endif

        [[newerror]] = fread [stderr, '{c:*}'];
    endloop

    exe_kill  [process_key, 0];
    exe_kill  process_key;
    exe_close process_keys;

    //  Clean up working directory.
    if success === 1 then
        local templist = flist [subdirname, 'divcon.log'];
        if delsubdir then
            templist = cat [templist, subdirname];
        endif

        local delerr = app _fdelete templist;
        if anytrue delerr then
            local errfiles = templist | neE [delerr, 0];
            errmess = cat [swrite ['Unable to delete files: {v}',
                errfiles], errmess];
        endif
    endif

    if success === 1 then
        return [results, errmess];
    else
        if isnull divconerrmess then divconerrmess = "Unknown error!"; endif
        if isnull errmess then
            errmess = cat [divconerrmess,
                swrite ['\nLog file:  {}:{}/divcon.log',
                getenv 'HOSTNAME', subdirname]];
        else
            errmess = cat [divconerrmess,
                swrite ['\nLog file:  {}:{}/divcon.log\n',
                getenv 'HOSTNAME', subdirname], errmess];
        endif
        return [[], errmess];
    endif
endfunction

// QuantumBio h5 Java/SVL interface functions
function qbRetrieveNMRAverages;
function qbListModels;

global function qbProcessComplexCSP[targetfile,ligandfile,targeth5,ligandh5,complexh5]

    if not tok_length ftype targetfile then
        write ['ERROR: {} does not exist\n', targetfile];
        return;
    endif
    if not tok_length ftype ligandfile then
        write ['ERROR: {} does not exist\n', ligandfile];
        return;
    endif
    if not tok_length ftype targeth5 then
        write ['ERROR: {} does not exist\n', targeth5];
        return;
    endif
    if not tok_length ftype ligandh5 then
        write ['ERROR: {} does not exist\n', ligandh5];
        return;
    endif
    if not tok_length ftype complexh5 then
        write ['ERROR: {} does not exist\n', complexh5];
        return;
    endif

    oDestroy Chains[];
    local targetChains=ReadAuto[targetfile];
    local ligandChains=ReadAuto[ligandfile];
    local complexChains=Chains[];

    local ligandAtoms = cat cAtoms ligandChains;
    local targetAtoms = cat cAtoms targetChains;
    local complexAtoms = cat cAtoms complexChains;

    local modelTags = cat qbListModels [ligandh5];
    local ligandValues=cat qbRetrieveNMRAverages [ligandh5, modelTags.target];

    modelTags = cat qbListModels [targeth5];
    local targetValues=cat qbRetrieveNMRAverages [targeth5, modelTags.target];

    modelTags = cat qbListModels [complexh5];
    local complexValues=cat qbRetrieveNMRAverages [complexh5, modelTags.target];

    local complexValuesProcessed;
    local targetValuesProcessed;
    local ligandValuesProcessed;

    local reference;
    for reference in complexValues.index loop
        complexValuesProcessed.(totok complexAtoms(reference)) = complexValues.average(indexof [reference,complexValues.index]);
    endloop

    for reference in ligandValues.index loop
        ligandValuesProcessed.(totok ligandAtoms(reference)) = ligandValues.average(indexof [reference,ligandValues.index]);
    endloop

    for reference in targetValues.index loop
        targetValuesProcessed.(totok targetAtoms(reference)) = targetValues.average(indexof [reference,targetValues.index]);
    endloop
    
    write ['length ligandAtoms: {}\n', length ligandAtoms];
    write ['length targetAtoms: {}\n', length targetAtoms];
    write ['length complexAtoms: {}\n', length complexAtoms];

    write ['\nLigand Observed (Atom Discrete):\n'];
    write ['Residue/Atom\tUnbound\t- Bound\t\t= CSP\n'];

    for reference in ligandAtoms loop
        if not isnull ligandValuesProcessed.(totok reference) and not isnull complexValuesProcessed.(totok reference) then
            write ['{} {}:{}:{}\t{}\t- {}\t= {}\n',
                rName aResidue reference,rNumber aResidue reference,aName reference,aPrioCIP reference,ligandValuesProcessed.(totok reference),
                complexValuesProcessed.(totok reference),ligandValuesProcessed.(totok reference)-complexValuesProcessed.(totok reference)];
            endif
    endloop
    
    write ['\nTarget Observed (Atom Discrete):\n'];
    write ['Residue/Atom\tUnbound\t- Bound\t\t= CSP\n'];

    for reference in targetAtoms loop
        if not isnull targetValuesProcessed.(totok reference) and not isnull complexValuesProcessed.(totok reference) then
            write ['{} {}:{}:{}\t{}\t- {}\t= {}\n',
                rName aResidue reference,rNumber aResidue reference,aName reference,aPrioCIP reference,targetValuesProcessed.(totok reference),
                complexValuesProcessed.(totok reference), targetValuesProcessed.(totok reference)-complexValuesProcessed.(totok reference)];
        endif
    endloop
endfunction

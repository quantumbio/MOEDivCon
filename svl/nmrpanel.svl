#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2009 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

//    nmrpanel.svl    User-interface entrypoint to NMRScore calculations

#set title   'QuantumBio NMRScore Panel'
#set class   'QuantumBio'
#set version '2009.01'
#set main    'qb_NMRScoreSetupPanel'


function qb_AtomsToMols;

function qb_CopyPoseDB;
function qb_CopyRecPoseDB;
function qb_CutReceptor;
function qb_GetDefaultsNMRScore;
function qb_GetEnv;
function qb_GetPoseField;
function qb_GetTagsNMRScore;
function qb_SaveNMRScore;
function qb_SaveStatus;
function qb_SaveEnv;
function qb_SetStatusField;
function qb_SetNMRScoreFields;
function qb_LoadNMRScoreDB;

function qb_NMRScore;
function qb_NMRScoreBatch;


/*  NOTE:  If you change the Option lists here, you need to update the
 *         Defaults in qbutil.svl and the Keys in nmrinterface.svl.
 */

const RUN_MODES =
    [
    'One-to-One',
    'One-to-Many',
    'Many-to-Many'
    ];

const GEOM_OPTS =
    [
    'none',
    'H only',
    'H and hetero',
    'all atoms'
    ];

//  Local Functions

/****************************************************************************
 *                          SetUpRun
 *
 *  Create the output database for storing NMRScore results and ensure that
 *  the required fields are present.  Store the molecules and run options 
 *  in the DB environment.
 *
 *  Note:  it is assumed that this function is called from a child process
 *  and will exit on an error.
 *
 ****************************************************************************/
local function SetUpRun [complex, opts]

    local nmrkey = db_Open [opts.scoredb, 'create'];
    qb_SetNMRScoreFields [nmrkey, opts.mode === 'Many-to-Many'];

    if opts.mode === 'One-to-One' or opts.mode === 'One-to-Many' then
        local [recset, ligand, errmess] = qb_AtomsToMols [];
        if recset === [] or ligand === [] then
            Warning [errmess];
            exit [];
        endif

        qb_SaveEnv [nmrkey, recset, ligand, opts, complex, 'nmrscore'];
    else
        qb_SaveEnv [nmrkey, [], [], opts, complex, 'nmrscore'];
    endif

    if opts.mode === 'One-to-One' then
        local posedata = tag [qb_GetPoseField [], [ligand]];
        db_Write [nmrkey, 0, posedata];

    else
        local posekey = db_Open [opts.posedb, 'read'];
        if nmrkey === posekey then
            Warning twrite ['{} and {}\n are the same database', 
                opts.scoredb, opts.posedb];
            exit [];
        endif

        if opts.mode === 'One-to-Many' then
            qb_CopyPoseDB [nmrkey, posekey];
        else
            local reckey = db_Open [opts.recdb, 'read'];
            if nmrkey === reckey then
                Warning twrite ['{} and {}\n are the same database', 
                    opts.scoredb, opts.recdb];
                exit [];
            endif

            qb_CopyRecPoseDB [nmrkey, reckey, posekey];
            db_Close reckey;
        endif

        db_Close posekey;
    endif

    qb_SetStatusField [nmrkey];

    return nmrkey;
endfunction

//  Global Functions

/****************************************************************************
 *
 *                          qb_NMRScoreSetupPanel
 *
 ****************************************************************************/
global function qb_NMRScoreSetupPanel []

    if MOE_BATCH then return; endif
    if WindowShow ['NMRScorePanel', 1] then return; endif

    local wkey = WindowCreate
        [
        name: 'panel', 
        title: 'NMRScore',
        windowName: 'NMRScorePanel',
        text: ['Run', 'Save', 'Load', 'Cancel'],
        onTrigger: ['validate', 'validate', 'return', 'return'],
        bubbleHelp: ['Execute NMRScore from MOE Window.',
            'Save run parameters in database\n'
            'for later execution on cluster.', 
            'Load run parameters from a NMRScore database.', 
            ''],

        Hbox :
            [
            extendH: 1,
            FSBText :
                [
                name: 'scoredb', len: 40, extendH: 1, title: 'Output DB:',
                mode: 'saveAs', allowBlank: 0,
                bubbleHelp:
                    'The name of the output database that will hold\n'
                    'the run paramaters and scoring results.'
                ],
            Button : [ name: 'browse_scoredb', text: 'Browse...' ]
            ],

        Separator : [flushLeft:1, extendH:1, margin:1],

        Hbox :
            [
            extendH: 1,
            Checkbox :
                [
                name: 'cut', text: 'Cut Receptor?',
                onTrigger: 'return',
                bubbleHelp:
                    'Cut the receptor at the specified radius.'
                ],
            Separator : 
                [
                vertical:0, shadow:'noline', extendH: 0, margin:1
                ],
            Text :
                [
                name: 'radius', len: 7, extendH: 1, title: 'Radius:',
                type: 'real', allowBlank: 0,
                shortcut: ['2.5', '3.0', '3.5', '4.0', '4.5', '5.0'],
                bubbleHelp: 'Cut radius in angstrums.'
                ],
            Separator : 
                [
                vertical:0, shadow:'noline', extendH: 0, margin:1
                ],
            Button :
                [
                name: 'showcut', text: 'Show Cut',
                bubbleHelp: 'Perform cut and show in MOE Window.'
                ],
            Button :
                [
                name: 'original', text: 'Original',
                bubbleHelp: 'Revert back to original receptor/ligand complex.'
                ]
            ],

        Hbox :
            [
            Button :
                [
                name: 'experimental', text: 'Enter/Edit Experimental Data', 
                extendH: 1,
                bubbleHelp:
                    'Open dialog to enter the data\n'
                    'for the free and bound ligand.'
               ]
            ],

        Separator : [flushLeft:1, extendH:1, margin:1],

        Hbox :
            [
            extendH: 1,
            Text :
                [
                name: 'workdir', len: 40, extendH: 1, title: 'Working Dir:',
                type: 'char', allowBlank: 0,
                shortcut: ['/tmp', '.', '~', '~/tmp', '/scratch'],
                bubbleHelp:
                    'The name of the working directory for storing\n'
                    'QB Divcon intermediate calculations.  The\n'
                    'absolute path to the specified directory will\n'
                    'be stored and used at execution time.'
                ],
            Separator : 
                [
                vertical:0, shadow:'noline', extendH: 0, margin:1
                ],
            Checkbox :
                [
                name: 'cwd', text: 'CWD', onTrigger: 'return', 
                bubbleHelp:
                    'Set the current working directory using\n'
                    'the run time environment variable $PWD.'
                ]
            ],

        Hbox :
            [
            extendH: 1,
            Option :
                [
                name: 'opt', title: 'Geometry Optimization:', 
                text: GEOM_OPTS, type: 'int', minWidth: 11, extendH: 1,
                bubbleHelp:
                'Geometry optimization will often improve chances\n'
                'of convergence:\n'
                ' * none:  no optimization step is performed.\n'
                ' * H only:  all proton positions in the complex are\n'
                '     quantum mechanically optimized.  Heavy atoms\n'
                '     remain unchanged.\n'
                ' * H and hetero:  all non-C atom positions in the complex\n'
                '     are quantum mechanically optimized. NOTE: the ligand\n'
                '     pose should be considered a new pose.\n'
                ' * All atoms:  all atom positions in the complex are\n'
                '     quantum mechanically optimized. NOTE:  the ligand\n'
                '     pose should be considered a new pose.'
                ],
            Separator : 
                [
                vertical:0, shadow:'noline', extendH: 1, margin:1
                ],
            Checkbox :
                [
                name: 'guess', text: 'Guess',
                bubbleHelp:
                    'Perform Single Point calculation to\n'
                    'initialize density matrix.\n'
                    'Warning: may not always\n'
                    'improve convergence.'
                ]
            ],

        Separator : [flushLeft:1, extendH:1, margin:1],

        Hbox :
            [
            Radio :
                [
                name: 'mode', text: RUN_MODES, columns: 3, minWidth: 12, 
                extendH: 1, onTrigger: 'return', title: 'Mapping Mode:',
                type: 'char',
                bubbleHelp:
                    'The mapping mode of receptors to ligand/poses:\n'
                    '  One ligand docked into one receptor.\n'
                    '  Many ligand poses docked into the same receptor.\n'
                    '  Many ligand poses, each docked into its own receptor.'
                ]
            ],

        Hbox :
            [
            name: 'posebox', extendH: 1,
            FSBText :
                [
                name: 'posedb', len: 40, extendH: 1, title: 'Ligand/Pose DB:',
                mode: 'open', allowBlank: 0,
                bubbleHelp:
                    'The name of the input database that holds\n'
                    'the ligand poses (and possibly scores).'
                ],
            Button : [ name: 'browse_posedb', text: 'Browse...' ]
            ],

        Hbox :
            [
            name: 'recbox', extendH: 1,
            FSBText :
                [
                name: 'recdb', len: 40, extendH: 1, title: 'Receptor DB:',
                mode: 'open', allowBlank: 0,
                bubbleHelp:
                    'The name of the input database that holds\n'
                    'the receptors.'
                ],
            Button : [ name: 'browse_recdb', text: 'Browse...' ]
            ],

        Separator : [flushLeft:1, extendH:1, margin:1]
        ];

    // ---------------------- embedded functions begin ----------------------

    function RunCalc [dbkey]
        local msgkey = Message [0, 'NMRScore is running ...'];
        sleep -1;    // Allow parent to close input window.

        local [recset, ligand, options] = qb_GetEnv [dbkey];
        local [results, errmess] = qb_NMRScore [recset, ligand, options];

        local rowkey = first db_Entries [dbkey];
        if results === [] then
            if errmess === [] or errmess === '' then
                qb_SaveStatus [dbkey, rowkey, "Error:  Unknown error!"];
                write ['NMRScore Error:  Unknown error!\n'];
            else
                qb_SaveStatus [dbkey, rowkey, 
                    swrite ['Error:  {}', errmess]];
                write ['NMRScore Error:  {}\n', errmess];
            endif
        else
            print results;
            local atomindices = app first results;
            local atomnames = get [ligand(4)(MOL_ATOM_NAME), atomindices];
write ['Atom names:  {v}\n', atomnames]; //DEBUG
            local cspvalues = app second results;
            qb_SetNMRScoreFields [dbkey, 0, atomnames];
            qb_SaveNMRScore [dbkey, rowkey, 9.99, tag [atomnames, cspvalues]];
            qb_SaveStatus [dbkey, rowkey, "Success"];
        endif

        Message [msgkey, 'NMRScore is done.'];

        return;
    endfunction

    // ----------------------- embedded functions end -----------------------

    local btid, browsetasks = [];
    local prio;
    local options = []; 
    local nmrkey = 0;
    local defs = qb_GetDefaultsNMRScore [];
    local windefs = droplast defs;
    local prevwd = defs.workdir;
    local complexmol = mol_Extract Chains [];

    WindowSetData [wkey, windefs];
    WindowSetAttr [wkey, [panel: [sensitive: [1,1,1,1]],
        radius: [sensitive: 0, allowBlank: 1],
        showcut: [sensitive: 0], original: [sensitive: 0],
        guess: [sensitive: 1], opt: [sensitive:1], mode: [sensitive: 1],
        workdir: [sensitive: 1, allowBlank: 0],
        posebox: [sensitive: 0], posedb: [allowBlank: 1],
        recbox: [sensitive: 0], recdb: [allowBlank: 1]]];
    WindowShow [wkey, 1];

    loop
        local [vals, trig] = WindowWait wkey;
        if trig === 'mode' then
            if vals.mode === 'One-to-One' then
                WindowSetAttr [wkey, [posebox: [sensitive: 0],
                    posedb: [allowBlank: 1], recbox: [sensitive: 0], 
                    recdb: [allowBlank: 1], panel: [sensitive: [1,1,1,1]]]];
            elseif vals.mode === 'One-to-Many' then
                WindowSetAttr [wkey, [posebox: [sensitive: 1],
                    posedb: [allowBlank: 0],recbox: [sensitive: 0], 
                    recdb: [allowBlank: 1], panel: [sensitive: [0,1,1,1]]]];
            elseif vals.mode === 'Many-to-Many' then
                WindowSetAttr [wkey, [posebox: [sensitive: 1],
                    posedb: [allowBlank: 0], recbox: [sensitive: 1], 
                    recdb: [allowBlank: 0], panel: [sensitive: [0,1,1,1]]]];
            endif

        elseif trig === 'cut' then
            if vals.cut === 0 then
                WindowSetAttr [wkey, [radius: [sensitive: 0, allowBlank: 1],
                    showcut: [sensitive: 0]]];
            else
                WindowSetAttr [wkey, [radius: [sensitive: 1, allowBlank: 0],
                    showcut: [sensitive: 1]]];
            endif

        elseif trig === 'showcut' then
            if second task_fork [master: 'parent'] === 'child' then
                prio = task_prio 0;

                local [cutrecmols, cutligmol, errmess] = qb_CutReceptor [0, 
                    vals.radius];
                if cutrecmols === [] or cutligmol === [] then
                    Warning errmess;
                    exit [];
                endif
                WindowSetAttr [wkey, [showcut: [sensitive: 0],
                    original: [sensitive: 1]]];
	            Close [force:1];
                local cutlig = mol_Create cutligmol;
                local cutligatoms = cat oAtoms cutlig;
                oSetCollection ['QB_LIGAND', cutligatoms];
                aSetNucleusLook [cutligatoms, 'small-sphere'];
                aSetBondLook [cutligatoms, 'cylinder'];
                app mol_Create cutrecmols;
	            View [];
                exit [];
            endif

        elseif trig === 'original' then
            if second task_fork [master: 'parent'] === 'child' then
                prio = task_prio 0;

                if complexmol === [] then
                    Warning 'No original complex.';
                    exit [];
                endif
                WindowSetAttr [wkey, [showcut: [sensitive: 1],
                    original: [sensitive: 0]]];
	            Close [force:1];
                mol_Create complexmol;
	            View [];
                exit [];
            endif

        elseif trig === 'experimental' then
            if second task_fork [master: 'parent'] === 'child' then

                if complexmol === [] then
                    Warning 'No original complex.';
                    exit [];
                endif
                Warning 'Pop up experimental window.';
                exit [];
            endif

        elseif trig === 'cwd' then
            if vals.cwd === 1 then
                prevwd = vals.workdir;
                WindowSetAttr [wkey, [workdir: [sensitive: 0, allowBlank: 1]]];
                WindowSetData [wkey, [workdir: '']];
            else
                WindowSetAttr [wkey, [workdir: [sensitive: 1, allowBlank: 0]]];
                WindowSetData [wkey, [workdir: prevwd]];
            endif

        elseif trig === 'browse_scoredb' then
            btid = run ['fbrowse.svl', [trig, wkey, 'Select NMRScore DB File', 
                'none', '*.mdb', 'scoredb']];
        if btid then browsetasks = append [browsetasks, btid]; endif

        elseif trig === 'browse_posedb' then
            btid = run ['fbrowse.svl', [trig, wkey, 'Select Pose DB File', 
                'open', '*.mdb', 'posedb']];
        if btid then browsetasks = append [browsetasks, btid]; endif

        elseif trig === 'browse_recdb' then
            btid = run ['fbrowse.svl', [trig, wkey, 'Select Receptor DB File', 
                'open', '*.mdb', 'recdb']];
        if btid then browsetasks = append [browsetasks, btid]; endif

       elseif trig === 'panel' then
            if vals.panel === 'Cancel' then 
                break;

            elseif vals.panel === 'Load' then 
                if second task_fork [master: 'parent'] === 'child' then
                    task_prio 0;
                    local dbpath = FilePrompt [title: 'Input Database', 
                        filter: '*.mdb', allowEmptyList: 0];
                    if not isnull dbpath then
                        write ['Load database: {}\n', dbpath];
                        local [ldcutrec, ldlig, ldopts, ldcomplex, ldmess] = 
                            qb_LoadNMRScoreDB [dbpath];
                        if ldcutrec === [] or ldlig === [] or ldopts === []
                                or ldcomplex === [] then
                            Warning ldmess;
                            exit [];
                        endif

                        complexmol = ldcomplex;
                        /*  Drop the task tagged value.  */
                        ldopts = droplast ldopts;
                        WindowSetData [wkey, ldopts];

    	                Close [force:1];
                        local ldligmol = mol_Create ldlig;
                        local ldligatoms = cat oAtoms ldligmol;
                        oSetCollection ['QB_LIGAND', ldligatoms];
                        aSetNucleusLook [ldligatoms, 'small-sphere'];
                        aSetBondLook [ldligatoms, 'cylinder'];
                        app mol_Create ldcutrec;
    	                View [];
                    endif

                exit [];
            endif

            elseif vals.panel === 'Run' then
                if second task_fork [prio:3, idle:0] === 'child' then
                    options = tag [qb_GetTagsNMRScore [], [vals.mode, vals.cwd,
                      fabsname vals.workdir, fabsname vals.scoredb, [], [],
                      vals.guess, vals.opt, vals.cut, vals.radius, []]];

                    nmrkey = SetUpRun [complexmol, options];
                    RunCalc [nmrkey];
                    dbv_Open db_Filename nmrkey;
                    db_Close nmrkey;
                    exit [];
                else
                    break;
                endif

            elseif vals.panel === 'Save' then
                if second task_fork [] === 'child' then
                    vals.posedb = select ['', fabsname vals.posedb, 
                        vals.posedb === ''];
                    vals.recdb = select ['', fabsname vals.recdb, 
                        vals.recdb === ''];
                    options = tag [qb_GetTagsNMRScore [], [vals.mode, vals.cwd,
                        vals.workdir, fabsname vals.scoredb,
                        vals.posedb, vals.recdb,
                        vals.guess, vals.opt, vals.cut, vals.radius, []]];
                    nmrkey = SetUpRun [complexmol, options];
                    dbv_Open db_Filename nmrkey;
                    db_Close nmrkey;
                    exit [];
                else
                    break;
                endif
            endif
        endif
    endloop

    task_kill browsetasks;
    WindowDestroy wkey;

endfunction

#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

//    qbheatmap.svl    Interactive Heap Map

#set title   'QuantumBio Heat Map'
#set class   'QuantumBio'
#set version '2010.01'

const NEG_RANGE_MAX = 896;
const POS_RANGE_MAX = 704;
const G_FACTOR = 256;
const R_FACTOR = 256 * 256;

const PAGE_HT = 750;
const SCALE_PAD = 10;
const SCALE_WD = 10;
const TICK_LEN = 5;

const HEADER = 
    [
    name: 'panel', 
    title: 'QB Heat Map',
    windowName: 'QB Heat Map',
    text: ['Close'],
    onTrigger: ['return']
    ];

const PANEL =
    [
    Hbox :
        [
        extendH: 1,
        Vbox :
            [
            Button :
                [
                name: 'mapbuttom', shadow: 'none',
                type: 'int', grPosition: 'right',
                uniformRows: 1, margin: 0 //uniformCols: 1
                ]
            ],
        Separator : 
            [
            vertical:0, shadow:'noline', extendH: 0, margin:1
            ],
        Label :
            [
            name: 'colorscale', centerV: 1
            ]
        ]
    ];


/****************************************************************************
 *
 *                          DrawCell
 *
 *  Returns a graphics object with the appropriate background color
 *  representing its value.
 *
 *  NOTE:  calling function should call gr_destroy on key after using it.
 *
 ****************************************************************************/
local function DrawCell [colors, width, height, minval, maxval, value]

    local cidx;
    if value <= minval then
        cidx = 1;
    elseif value >= maxval then
        cidx = length colors;
    else
        local step = (maxval - minval) / (length colors);
        cidx = ceil ((value - minval) / step);
    endif

    local key = gr_create [size: [width, height], units: 'pt'];
    gr_box [key, [0, [0, 0], [width , height],
        colors (cidx), 1, colors (cidx)]];

    return key;
endfunction

/****************************************************************************
 *
 *                          DrawColorScale
 *
 *  Returns a scale of num colors starting with the color that
 *  represent minval (blue or white) and ending with the color that
 *  represents maxval (white or red).
 *
 *  NOTE:  calling function should call gr_destroy on key after using it.
 *
 ****************************************************************************/
local function DrawColorScale [colors, cell_w, cell_h, minval, maxval, ticks]

    local width = cell_w + 40;  // cell + ticks
    local height = cell_h * length colors;
    local key = gr_create [title: 'colorscale',
        size: [width, height  + 2 * SCALE_PAD], units: 'pt'];
    local ith;
    for ith = 1, length colors, 1 loop
        gr_box [key, [0, [0, (ith - 1) * cell_h + SCALE_PAD],
            [cell_w , ith * cell_h  + SCALE_PAD],
            colors (ith), 1, colors (ith)]];
    endloop
    local step = height / (ticks - 1);
    local delta = (maxval - minval) / (ticks - 1);
    for ith = 0, ticks, 1 loop
        gr_line [key, [0, [cell_w, ith * step  + SCALE_PAD],
            [cell_w + TICK_LEN, ith * step + SCALE_PAD],
            icolor'black', 1]];
        gr_text [key, [0, [cell_w + TICK_LEN * 1.5, ith * step + SCALE_PAD],
            twrite ['{n:.2f}', minval + (ith * delta)], 'sys', icolor'black',
            10, [position: 'middleleft']]];
    endloop

    return [key, width, height];

endfunction

function GetNegColors;
function GetPosColors;

/****************************************************************************
 *
 *                          GetColors
 *
 *  Returns a scale of num colors starting with the color that
 *  represent minval (blue or white) and ending with the color that
 *  represents maxval (white or red).
 *
 ****************************************************************************/
local function GetColors [minval, maxval, num]

    local colors = [];

    if minval === 0 and maxval > 0 and num > 0 then
        colors = GetPosColors [maxval, num - 1];
    elseif maxval === 0 and minval < 0 and num > 0 then
        colors = GetNegColors [minval, num - 1];
    elseif minval < 0 and maxval > 0 and num > 0 then
        local mid = max [1, floor ((num - 1) * (minval / (minval - maxval)))];
        colors = GetNegColors [minval, mid];
        colors = cat [colors, dropfirst  GetPosColors [maxval, num - mid - 1]];
    else
        return [[], twrite ['Cannot generate colors with minimum {},\n'
            'maximum {}, and number {}\n', minval, maxval, num]];
    endif

    return [colors, ''];

endfunction

/****************************************************************************
 *
 *                          GetNegColors
 *
 *  Return num number of scaled colors, plus white, ordered from blue to white.
 *
 ****************************************************************************/
local function GetNegColors [minval, num]

    local colors = [], newcolor;
    local r, g, b;
//    local bigdelta = floor ((255 * 5) / num);
//    local delta = floor ((255 * 5) / (num * 2));
    local delta = floor (NEG_RANGE_MAX / num);
write ['Min {}  Num {}  Delta {}\n', minval, num, delta];//DEBUG
    //  Blue
    r = 0; g = 0; b = 127;
    while b < 256 loop
write ['B: {}\n', b];//DEBUG
        newcolor = r * R_FACTOR + g * G_FACTOR + b;
        colors = append [colors, newcolor];
        b = b + delta;
    endloop

    //  Turquoise
    g = b - 256; r = 0; b = 255;
    while g < 256 loop
write ['G: {}\n', g];//DEBUG
        newcolor = r * R_FACTOR + g * G_FACTOR + b;
        colors = append [colors, newcolor];
        g = g + delta;
    endloop

    //  Aquamarine
    b = 256 - (g - 256); r = 0; g = 255;
    while b >= 0 loop
write ['B: {}\n', b];//DEBUG
        newcolor = r * R_FACTOR + g * G_FACTOR + b;
        colors = append [colors, newcolor];
        b = b - delta;
    endloop

    //  Green
    r = -b; g = 255; b = 0;
    while r < 256 loop
write ['R: {}\n', r];//DEBUG
        newcolor = r * R_FACTOR + g * G_FACTOR + b;
        colors = append [colors, newcolor];
        r = r + delta;
    endloop

write ['Neg: {}\n', length colors];//DEBUG
    if length colors > num then
        colors = drop [colors, num - length colors];
    endif

    //  White
    r = 255; g = 255; b = 255;
    newcolor = r * R_FACTOR + g * G_FACTOR + b;
    colors = append [colors, newcolor];

    return colors;

endfunction

/****************************************************************************
 *
 *                          GetPosColors
 *
 *  Return num number of scaled colors, plus white, ordered from white to red.
 *
 ****************************************************************************/
local function GetPosColors [maxval, num]

    local colors = [], newcolor;
    local r, g, b;
//    local delta = floor ((255 * 5) / (num * 2));
    local delta = floor (POS_RANGE_MAX / num);
write ['Max {}  Num {}  Delta {}\n', maxval, num, delta];//DEBUG

    //  Since we prefer darker colors, build red to white and then reverse.
    //  Maroon
    r = 95; g = 0; b = 95;
    while r < 128 loop
write ['RB: {}\n', r];//DEBUG
        newcolor = r * R_FACTOR + g * G_FACTOR + b;
        colors = append [colors, newcolor];
        r = r + delta;
        b = b + delta;
    endloop

    //  Red
     r = 127 + r - 128; g = 0; b = 0;
    while r < 256 loop
write ['R: {}\n', r];//DEBUG
        newcolor = r * R_FACTOR + g * G_FACTOR + b;
        colors = append [colors, newcolor];
        r = r + delta;
    endloop
    
    //  Orange
    g = r - 256; r = 255; b = 0;
    while g < 256 loop
write ['G: {}\n', g];//DEBUG
        newcolor = r * R_FACTOR + g * G_FACTOR + b;
        colors = append [colors, newcolor];
        g = g + delta;
    endloop

    //  Yellow
     b = g - 256; r = 255; g = 255;
    while b < 256 loop
write ['B: {}\n', b];//DEBUG
        newcolor = r * R_FACTOR + g * G_FACTOR + b;
        colors = append [colors, newcolor];
        b = b + delta;
    endloop

write ['Pos: {}\n', length colors];//DEBUG
    if length colors > num then
        colors = drop [colors, num - length colors];
    endif

    //  White
    r = 255; g = 255; b = 255;
    newcolor = r * R_FACTOR + g * G_FACTOR + b;
    colors = append [colors, newcolor];

    return reverse colors;

endfunction

/****************************************************************************
 *
 *                          qb_HeatMapSetupPanel
 *
 ****************************************************************************/
global function qb_HeatMapSetupPanel [minval, maxval, num, ticks]
write ['Min: {}  Max: {}  Num: {}  Ticks: {}\n', minval, maxval, num, ticks];//DEBUG
    if MOE_BATCH then return; endif
    if WindowShow ['QB Heat Map', 1] then return; endif

    local [colors, errmess] = GetColors [minval, maxval, num];
    if colors === [] then
        Warning errmess;
        return;
    endif

write ['Colors: {v}\n', colors];//DEBUG

    local cell_h = floor (PAGE_HT / num);
    local cell_w = SCALE_WD;

write ['W: {}  H: {}\n', cell_w, cell_h];//DEBUG

    local [scalekey, s_w, s_h] = DrawColorScale [colors, cell_w, cell_h, 
        minval, maxval, ticks];

    local ith, bnames = [], bcolors = [];
    randseed 101;
    for ith = 1, 1240, 1 loop
        if mod [ith, 31] === 1 then
            bnames = append [bnames, twrite ['lig{}', ith]];
            bcolors = append [bcolors, 0];
        else
            bnames = append [bnames, ''];
            bcolors = append [bcolors, DrawCell [colors, 20, 10, 
                minval, maxval, randN 1]];

        endif
    endloop

    local panel = tagpoke [PANEL, ['Hbox', 'Vbox', 'Button', 'graphics'],
        bcolors];
    panel = tagpoke [panel, ['Hbox', 'Vbox', 'Button', 'text'], bnames];
    panel = tagpoke [panel, ['Hbox', 'Vbox', 'Button', 'columns'], 31];
    local wkey = WindowCreate cat [HEADER, panel];
    WindowSetAttr [wkey, [colorscale: [graphics: scalekey]]];
    WindowShow [wkey, 1];

    gr_destroy scalekey;

    loop
        local [vals, trig] = WindowWait wkey;
        if trig === 'panel' then
            if vals.panel === 'Close' then 
                break;
            endif
        endif
    endloop

    WindowDestroy wkey;

endfunction

#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.
    
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

/****************************************************************************
 *                                qbmmmin.svl
 *
 *
 *  From the MOE documentation for MM:
 *    A quadratic force to the starting geometry is added to the atoms in an
 *    attempt to keep the resulting minimum close to the original coordinates. 
 *    A force constant of 300 is comparable to the strength of a bond. A tether
 *    value greater than or equal to 100 000 is interpreted to mean a fixed
 *    atom; that is, atoms that are tethered with a weight greater than or
 *    equal to 100 000 are frozen during the calculation. 
 *
 *    moebatch -exec "run ['qbmmmin.svl', ['moedivcon.mdb', 'force']]" -exit
 *
 ****************************************************************************/
#set title   'QuantumBio MM Minimization'
#set class   'QuantumBio'
#set version '2010.01'
#set main 'qb_MMMinDB'


function qb_GetCoreEnv;
function qb_GetPoseFields;
function qb_GetRecFields;
function qb_IsModeOneToOne;

function MM;
function PartialCharge;

local function qb_MMMin [atoms, weight]

    aSetCharge [atoms, first PartialCharge [atoms, 'FF']];
    local tetherWeight = rep [weight, length atoms];
    (tetherWeight | aAtomicNumber atoms <= 1) = 0;

    MM [
        tetherWeight:    tetherWeight,
        gtest:           0.05,
        keep_chirality:  '',
        pot_finalize:    0,
        pot_charge:      0
    ];

    return atoms;
endfunction

local function qb_MMMinDB [dbpath, weight]

    if neL [fext dbpath, 'mdb'] then
        exit twrite ['{}\nis not a MOE database.', dbpath];
    endif

    if neL [ftype dbpath, 'file'] then
        exit twrite ['Unable to find the database:\n    {}', dbpath];
    endif

    local dbkey = db_Open [dbpath, 'read-write'];
    local [recmol, ligmol, status, coreopts, complex] = qb_GetCoreEnv [dbkey];
    local poseflds = qb_GetPoseFields [dbkey];
    local recflds = qb_GetRecFields [dbkey];
    local dbrowkeys = db_Entries dbkey;


    local osys, nsys;
    if not MOE_BATCH then [osys, nsys] = SystemPush []; endif

    if qb_IsModeOneToOne coreopts then


    else

        local rowkey;
        for rowkey in dbrowkeys loop
            local atoms = mol_Create mol;

            local newmol = mol_Extract Atoms [];

            oDestroy Chains [];
        endloop
    endif

    if not MOE_BATCH then SystemPop [osys, nsys]; endif

endfunction




#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2009 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

//    qmspanel.svl    User-interface entrypoint to QMScore calculations

#set title   'QuantumBio QMScore Panel'
#set class   'QuantumBio'
#set version '2009.01'
#set main    'qb_QMScoreSetupPanel'


function qb_AtomsToMols;
function qb_CalcCharge;
function qb_CopyPoseDB;
function qb_CopyRecPoseDB;
function qb_GetDefaultsQMScore;
function qb_GetEnv;
function qb_GetPoseFields;
function qb_GetTagsQMScore;
function qb_LoadQMScoreDB;
function qb_SaveQMScore;
function qb_SaveStatus;
function qb_SaveEnv;
function qb_SetStatusField;
function qb_SetQMScoreFields;

function qb_QMScore;
function qb_QMScoreBatch;

/*  NOTE:  If you change the Option lists here, you need to update the
 *         Defaults in qbutil.svl and the Keys in qmsinterface.svl.
 */

const RUN_MODES =
    [
    'One-to-One',
    'One-to-Many',
    'Many-to-Many'
    ];

const HAMILTONIANS =
    [
    'AM1',
    'MNDO',
    'MNDO/d',
    'PDDG-PM3',
    'PM3',
    'PM6'
    ];

const LIG_OPTS =
    [
    'none',
    'free',
    'bound'
    ];

//  Local Functions

/****************************************************************************
 *                          RunCalc
 *
 *  Run the One-to-One scoring from the MOE Window.
 *
 ****************************************************************************/
local function RunCalc [dbkey]
    local msgkey = Message [0, 'QMScore is running ...'];
    sleep -1;    // Allow parent to close input window.

    local [recset, ligand, options] = qb_GetEnv [dbkey];
    local workdir;
    if options.pwd === 1 then
        workdir = getenv 'PWD';
    else
        workdir = fabsname options.workdir;
    endif

    options.workdir = workdir;
    write ['Work Dir:  {}\n', workdir];  //DEBUG

    local [results, errmess] = qb_QMScore [recset, ligand, options];

    local rowkey = first db_Entries [dbkey];
    if results === [] then
        if errmess === [] or errmess === '' then
            qb_SaveStatus [dbkey, rowkey, "Error:  Unknown error!"];
            write ['QMScore Error:  Unknown error!\n'];
        else
            qb_SaveStatus [dbkey, rowkey, 
                swrite ['Error:  {}', errmess]];
            write ['QMScore Error:  {}\n', errmess];
        endif
    else
        qb_SaveQMScore [dbkey, rowkey, results];
        qb_SaveStatus [dbkey, rowkey, "Success"];
    endif

    Message [msgkey, 'QMScore is done.'];

    return;
endfunction

/****************************************************************************
 *                          SetUpDB
 *
 *  Create the output database for storing QMScore results and ensure that
 *  the required fields are present.  Store the molecules and run options 
 *  in the DB environment.
 *
 *  Note:  it is assumed that this function is called from a child process
 *  and will exit on an error.
 *
 ****************************************************************************/
local function SetUpDB [opts]

    local qmskey = db_Open [opts.scoredb, 'create'];
    qb_SetQMScoreFields [qmskey, opts.mode === 'Many-to-Many'];

    if opts.mode === 'One-to-One' or opts.mode === 'One-to-Many' then
        local [recset, ligand, errmess] = qb_AtomsToMols [];
        if recset === [] or ligand === [] then
            Warning [errmess];
            exit [];
        endif

        qb_SaveEnv [qmskey, recset, ligand, opts, [], 'qmscore'];
    else
        qb_SaveEnv [qmskey, [], [], opts, [], 'qmscore'];
    endif

    if opts.mode === 'One-to-One' then
        local posedata = tag [qb_GetPoseFields [], [ligand, opts.ligchg]];
        db_Write [qmskey, 0, posedata];

    else
        local posekey = db_Open [opts.posedb, 'read'];
        if qmskey === posekey then
            Warning twrite ['{} and {}\n are the same database', 
                opts.scoredb, opts.posedb];
            exit [];
        endif

        if opts.mode === 'One-to-Many' then
            qb_CopyPoseDB [qmskey, posekey];
        else
            local reckey = db_Open [opts.recdb, 'read'];
            if qmskey === reckey then
                Warning twrite ['{} and {}\n are the same database', 
                    opts.scoredb, opts.recdb];
                exit [];
            endif

            qb_CopyRecPoseDB [qmskey, reckey, posekey];
            db_Close reckey;
        endif

        db_Close posekey;
    endif

    qb_SetStatusField [qmskey];

    return qmskey;
endfunction

/****************************************************************************
 *                          UpdateCWD
 *
 *  Update the window based on new CWD value.
 *
 ****************************************************************************/
local function UpdateCWD [wkey, cwd, wd, prev]
    if cwd === 1 then
        WindowSetAttr [wkey, [workdir: [sensitive: 0, allowBlank: 1]]];
        WindowSetData [wkey, [workdir: '']];
        return wd;
    else
        WindowSetAttr [wkey, [workdir: [sensitive: 1, allowBlank: 0]]];
        WindowSetData [wkey, [workdir: prev]];
        return prev;
    endif
endfunction

/****************************************************************************
 *                          UpdateMode
 *
 *  Update the window based on new mode value.
 *
 ****************************************************************************/
local function UpdateMode [wkey, mode]
    if mode === 'One-to-One' then
        WindowSetAttr [wkey, [posebox: [sensitive: 0],
            posedb: [allowBlank: 1], recbox: [sensitive: 0], 
            recdb: [allowBlank: 1], panel:[sensitive: [1,1,1,1]],
            chgbox: [sensitive: 1], ligchg: [allowBlank: 0],
            recchg: [allowBlank: 0], poseschg: [sensitive: 0]]];
    elseif mode === 'One-to-Many' then
        WindowSetAttr [wkey, [posebox: [sensitive: 1],
            posedb: [allowBlank: 0],recbox: [sensitive: 0], 
            recdb: [allowBlank: 1], panel:[sensitive: [0,1,1,1]],
            chgbox: [sensitive: 1], ligchg: [allowBlank: 0],
            recchg: [allowBlank: 0], poseschg: [sensitive: 1]]];
    elseif mode === 'Many-to-Many' then
        WindowSetAttr [wkey, [posebox: [sensitive: 1],
            posedb: [allowBlank: 0], recbox: [sensitive: 1], 
            recdb: [allowBlank: 0], panel:[sensitive: [0,1,1,1]],
            chgbox: [sensitive: 0], ligchg: [allowBlank: 1],
            recchg: [allowBlank: 1], poseschg: [sensitive: 0]]];
    endif
endfunction

//  Global Functions

/****************************************************************************
 *
 *                          qb_QMScoreSetupPanel
 *
 ****************************************************************************/
global function qb_QMScoreSetupPanel []

    if MOE_BATCH then return; endif
    if WindowShow ['QMScorePanel', 1] then return; endif

    local wkey = WindowCreate
        [
        name: 'panel', 
        title: 'QMScore',
        windowName: 'QMScorePanel',
        text: ['Run', 'Save', 'Load', 'Cancel'],
        onTrigger: ['validate', 'validate', 'return', 'return'],
        bubbleHelp: ['Execute QMScore from MOE Window.',
            'Save run parameters in database\n'
            'for later execution on cluster.', 
            'Load run parameters from a NMRScore database.', 
            ''],

        Hbox :
            [
            extendH: 1,
            FSBText :
                [
                name: 'scoredb', len: 40, extendH: 1, title: 'Output DB:',
                mode: 'saveAs', allowBlank: 0,
                bubbleHelp:
                    'The name of the output database that will hold\n'
                    'the run paramaters and scoring results.'
                ],
            Button : [ name: 'browse_scoredb', text: 'Browse...' ]
            ],

        Separator : [flushLeft:1, extendH:1, margin:1],

        Hbox :
            [
            extendH: 1,
            Text :
                [
                name: 'workdir', len: 40, extendH: 1, title: 'Working Dir:',
                type: 'char', allowBlank: 0,
                shortcut: ['/tmp', '.', '~', '~/tmp', '/scratch'],
                bubbleHelp:
                    'The name of the working directory for storing\n'
                    'QB Divcon intermediate calculations and logs.\n'
                    'The absolute path to the specified directory\n'
                    'will be stored and used at execution time.'
                ],
            Separator : 
                [
                vertical:0, shadow:'noline', extendH: 0, margin:1
                ],
            Checkbox :
                [
                name: 'cwd', text: 'CWD', onTrigger: 'return', 
                bubbleHelp:
                    'Set the current working directory using\n'
                    'the run time environment variable $PWD.'
                ]
            ],

        Vbox :
            [
            Hbox :
                [
                extendH: 1,
                Option :
                    [
                    name: 'ham', title: 'Hamiltonian:', text: HAMILTONIANS,
                    type: 'int', minWidth: 11,
                    bubbleHelp:
                        ''
                    ]
                ],
            Hbox :
                 [
                Checkbox :
                    [
                    name: 'standard', title: 'Calculation:', text: 'Standard',
                    bubbleHelp:
                        'Standard closed-shell calculation\n'
                        '(no divide and conquer).'
                    ],
                Separator : 
                    [
                    vertical:0, shadow:'noline', extendH: 1, margin:1
                    ],
                Text :
                    [
                    name: 'shift', title: 'Shift:', len: 15, extendH: 1, 
                    type: 'real', allowBlank: 0,
                    shortcut: ['0.0', '2.0', '4.0', '8.0', '16.0'],
                    bubbleHelp:
                        'Initial dynamic level shift (eV).'
                    ]
                ],
            Hbox :
                [
                extendH: 1,
                Option :
                    [
                    name: 'opt', title: 'Ligand Optimization:', text: LIG_OPTS,
                    type: 'int', minWidth: 5, extendH: 1,
                    bubbleHelp:
                        'A QM-based ligand optimization can be performed\n'
                        'prior to scoring. This optimization may occur\n'
                        'either while the ligand is docked within the target\n'
                        'or while the ligand is separate from the target.\n'
                        'Warning: this optional step will significantly\n'
                        'increase the CPU cost of the calculation.'
                    ],
                Separator : 
                    [
                    vertical:0, shadow:'noline', extendH: 1, margin:1
                    ],
                Checkbox :
                    [
                    name: 'freq', text: 'Frequency',
                    bubbleHelp:
                        'Perform frequency calculation to determine ligand\n'
                        'entropy in score function.  Warning: may increase\n'
                        'CPU cost of the calculation.'
                    ]
                ]
            ],


        Separator : [flushLeft:1, extendH:1, margin:1],

        Hbox :
            [
            Radio :
                [
                name: 'mode', text: RUN_MODES, columns: 3, minWidth: 12, 
                extendH: 1, onTrigger: 'return', title: 'Mapping Mode:',
                type: 'char',
                bubbleHelp:
                    'The mapping mode of receptors to ligand/poses:\n'
                    '  One ligand docked into one receptor.\n'
                    '  Many ligand poses docked into the same receptor.\n'
                    '  Many ligand poses, each docked into its own receptor.'
                ]
            ],

        Hbox :
            [
            name: 'posebox', extendH: 1,
            FSBText :
                [
                name: 'posedb', len: 40, extendH: 1, title: 'Ligand/Pose DB:',
                mode: 'open', allowBlank: 0,
                bubbleHelp:
                    'The name of the input database that holds\n'
                    'the ligand poses (and possibly scores).'
                ],
            Button : [ name: 'browse_posedb', text: 'Browse...' ]
            ],

        Hbox :
            [
            name: 'recbox', extendH: 1,
            FSBText :
                [
                name: 'recdb', len: 40, extendH: 1, title: 'Receptor DB:',
                mode: 'open', allowBlank: 0,
                bubbleHelp:
                    'The name of the input database that holds\n'
                    'the receptors.'
                ],
            Button : [ name: 'browse_recdb', text: 'Browse...' ]
            ],

        Separator : [flushLeft:1, extendH:1, margin:1],

        Hbox :
            [
            extendH: 1, name: 'chgbox', title: 'Charges:',
            Button : [ name: 'calcchg', text: 'Calculate' ],
            Vbox :
                [
                Hbox :
                    [
                    extendH: 1,
                    Text :
                        [
                        name: 'recchg', title: 'Receptor:', allowBlank: 0,
                        type: 'int', minWidth: 4,
                        bubbleHelp:
                            'Total charge of receptor.'
                        ]
                    ],
                Hbox :
                    [
                    extendH: 1,
                    Text :
                        [
                        name: 'ligchg', title: 'Ligand:', allowBlank: 0,
                        type: 'int', minWidth: 4, extendH: 1,
                        bubbleHelp:
                            'Total charge of ligand.'
                        ],
                    Checkbox :
                        [
                        name: 'poseschg', text: 'All Poses',
                        bubbleHelp:
                            'Use the ligand charge for all\n'
                            'poses in the poses database.'
                        ]
                    ]
                ]
            ],

        Separator : [flushLeft:1, extendH:1, margin:1]
        ];

    local btid, browsetasks = [];
    local options = []; 
    local qmskey = 0;
    local defs = qb_GetDefaultsQMScore [];
    local windefs = droplast defs;
    local prevwd = defs.workdir;

    WindowSetData [wkey, windefs];
    WindowSetAttr [wkey, [freq: [sensitive: 1],
         workdir: [sensitive: 1, allowBlank: 0],
         posebox: [sensitive: 0], posedb: [allowBlank: 1],
         recbox: [sensitive: 0], recdb: [allowBlank: 1],
         poseschg: [sensitive: 0]]];
    WindowShow [wkey, 1];

    loop
        local [vals, trig] = WindowWait wkey;
        if trig === 'mode' then
            UpdateMode [wkey, vals.mode];

        elseif trig === 'cwd' then
            prevwd = UpdateCWD [wkey, vals.cwd, vals.workdir, prevwd];

        elseif trig === 'calcchg' then
            if second task_fork [master: 'parent'] === 'child' then
                task_prio 0;

                local [lchg, rchg, errmess] = qb_CalcCharge [];
                if lchg === [] or rchg === [] then
                    Warning  errmess;
                    exit [];
                endif

                WindowSetData [wkey, [ligchg: lchg, recchg: rchg]];
                exit [];
            endif

        elseif trig === 'browse_scoredb' then
            btid = run ['fbrowse.svl', [trig, wkey, 'Select QMScore DB File', 
                'none', '*.mdb', 'scoredb']];
            if btid then browsetasks = append [browsetasks, btid]; endif

        elseif trig === 'browse_posedb' then
            btid = run ['fbrowse.svl', [trig, wkey, 'Select Pose DB File', 
                'open', '*.mdb', 'posedb']];
            if btid then browsetasks = append [browsetasks, btid]; endif

        elseif trig === 'browse_recdb' then
            btid = run ['fbrowse.svl', [trig, wkey, 'Select Receptor DB File', 
                'open', '*.mdb', 'recdb']];
            if btid then browsetasks = append [browsetasks, btid]; endif

       elseif trig === 'panel' then
            if vals.panel === 'Cancel' then 
                break;

            elseif vals.panel === 'Load' then 
                if second task_fork [master: 'parent'] === 'child' then
                    task_prio 0;
                    local dbpath = FilePrompt [title: 'Input Database', 
                        filter: '*.mdb', allowEmptyList: 0];
                    if not isnull dbpath then
                        write ['Load database: {}\n', dbpath];
                        local [ldrec, ldlig, ldopts, ldmess] = 
                            qb_LoadQMScoreDB [dbpath];
                        if ldrec === [] or ldlig === [] or ldopts === [] then
                            Warning ldmess;
                            exit [];
                        endif

                        /*  Drop the task tagged value.  */
                        ldopts = droplast ldopts;
                        WindowSetData [wkey, ldopts];
                        UpdateMode [wkey, ldopts.mode];
                        prevwd = UpdateCWD [wkey, ldopts.cwd, ldopts.workdir, 
                            ldopts.workdir];

    	                Close [force:1];
                        local ldligmol = mol_Create ldlig;
                        local ldligatoms = cat oAtoms ldligmol;
                        oSetCollection ['QB_LIGAND', ldligatoms];
                        aSetNucleusLook [ldligatoms, 'small-sphere'];
                        aSetBondLook [ldligatoms, 'cylinder'];
                        app mol_Create ldrec;
    	                View [];
                    endif

                    exit [];
                endif

            elseif vals.panel === 'Run' then
                if second task_fork [prio:3, idle:0] === 'child' then
                    options = tag [qb_GetTagsQMScore [], [vals.mode, vals.cwd,
                        fabsname vals.workdir, fabsname vals.scoredb, [], [],
                        vals.ligchg, vals.recchg, vals.poseschg,
                        vals.ham, vals.standard, vals.freq, vals.opt, 
                        vals.shift, []]];

                    qmskey = SetUpDB [options];
                    RunCalc [qmskey];
                    dbv_Open db_Filename qmskey;
                    db_Close qmskey;
                    exit [];
                else
                    break;
                endif

            elseif vals.panel === 'Save' then
                if second task_fork [] === 'child' then
                    vals.posedb = select ['', fabsname vals.posedb, 
                        vals.posedb === ''];
                    vals.recdb = select ['', fabsname vals.recdb, 
                        vals.recdb === ''];
                    options = tag [qb_GetTagsQMScore [], [vals.mode, vals.cwd,
                        vals.workdir, fabsname vals.scoredb,
                        vals.posedb, vals.recdb, 
                        vals.ligchg, vals.recchg, vals.poseschg,
                        vals.ham, vals.standard, vals.freq, vals.opt, 
                        vals.shift, []]];
                    qmskey = SetUpDB [options];
                    dbv_Open db_Filename qmskey;
                    db_Close qmskey;
                    exit [];
                else
                    break;
                endif
            endif
        endif
    endloop

    task_kill browsetasks;
    WindowDestroy wkey;

endfunction

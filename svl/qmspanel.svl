#svl
//    qmspanel.svl    User-interface entrypoint to QMScore calculations
//
//	31-aug-2009 (dk) created


#set title   'QMScore Panel'
#set class   'MOE:quantummechanics'
#set version '2009.01'
#set main    'qms_SetupPanel'

/****************************************************************************
 *                          PrintDraw
 *
 *  Rendering for printed QMScore results.
 *
 ****************************************************************************/
local function PrintDraw [scores, dspl, opt]

    local pagesize = opt.pagesize;
    local margin = opt.margin;
    if istrue opt.landscape then pagesize = reverse pagesize; endif
    local psize = maxE [0, pagesize - keep[margin,2] - drop[margin,2]];
    local grkeys = [], grkey;
    local fsize = opt.wfn_fontsize, bigfsize = fsize * 1.5;
    local y;
    
    grkey = gr_create [];
    grkeys = cat [grkeys, grkey];
    y = second psize - bigfsize;
    local midx = first psize / 2;
    local title = 'QMScore Results';
    local tlen = tok_length title;
    gr_text [grkey, [0, 
         [midx - tlen * fsize / 2, y], title, 'sf-b', 0x000000, bigfsize, []
         ]];
    y = y - bigfsize * 2;

    local rlbl, rval;
    for [rlbl, rval] in scores loop
        local rvaltok = twrite ['{n:20.8f}', rval];
        gr_text [grkey, [0, [0, y], token rlbl, 'sf', 0x000000, fsize, []]];
        gr_text [grkey, [0, [midx, y], rvaltok, 'tt', 0x000000, fsize, []]];
        y = y - fsize * 1.5;
    endloop

    return grkeys;

endfunction

/****************************************************************************
 *
 *                          PrintContent
 *
 *  Printer-style formation of QMScore data.
 *
 ****************************************************************************/
local function PrintContent [data, cmd, cmdarg]

    const DEFAULTS = [
        wfn_fontsize:     10
        ];
    
    if cmd == 'begin' then
        cmdarg = cat [cmdarg, DEFAULTS];
        cmdarg = cmdarg | m_uniq tags cmdarg;
        data = [
            grkey:  [],           // graphics key cache
            scores: data(1),      // wavefunction data
            dspl:   data(2),      // rendered data
            opt:    cmdarg        // display options
            ];
    
        local cmargin = cmdarg.margin;
        local cpagesize = cmdarg.pagesize;
        if istrue data.opt.landscape then cpagesize = reverse cpagesize; endif
        local cpsize = maxE [0, cpagesize - keep[cmargin,2] - drop[cmargin,2]];
        data.grkey = PrintDraw [data.scores, data.dspl, data.opt];

        return [data, max [1, length data.grkey]];

    elseif cmd == 'end' then
        app gr_destroy data.grkey;
        return [];

    elseif cmd == 'defaults' then
        return DEFAULTS;
    
    elseif cmd == 'widgets' then
        return [
            Text: [name: 'wfn_fontsize', title: 'Font Size:', 
            type: 'int', len: 4, onTrigger: 'return',
            shortcut: ['10','11','12','14','16','18','20','24','26','28']
            ]];
    
    elseif cmd == 'window_init' then
        local wkey = cmdarg;
        local scores = data;
   
    elseif cmd == 'page' then
        local margin = data.opt.margin;
        return [data, (data.grkey)(cmdarg), [keep [margin, 2]], []];
    
    else
        return [];
    endif
endfunction

/****************************************************************************
 *
 *                          qms_ResultsPanel
 *
 ****************************************************************************/
global function scf_ResultsPanel results

    //  Simple version:  convert results into token for label and clipboard.
    //  Note:  field width doesn't work with tokens
    local resulttok = '';
    local rlbl, rval;
    for [rlbl, rval] in results loop
        resulttok = tok_cat [resulttok, 
        twrite ['{t:} {n:20.8f}\n', rlbl, rval]];
    endloop
    resulttok = tok_cat [resulttok, '\n'];

    local wkey = WindowCreate [
        windowName: 'QMS_ResultsPanel',
        name: 'panel', 
        title: 'QMScore Results',
        text: ['Copy', 'Print', 'Close'],
        bubbleHelp: [
            'Copy results to clipboard',
            '',
            ''
            ],
        Label: [name: 'label', text: resulttok, minWidth: 40, resizeH : 1,
            resizeV: 1, background: 'yellow']
        ];


    WindowShow [wkey, 1];
    while wkey loop
        local [val, trig] = WindowWait wkey;
        if trig === 'panel' then
            local tskttl = task_title -1;

            if val.panel === 'Copy' then
                ClipboardSetText string resulttok;

            elseif val.panel === 'Print' then 
                if second task_fork [] == 'child' then 
                    task_settitle [-1, 'Print QMScore'];
                    run ['printview.svl', [#PrintContent, 
                        [results], 'Print QMScore Results'
                        ]];
                    exit [];
                endif

            elseif val.panel === 'Close' then 
                WindowDestroy wkey;
                wkey = 0;
            endif
        endif
    endloop
endfunction


/****************************************************************************
 *
 *                          qms_SetupPanel
 *
 ****************************************************************************/
global function qms_SetupPanel [cfg, parent]
    if MOE_BATCH then return [];
    endif

    parent = add parent;

    local wkey = WindowCreate [
        name: 'panel', 
        title: 'QMScore',
        windowName: 'QMScorePanel',
        text: ['Run', 'Cancel'],
        Label: [text: '                   <input data>', margin: 1, minWidth: 20]
        ];


    // ---------------------- embedded functions begin ----------------------

    function RunCalc []
        sleep -1;    // Allow parent to close input window.

        return [["Label 1", 1234.56789], 
                ["Another Label 2", 9876.54321],
                ["Some Other Label 3", 4444.4444],
                ["And Label 4", 666666.7777777],
                ["Final Label 5", 0.01]
               ];
    endfunction

    // ----------------------- embedded functions end -----------------------

    WindowShow [wkey, 1];
    while wkey loop
        local [val, trig] = WindowWait wkey;
        if trig === 'panel' then
            local tskttl = task_title -1;
            if val.panel === 'Run' then
                if second task_fork [] == 'child' then
                    task_settitle [-1, tskttl];

                    local results = RunCalc [];
                    scf_ResultsPanel results;
                    exit [];
                else
                    WindowDestroy wkey;
                    wkey = 0;
                endif

            elseif val.panel === 'Cancel' then 
                WindowDestroy wkey;
                wkey = 0;
            endif
        endif
    endloop
endfunction

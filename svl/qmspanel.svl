#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

//    qmspanel.svl    User-interface entrypoint to QMScore calculations

#set title   'QuantumBio QMScore Panel'
#set class   'QuantumBio'
#set version '2010.02'
#set main    'qb_QMScoreSetupPanel'


function qb_CoreHandler;
function qb_GetCorePanel;
function qb_GetDefaultsCore;
function qb_GetDefaultsStatus;
function qb_GetEnv;
function qb_InitCorePanel;
function qb_LoadScoreDB;
function qb_SaveQMScore;
function qb_SaveDivconStatus;
function qb_SetUpScoreDB;
function qb_TagCoreVals;
function qb_UpdateCorePanel;
function qb_VerifyCharges;

function qb_QMScore;
function qb_QMScoreBatch;

/*  NOTE:  If you change the Option lists here, you need to update the
 *         Keys in qmsinterface.svl.
 */
const QMSCORE_OPT_DEFAULTS =
    [
    ['ham',          5             ],
    ['standard',     0             ],
    ['freq',         0             ],
    ['opt',          1             ],
    ['shift',        0.0           ]
    ];


const HAMILTONIANS =
    [
    'AM1',
    'MNDO',
    'MNDO/d',
    'PDDG-PM3',
    'PM3',
    'PM6'
    ];

const LIG_OPTS =
    [
    'none',
    'free',
    'bound'
    ];



const HEADER = 
    [
    name: 'panel', 
    title: 'QMScore',
    windowName: 'QMScorePanel',
    text: ['Run', 'Save', 'Load', 'Cancel'],
    onTrigger: ['validate', 'validate', 'return', 'return'],
    bubbleHelp: ['Execute QMScore from MOE Window.',
        'Save run parameters in database\n'
        'for later execution on cluster.', 
        'Load run parameters from a QMScore database.', 
        '']
    ];

const PANEL =
    [
    Vbox :
        [
        Hbox :
            [
            extendH: 1,
            Option :
                [
                name: 'ham', title: 'Hamiltonian:', text: HAMILTONIANS,
                type: 'int', minWidth: 11,
                bubbleHelp:
                    ''
                ]
            ],
        Hbox :
                [
            Checkbox :
                [
                name: 'standard', title: 'Calculation:', text: 'Standard',
                bubbleHelp:
                    'Standard closed-shell calculation\n'
                    '(no divide and conquer).'
                ],
            Separator : 
                [
                vertical:0, shadow:'noline', extendH: 1, margin:1
                ],
            Text :
                [
                name: 'shift', title: 'Shift:', len: 15, extendH: 1, 
                type: 'real', allowBlank: 0,
                shortcut: ['0.0', '2.0', '4.0', '8.0', '16.0'],
                bubbleHelp:
                    'Initial dynamic level shift (eV).'
                ]
            ],
        Hbox :
            [
            extendH: 1,
            Option :
                [
                name: 'opt', title: 'Ligand Optimization:', text: LIG_OPTS,
                type: 'int', minWidth: 5, extendH: 1,
                bubbleHelp:
                    'A QM-based ligand optimization can be performed\n'
                    'prior to scoring. This optimization may occur\n'
                    'either while the ligand is docked within the target\n'
                    'or while the ligand is separate from the target.\n'
                    'Warning: this optional step will significantly\n'
                    'increase the CPU cost of the calculation.'
                ],
            Separator : 
                [
                vertical:0, shadow:'noline', extendH: 1, margin:1
                ],
            Checkbox :
                [
                name: 'freq', text: 'Frequency',
                bubbleHelp:
                    'Perform frequency calculation to determine ligand\n'
                    'entropy in score function.  Warning: may increase\n'
                    'CPU cost of the calculation.'
                ]
            ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1]
    ];

//  Local Functions

/****************************************************************************
 *                          RunCalc
 *
 *  Run the One-to-One scoring from the MOE Window.
 *
 ****************************************************************************/
local function RunCalc [dbkey]
    local msgkey = Message [0, 'QMScore is running ...'];
    sleep -1;    // Allow parent to close input window.

    local [recset, ligand, status, coreopts, appopts, c] = qb_GetEnv [dbkey];
    local workdir;
    if coreopts.pwd === 1 then
        workdir = getenv 'PWD';
    else
        workdir = fabsname coreopts.workdir;
    endif

    coreopts.workdir = workdir;
    write ['Work Dir:  {}\n', workdir];  //DEBUG

    local [results, errmess] = qb_QMScore [recset, ligand, coreopts, appopts];

    local rowkey = first db_Entries [dbkey];
    if results === [] then
        if errmess === [] or errmess === '' then
            qb_SaveDivconStatus [dbkey, rowkey, "Error:  Unknown error!"];
            write ['QMScore Error:  Unknown error!\n'];
        else
            qb_SaveDivconStatus [dbkey, rowkey, 
                swrite ['Error:  {}', errmess]];
            write ['QMScore Error:  {}\n', errmess];
        endif
    else
        qb_SaveQMScore [dbkey, rowkey, results];
        errmess = cat [ "Success\n", errmess];
        qb_SaveDivconStatus [dbkey, rowkey, errmess];
    endif

    Message [msgkey, 'QMScore is done.'];

    return;
endfunction

//  Global Functions

/****************************************************************************
 *                          qb_GetDefaultsQMScore
 *
 *  Return the default options for QMScore.
 *
 ****************************************************************************/
global function qb_GetDefaultsQMScore []
    return tag tr QMSCORE_OPT_DEFAULTS;
endfunction


/****************************************************************************
 *
 *                          qb_QMScoreSetupPanel
 *
 ****************************************************************************/
global function qb_QMScoreSetupPanel []

    static status;                     //  Shared with child tasks.

    if MOE_BATCH then return; endif
    if WindowShow ['QMScorePanel', 1] then return; endif

    local coreopts = [], appopts = [], browsetasks = [];
    local qmskey = 0;
    status = qb_GetDefaultsStatus [];
    local coredflts = qb_GetDefaultsCore [];
    local appdflts = qb_GetDefaultsQMScore [];

    local wkey = WindowCreate cat [HEADER, qb_GetCorePanel [], PANEL];
    status = qb_InitCorePanel [wkey, status, coredflts];
    WindowSetData [wkey, appdflts];
    WindowShow [wkey, 1];

    loop
        local [vals, trig] = WindowWait wkey;

       if trig === 'panel' then
            if vals.panel === 'Cancel' then 
                break;

            elseif vals.panel === 'Load' then 
                if second task_fork [master: 'parent',
                        statics:'share'] === 'child' then
                    task_prio 0;

                    local dbpath = FilePrompt [title: 'Load Database', 
                        filter: '*.mdb', allowEmptyList: 0];
                    if not isnull dbpath then
                        write ['Load database: {}\n', dbpath];
                        local [ldrec, ldlig, ldsts, ldcoreopts, ldappopts,
                            ldc, ldmess] = qb_LoadScoreDB [dbpath, 'qmscore'];
                        if ldsts === [] and ldcoreopts === []
                                and ldappopts === [] then
                            Warning ldmess;
                            exit [];
                        endif

    	                Close [force:1];
                        if neL [ldrec, []] and neL [ldlig, []] then
                            local ldligmol = mol_Create ldlig;
                            local ldligatoms = cat oAtoms ldligmol;
                            oSetCollection ['QB_LIGAND', ldligatoms];
                            aSetNucleusLook [ldligatoms, 'small-sphere'];
                            aSetBondLook [ldligatoms, 'cylinder'];
                            app mol_Create ldrec;
        	                View [];
                        endif

                        status = qb_UpdateCorePanel [wkey, ldsts, ldcoreopts];
                        WindowSetData [wkey, ldappopts];
                    endif

                    exit [];
                endif

            elseif vals.panel === 'Run' then
                status = qb_VerifyCharges [wkey, status, vals];
                if not status.verifychg then continue; endif

                if second task_fork [statics:'share',
                        prio:3, idle:0] === 'child' then

                    coreopts = qb_TagCoreVals [vals];
                    appopts = tag [first tr QMSCORE_OPT_DEFAULTS, [
                        vals.ham, vals.standard, vals.freq, vals.opt,
                        vals.shift]];
                    qmskey = qb_SetUpScoreDB [status, coreopts, appopts, 
                        [], [], 'qmscore'];
                    RunCalc [qmskey];
                    dbv_Open db_Filename qmskey;
                    db_Close qmskey;
                    exit [];
                else
                    break;
                endif

            elseif vals.panel === 'Save' then
                status = qb_VerifyCharges [wkey, status, vals];
                if not status.verifychg then continue; endif

                if second task_fork [] === 'child' then
                    task_prio 0;

                    coreopts = qb_TagCoreVals [vals];
                    appopts = tag [first tr QMSCORE_OPT_DEFAULTS, [
                        vals.ham, vals.standard, vals.freq, vals.opt,
                        vals.shift]];
                    qmskey = qb_SetUpScoreDB [status, coreopts, appopts,
                        [], [], 'qmscore'];
                    dbv_Open db_Filename qmskey;
                    db_Close qmskey;
                    exit [];
                else
                    break;
                endif
            endif
        else
           [status, browsetasks] = qb_CoreHandler [wkey, trig, status, vals,
               browsetasks];
        endif
    endloop

    task_kill browsetasks;
    WindowDestroy wkey;

endfunction

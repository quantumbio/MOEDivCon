#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

//    qbcore.svl    Core user-interface and utilities used by QB panels

#set title   'QuantumBio Core'
#set class   'QuantumBio'
#set version '2010.02'

function _Atoms;

//  Database Fields
const POSE_FIELD = 'Ligand/Pose';
const LIGCHG_FIELD = 'Lig Chg';

const REC_FIELD = 'Receptor';
const RECCHG_FIELD = 'Rec Chg';

const STATUS_FIELD = 'Status';

// Environment tags
const COMPLEX = 'complex';
const RECEPTOR = 'receptor';
const LIGAND = 'ligand';
const STATUS = 'status';
const COREOPTS = 'coreoptions';
const APPOPTS = 'applicationoptions';

const DBTYPE = 'qb_dbtype';
const QMSCORE = 'qb_qmscoredb';
const NMRSCORE = 'qb_nmrscoredb';

//  Charge status
const CHG_COLOR = 
    [
    'white',
    'green',
    'red'
    ];

const STATUS_DEFAULTS =
    [
    ['prevwd',       ''            ],
    ['calcchg',      0             ],
    ['verifychg',    0             ],
    ['recchg',       1             ],
    ['ligchg',       1             ],
    ['moerecchg',    0             ],
    ['moeligchg',    0             ]
    ];

/*  NOTE:  Non-GUI opt task must be the first tag.  */
const CORE_OPT_DEFAULTS =
    [
    ['task',         0             ],
    ['mode',         'One-to-One'  ],  // Shared dialog defaults options
    ['cwd',          0             ],
    ['workdir',      '/tmp'        ],
    ['scoredb',      'qbscore.mdb' ],
    ['recdb',        ''            ],
    ['posedb',       ''            ],
    ['testLP',       1             ],
    ['testOverlap',  1             ],
    ['testH',        1             ],
    ['testMM',       1             ],
    ['recchg',       0             ],
    ['ligchg',       0             ],
    ['poseschg',     0             ]
    ];

const RUN_MODES =
    [
    'One-to-One',
    'One-to-Many',
    'Many-to-Many'
    ];

const CORE_PANEL =
    [
    Hbox :
        [
        extendH: 1,
        FSBText :
            [
            name: 'scoredb', len: 40, extendH: 1, title: 'Output DB:',
            mode: 'saveAs', allowBlank: 0,
            bubbleHelp:
                'The name of the output database that will hold\n'
                'the run paramaters and scoring results.'
            ],
        Button : [ name: 'browse_scoredb', text: 'Browse...' ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1],

    Hbox :
        [
        extendH: 1,
        Text :
            [
            name: 'workdir', len: 40, extendH: 1, title: 'Working Dir:',
            type: 'char', allowBlank: 0,
            shortcut: ['/tmp', '.', '~', '~/tmp', '/scratch'],
            bubbleHelp:
                'The name of the working directory for storing\n'
                'QB Divcon intermediate calculations and logs.\n'
                'The absolute path to the specified directory\n'
                'will be stored and used at execution time.'
            ],
        Separator : 
            [
            vertical:0, shadow:'noline', extendH: 0, margin:1
            ],
        Checkbox :
            [
            name: 'cwd', text: 'CWD', onTrigger: 'return', 
            bubbleHelp:
                'Set the current working directory using\n'
                'the run time environment variable $PWD.'
            ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1],

    Hbox :
        [
        Radio :
            [
            name: 'mode', text: RUN_MODES, columns: 3, minWidth: 12, 
            extendH: 1, onTrigger: 'return', title: 'Mapping Mode:',
            type: 'char',
            bubbleHelp:
                'The mapping mode of receptors to ligand/poses:\n'
                '  One ligand docked into one receptor.\n'
                '  Many ligand poses docked into the same receptor.\n'
                '  Many ligand poses, each docked into its own receptor.'
            ]
        ],

    Hbox :
        [
        name: 'recbox', extendH: 1,
        FSBText :
            [
            name: 'recdb', len: 40, extendH: 1, title: 'Receptor DB:',
            mode: 'open', allowBlank: 0,
            bubbleHelp:
                'The name of the input database that holds\n'
                'the receptors.'
            ],
        Button : [ name: 'browse_recdb', text: 'Browse...' ]
        ],

    Hbox :
        [
        name: 'posebox', extendH: 1,
        FSBText :
            [
            name: 'posedb', len: 40, extendH: 1, title: 'Ligand/Pose DB:',
            mode: 'open', allowBlank: 0,
            bubbleHelp:
                'The name of the input database that holds\n'
                'the ligand poses (and possibly scores).'
            ],
        Button : [ name: 'browse_posedb', text: 'Browse...' ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1],

    Hbox :
        [
        Vbox :
            [
            extendH: 1, title: 'Molecule Tests:',
            Button :
                [
                name: 'performtests', text: 'Perform', extendH:1, 
                bubbleHelp:
                    'Perform the selected tests on the molecules\n'
                    'in the MOE Window and/or those stored in\n'
                    'the opened corresponding QMScore database.'
                ]
            ],
        Separator : 
            [
            vertical:0, shadow:'noline', extendH: 0, margin:1
            ],
        Mbox :
            [
            columns: 3, spacingH: 'medium',
            extendH: 1, name: 'moltests',
                Label :
                    [
                    font: 'mediumBold', text: 'Error:', 
                    bubbleHelp:
                        'These are tests for problems with the receptor(s)\n'
                        'and ligand(s) that will cause Divcon to fail.'
                    ],
                Checkbox :
                    [
                    name: 'testLP', text: 'Lone Pairs',
                    bubbleHelp:
                        'Check to ensure that there are no lone pairs\n'
                        '(often the result of MOE misparsing a PDB file).'
                    ],
                Checkbox :
                    [
                    name: 'testOverlap', text: 'Atom Overlap',
                    bubbleHelp:
                        'Check to ensure that there are no\n'
                        'overlapping atoms (this can be time consuming).'
                    ],
                Label :
                    [
                    font: 'mediumBold', text: 'Warning:',
                    bubbleHelp:
                        'These are tests for problems with the receptor(s) and\n'
                        'ligand(s) that may or may not cause Divcon to fail,\n'
                        'but the results will probably be questionable.'
                    ],
                Checkbox :
                    [
                    name: 'testH', text: 'Missing/Extra H',
                    bubbleHelp:
                        'Check to ensure that there are no missing or\n'
                        'extra H (e.g., truncated residue, C=OH, etc.).'
                    ],
                Checkbox :
                    [
                    name: 'testMM', text: 'No MM Type',
                    bubbleHelp:
                        'Check to ensure that all atoms\n'
                        'have a defined MM atom type.'
                    ]
            ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1],
    Hbox :
        [
        extendH: 1, title: 'Charges:',
        Vbox :
            [
            Button :
                [
                name: 'calcchg', text: 'Calculate', extendH:1, 
                bubbleHelp:
                    'Calculate the total charges for the receptor\n'
                    'and ligand in the MOE Window.'
                ],
            Button :
                [
                name: 'ckdbchg', text: 'Check', extendH:1, 
                bubbleHelp:
                    'Check the charges stored in the "Rec Chg"\n'
                    'and "Lig Chg" fields of the QMScore database.'
                ]
            ],
        Separator : 
            [
            vertical:0, shadow:'noline', extendH: 0, margin:1
            ],
        Vbox :
            [
            name: 'chgbox',
            Hbox :
                [
                extendH: 1,
                Label :
                    [
                    name: 'recflg', title: 'Receptor:',
                    bubbleHelp:
                        'Problems with the total charge of receptor?\n'
                        '   White:   uncalculated or user-entered charge.\n'
                        '   Green:   charge calculated by MOE.\n'
                        '   Red:      charge problematic for Divcon.'
                    ],
                Text :
                    [
                    name: 'recchg', allowBlank: 0,
                    type: 'int', minWidth: 4,
                    onTrigger: 'validate',
                    bubbleHelp:
                        'Total charge of receptor.'
                    ]
                ],
            Hbox :
                [
                extendH: 1,
                Label :
                    [
                    name: 'ligflg', title: 'Ligand:',
                        bubbleHelp:
                        'Problems with the total charge of ligand?\n'
                        '   White:   uncalculated or user-entered charge.\n'
                        '   Green:   charge calculated by MOE.\n'
                        '   Yellow:  MOE\'s charge was adjusted.\n'
                        '   Red:      charge problematic for Divcon.'

                    ],
                Text :
                    [
                    name: 'ligchg', allowBlank: 0,
                    type: 'int', minWidth: 4, extendH: 1,
                    onTrigger: 'validate',
                    bubbleHelp:
                        'Total charge of ligand.'
                    ],
                Checkbox :
                    [
                    name: 'poseschg', text: 'All Poses',
                    bubbleHelp:
                        'Use the ligand charge for all\n'
                        'poses in the poses database.'
                    ]
                ]
            ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1]
    ];

//***********************  Local Functions  *********************************

function SplitComplex;

/****************************************************************************
 *                          AtomsToMols
 *
 *  Given the set of atoms in the MOE Window, identify and separate the
 *  ligand and the receptor atoms.  Returns the extracted molecules.
 *
 ****************************************************************************/
local function AtomsToMols []

    local [recatoms, ligatoms, errmess] = SplitComplex [];

    if recatoms === [] or ligatoms === [] then
        return [[], [], errmess];
    endif

    local ligmol = mol_Extract ligatoms;
    local recmol = mol_Extract recatoms;

    return [recmol, ligmol, ''];

endfunction

/****************************************************************************
 *                          CalcCharge
 *
 *  Determine the total charge of the molecule collection represented by 
 * the set of atoms.
 *
 ****************************************************************************/
local function CalcCharge [atoms]

    local charge = add aFCharge atoms;

    return charge;
endfunction

function ChargeOK;

/****************************************************************************
 *                          CalcComplexCharge
 *
 *  Determine the total charge of the ligand and receptor in the MOE window.
 *
 ****************************************************************************/
local function CalcComplexCharge []

    local [recatoms, ligatoms, errmess] = SplitComplex [];
    if recatoms === [] or ligatoms === [] then
        return  [[], [], [], [], errmess];
    endif

    local recchg = CalcCharge [recatoms];
    local ligchg = CalcCharge [ligatoms];

    local recok = ChargeOK [recatoms, recchg];
    local ligok = ChargeOK [ligatoms, ligchg];

    return [recchg, recok, ligchg, ligok, ''];

endfunction

/****************************************************************************
 *                          ChargeOK
 *
 *  Determine whether the given total charge of the molecule collection 
 *  represented by the set of atoms will result in a system with an even
 *  number of electrons.
 *
 ****************************************************************************/
local function ChargeOK [atoms, charge]

    local numelecs = add aAtomicNumber atoms;
    return even (charge + numelecs);

endfunction

function CheckComplexCharge;
function SetChargeStatus;

/****************************************************************************
 *                          CheckCharge
 *
 *  Check user-defined charges for even number of electrons.
 *
 ****************************************************************************/
local function CheckCharge [wkey, status, recchg, ligchg, warn]

    local [recok, ligok, errmess] = CheckComplexCharge [recchg, ligchg];
    if recok === [] or ligok === [] then
        if warn then
            Warning errmess;
        endif

        SetChargeStatus [wkey, status];
        return status;
    endif

    if recok then
        if status.calcchg and recchg === status.moerecchg then
          status.recchg = 2;
        else
          status.recchg = 1;
        endif

    else
        status.recchg = 3;
    endif

    if ligok then
        if status.calcchg and ligchg === status.moeligchg then
            status.ligchg = 2;
        else
            status.ligchg = 1;
        endif
    else
        status.ligchg = 3;
    endif

    SetChargeStatus [wkey, status];
    return status;
endfunction

/****************************************************************************
 *                          CheckComplexCharge
 *
 *  Determine whether the given total charges of the ligand and receptor
 *  in the MOE window will result in systems with an even number of electrons.
 *
 ****************************************************************************/
local function CheckComplexCharge [recchg, ligchg]

    local [recatoms, ligatoms, errmess] = SplitComplex [];
    if recatoms === [] or ligatoms === [] then
        return  [[], [], errmess];
    endif

    local recok = ChargeOK [recatoms, recchg];
    local ligok = ChargeOK [ligatoms, ligchg];

    return [recok, ligok, ''];

endfunction

function qb_CheckDivconLig;
function qb_CheckDivconRec;
function qb_GetEnvTag;
function qb_GetStatusFlags;
function qb_GetPoseFields;
function qb_GetRecFields;
function qb_GetWhich;
function qb_SaveDivconStatus;

/****************************************************************************
 *                          CheckDBMols
 *
 *  Check the molecules and their charges stored in the Score
 *  Database and store their status in the Status field.
 *
 *  Note:  this only checks the receptors and ligands in the molecule fields.
 *
 ****************************************************************************/
local function CheckDBMols [oldkey]

    if oldkey === 0 then
        Warning 'The MOEDivcon database hasn\'t been created.';
        return;
    endif

    local dblist = dbv_KeyList [];
    if isnull dblist or isnull indexof [oldkey, dblist] then
        Warning 'The MOEDivcon database isn\'t open.';
        return;
    endif

    local dbkey = db_Open [oldkey, 'read-write'];
    local coreopts = qb_GetEnvTag [dbkey, COREOPTS];
    local rowkey = 0;
    local recflds = qb_GetRecFields [dbkey];
    local ligflds = qb_GetPoseFields [dbkey];

    while rowkey = db_NextEntry [dbkey, rowkey] loop
        local recok = 1, recchgok = 1, recmess = '';
        local [ligmol, ligchg] = db_ReadFields [dbkey, rowkey, ligflds];
        local [ligok, ligchgok, ligmess] = qb_CheckDivconLig [ligmol, ligchg];
        if coreopts.mode === 'Many-to-Many' then
            local [recmol, recchg] = db_ReadFields [dbkey, rowkey,
                recflds];
            [recok, recchgok, recmess] = qb_CheckDivconRec [recmol, recchg];
        endif

        if alltrue [recok, recchgok, ligok, ligchgok] then
            local [oldstatus] = db_ReadFields [dbkey, rowkey, STATUS_FIELD];
            if not isnull oldstatus then
                qb_SaveDivconStatus [dbkey, rowkey,
                    "Everything is compatible with Divcon.\n"];
            endif
        else
            local errmess = "";
            local submess = tok_cat [recmess, ligmess];
            if not alltrue [recok, ligok] then
                errmess = cat [errmess, 
                    swrite ['Warning:  Problematic molecule in {}.\n', 
                    qb_GetWhich [not recok, not ligok]]];
                if tok_length submess > 0 then
                    errmess = cat [errmess, swrite ['{}\n', submess]];
                endif
            endif

            if not alltrue [recchgok, ligchgok] then
                errmess =  cat [errmess, 
                    swrite ['Warning:  Problematic charge for {}.\n', 
                    qb_GetWhich [not recchgok, not ligchgok]]];
                if tok_length submess > 0 then
                    errmess = cat [errmess, swrite ['{}\n', submess]];
                endif
            endif

            qb_SaveDivconStatus [dbkey, rowkey, errmess];
        endif
    endloop

    db_Close dbkey;
endfunction

function DrawChgStatus;

/****************************************************************************
 *                          ClearChargeStatus
 *
 *  Clear charge status.
 *
 ****************************************************************************/
local function ClearChargeStatus [wkey]

    local ligkey = DrawChgStatus [1];
    local reckey = DrawChgStatus [1];

    WindowSetAttr [wkey, [ligflg: [graphics: ligkey],
        recflg: [graphics: reckey]]];
    
    gr_destroy ligkey;
    gr_destroy reckey;

endfunction

function qb_GetEnvTag;
function GetStatusMessage;
function SingleMol;

/****************************************************************************
 *                          CopyPoseDB
 *
 *  Copy the Poses database into the QMScore output database.
 *
 ****************************************************************************/
local function CopyPoseDB [resultskey, poseskey]

    local mess = '';
    local [fields, ftypes] = db_Fields poseskey;
    local molfield = fields | (ftypes == 'molecule');

    if 1 <> length molfield then
        mess = 'The poses database has\n'
            'more than one molecule field.';
        return mess;
    endif

    local status = qb_GetEnvTag [resultskey, STATUS];
    local coreopts = qb_GetEnvTag [resultskey, COREOPTS];

    //  Check receptor charge
    local recmess = GetStatusMessage ['Receptor', neL [status.recchg, 3]];

    //  HACK alert:  temporarily renames mol field to make copying easier
    db_RenameField [resultskey, POSE_FIELD, molfield];
    apt db_EnsureField [resultskey,  fields, ftypes];

    local [osys, nsys] = SystemPush [];

    local rowkey = 0, stsmess = "";
    while rowkey = db_NextEntry [poseskey, rowkey] loop
        local rowdata = db_Read [poseskey, rowkey];
        local chgdata;
        if coreopts.poseschg then
            stsmess = cat [recmess, GetStatusMessage ['Ligand',
                neL [status.ligchg, 3]]];
            chgdata = tag [[LIGCHG_FIELD], [coreopts.ligchg]];
        else
            local ligmol = tagpeek [rowdata, molfield];
            local ligch = mol_Create ligmol;
            local ligatms = cat cAtoms ligch;
            local charge = 0;

            if not SingleMol [ligatms] then
                stsmess = cat [recmess, 
                    'Warning:  Ligand must to be a single molecule.\n'];
            else
                charge = CalcCharge [ligatms];
                local chgok = ChargeOK [ligatms, charge];
                stsmess = cat [recmess, GetStatusMessage ['Ligand', chgok]];
            endif

            chgdata = tag [[LIGCHG_FIELD], [charge]];
            oDestroy ligch;
        endif

        rowdata = cat [chgdata, rowdata];
        local resultrowkey = db_Write [resultskey, 0, rowdata];
        if not isnull stsmess then
            qb_SaveDivconStatus [resultskey, resultrowkey, stsmess];
        endif
    endloop

    SystemPop [osys, nsys];

    db_RenameField [resultskey, molfield, POSE_FIELD];

    return mess;
endfunction

/****************************************************************************
 *                          CopyRecPoseDB
 *
 *  Copy the Receptors and Poses databases into the QMScore output database.
 *
 *  HACK alert:  temporarily renames mol fields to make copying easier.
 *
 ****************************************************************************/
local function CopyRecPoseDB [resultskey, recskey, poseskey]

    local mess = '';
    if db_nEntries recskey <> db_nEntries poseskey then
        mess = 'The receptor and pose databases\n'
            'have different number of entries.';
        return mess;
    endif

    local [recfields, recftypes] = db_Fields recskey;
    local recmolfield = recfields | (recftypes == 'molecule');
    if 1 <> length recmolfield then
        mess = 'The receptor database has\n'
            'more than one molecule field.';
        return mess;
    endif

    local [posefields, poseftypes] = db_Fields poseskey;
    local posemolfield = posefields | (poseftypes == 'molecule');
    if 1 <> length posemolfield then
        mess = 'The pose database has\n'
            'more than one molecule field.';
        return mess;
    endif

    db_RenameField [resultskey, REC_FIELD, recmolfield];
    apt db_EnsureField [resultskey, recfields, recftypes];

    if not MOE_BATCH then
        local [osys, nsys] = SystemPush [];
    endif

    local recrowkey = 0, recmsgs = [], stsmess = "";
    while recrowkey = db_NextEntry [recskey, recrowkey] loop
        local recrowdata = db_Read [recskey, recrowkey];
        local recmol = tagpeek [recrowdata, recmolfield];
        local recchs = mol_Create recmol;
        local recatms = cat cAtoms recchs;
        local recchg = CalcCharge [recatms];
        local recok = ChargeOK [recatms, recchg];
        stsmess = GetStatusMessage ['Receptor', recok];
        recmsgs = append [recmsgs, stsmess];
        local recchgdata = tag [[RECCHG_FIELD], [recchg]];
        recrowdata = cat [recchgdata, recrowdata];
        db_Write [resultskey, 0, recrowdata];
        oDestroy recchs;
    endloop

    db_RenameField [resultskey, recmolfield, REC_FIELD];

    db_RenameField [resultskey, POSE_FIELD, posemolfield];
    apt db_EnsureField [resultskey, posefields, poseftypes];

    local poserowkey = 0, resultrowkey = 0, ith = 1;
    while poserowkey = db_NextEntry [poseskey, poserowkey] loop
        resultrowkey = db_NextEntry [resultskey, resultrowkey];
        local poserowdata = db_Read [poseskey, poserowkey];
        local posemol = tagpeek [poserowdata, posemolfield];
        local posech = mol_Create posemol;
        local poseatms = cat cAtoms posech;
        local posechg = 0;
        if not SingleMol [poseatms] then
            stsmess = cat [recmsgs(ith), 
                'Warning:  Ligand must to be a single molecule.\n'];
        else
            posechg = CalcCharge [poseatms];
            local poseok = ChargeOK [poseatms, posechg];
            stsmess = cat [recmsgs(ith), GetStatusMessage ['Pose', poseok]];
        endif

        local posechgdata = tag [[LIGCHG_FIELD], [posechg]];
        poserowdata = cat [posechgdata, poserowdata];
        db_Write [resultskey, resultrowkey, poserowdata];
        if not isnull stsmess then
            qb_SaveDivconStatus [resultskey, resultrowkey, stsmess];
        endif
        oDestroy posech;
        ith = ith + 1;
    endloop

    db_RenameField [resultskey, posemolfield, POSE_FIELD];

    if not MOE_BATCH then
        SystemPop [osys, nsys];
    endif

    return mess;
endfunction

/****************************************************************************
 *                          DrawChgStatus
 *
 *  Return the graphics key for the status label.
 *  NOTE:  calling function should call gr_destroy on key after using it.
 *
 ****************************************************************************/
local function DrawChgStatus [cidx]
    local color = CHG_COLOR (cidx);
    local key = gr_create [title: 'status', size: [13, 13], units: 'pt'];
    gr_oval [key, [0, [6,6], [6,6], icolor color, 1, icolor color]];
    return key;
endfunction

/****************************************************************************
 *                          GetStatusMessage
 *
 *  Return a string message describing the charge status.
 *
 ****************************************************************************/
local function GetStatusMessage [which, ok]

    local mess = "";

    if not ok then
        mess = swrite ['Warning:  Problematic charge for {}.\n', which];
    endif

    return mess;

endfunction

/****************************************************************************
 *                          SaveEnv
 *
 *  Save the molecules (ligand and receptor) and options in the 
 *  database.
 *
 ****************************************************************************/
local function SaveEnv [dbkey, tgtmols, ligmol, status, coreopts, appopts,
        complex, type]

    db_SetEnv [dbkey, RECEPTOR, twrite ['{v}', tgtmols]];
    db_SetEnv [dbkey, LIGAND, twrite ['{v}', ligmol]];
    db_SetEnv [dbkey, STATUS, twrite ['{v}', status]];
    db_SetEnv [dbkey, COREOPTS, twrite ['{v}', coreopts]];
    db_SetEnv [dbkey, APPOPTS, twrite ['{v}', appopts]];
    db_SetEnv [dbkey, COMPLEX, twrite ['{v}', complex]];

    if type === 'nmrscore' then
        db_SetEnv [dbkey, DBTYPE, NMRSCORE];
    elseif type === 'qmscore' then
        db_SetEnv [dbkey, DBTYPE, QMSCORE];
    endif

endfunction

/****************************************************************************
 *                          SetChargeStatus
 *
 *  Set charge status label.
 *
 ****************************************************************************/
local function SetChargeStatus [wkey, status]

    local ligkey = DrawChgStatus [status.ligchg];
    local reckey = DrawChgStatus [status.recchg];

    WindowSetAttr [wkey, [ligflg: [graphics: ligkey],
        recflg: [graphics: reckey]]];
    
    gr_destroy ligkey;
    gr_destroy reckey;

endfunction

/****************************************************************************
 *                          SetScoreFields
 *
 *  Ensure that the required fields are present.
 *
 ****************************************************************************/
local function SetScoreFields [dbkey, addreceptor, fields, dbtype]

    if addreceptor then
        db_EnsureField [dbkey, REC_FIELD, 'molecule'];
        db_EnsureField [dbkey, RECCHG_FIELD, 'int'];
    endif

    db_EnsureField [dbkey, POSE_FIELD, 'molecule'];
    db_EnsureField [dbkey, LIGCHG_FIELD, 'int'];
    db_EnsureField [dbkey, STATUS_FIELD, 'char'];

    if neL [fields, []] then
        apt db_EnsureField [dbkey, fields, 'double'];
    endif

endfunction

/****************************************************************************
 *                          SingleMol
 *
 *  Does the atom set represent a single molecule?
 *
 ****************************************************************************/
local function SingleMol [atoms]
    return 1 === length uniq aMoleculeNumber atoms;
endfunction

/****************************************************************************
 *                          SplitComplex
 *
 *  Split the set of atoms in the MOE Window into ligand and receptor atoms.
 *
 ****************************************************************************/
local function SplitComplex []

    local complexatoms = Atoms [];
    if length complexatoms === 0 then
        return [[], [], 'No molecular complex loaded in MOE Window.'];
    endif

    const COLLECTNAMES = ['QB_LIGAND', 'LIGX_LIGAND'];
    local recatoms, ligatoms;
    local cname, makecoll = 0;

    local colnames = oCollections [];
    for cname in COLLECTNAMES loop
        if anytrue eqE [cname, colnames] then
            ligatoms  = cat oAtoms oGetCollection cname;
            ligatoms = join [ligatoms, complexatoms];
            break;
        endif
    endloop

    if length ligatoms === 0 then
        ligatoms  = _Atoms '$$ligand';
        makecoll = 1;
    endif

    if length ligatoms === 0 or length ligatoms >= length complexatoms then
        return [[], [], 'No ligand was recognized.\n  Use LigX to define it.'];
    endif

    if not SingleMol [ligatoms] then
        return [[], [], 'Ligand must to be a single molecule.'];
    endif

    if makecoll then
        oSetCollection ['QB_LIGAND', ligatoms];
     endif

    recatoms = diff [complexatoms, ligatoms];

    return [recatoms, ligatoms, ''];

endfunction

/****************************************************************************
 *                          SplitReceptor
 *
 *  Given a set of receptor atoms, returns subsets which represent
 *  individual molecules (connected pieces) in the receptor.
 *
 ****************************************************************************/
local function SplitReceptor [receptoratoms]

    if receptoratoms === [] then return []; endif

    local atomsets = [];
    local [recidx, reccnt] = sac aMoleculeNumber receptoratoms;
    if length reccnt > 1 then
        receptoratoms = receptoratoms [recidx];
        atomsets = split [receptoratoms, reccnt];
    else
        atomsets = [receptoratoms];
    endif

    return atomsets;

endfunction

/****************************************************************************
 *                          UpdateCharge
 *
 *  Update the window based on new charge.
 *
 ****************************************************************************/
local function UpdateCharge [wkey, status, warn]

    local [recchg, recok, ligchg, ligok, errmess] = CalcComplexCharge [];
    if (recchg === [] or recok === [] or ligchg === [] or ligok === []) then
        if warn then
            Warning  errmess;
        endif

        SetChargeStatus [wkey, status];
        return status;
    endif

    status.calcchg = 1;
    status.moerecchg = recchg;
    status.moeligchg = ligchg;

    status.recchg = select [2, 3, recok];
    status.ligchg = select [2, 3, ligok];

    WindowSetData [wkey, [ligchg: ligchg, recchg: recchg]];
    SetChargeStatus [wkey, status];

    return status;
endfunction

/****************************************************************************
 *                          UpdateCWD
 *
 *  Update the window based on new CWD value.
 *
 ****************************************************************************/
local function UpdateCWD [wkey, cwd, wd, prev]
    if cwd === 1 then
        WindowSetAttr [wkey, [workdir: [sensitive: 0, allowBlank: 1]]];
        WindowSetData [wkey, [workdir: '']];
        return wd;
    else
        WindowSetAttr [wkey, [workdir: [sensitive: 1, allowBlank: 0]]];
        WindowSetData [wkey, [workdir: prev]];
        return prev;
    endif
endfunction

/****************************************************************************
 *                          UpdateMode
 *
 *  Update the window based on new mode value.
 *
 ****************************************************************************/
local function UpdateMode [wkey, mode, status]
    if mode === 'One-to-One' then
        WindowSetAttr [wkey, [
            recbox: [sensitive: 0], recdb: [allowBlank: 1], 
            posebox: [sensitive: 0], posedb: [allowBlank: 1], 
            panel:[sensitive: [1,1,1,1]], calcchg: [sensitive: 1],
            chgbox: [sensitive: 1], recchg: [allowBlank: 0],
            ligchg: [allowBlank: 0], poseschg: [sensitive: 0]]];
        SetChargeStatus [wkey, status];
    elseif mode === 'One-to-Many' then
        WindowSetAttr [wkey, [
            recbox: [sensitive: 0], recdb: [allowBlank: 1],
            posebox: [sensitive: 1], posedb: [allowBlank: 0],
            panel:[sensitive: [0,1,1,1]], calcchg: [sensitive: 1],
            chgbox: [sensitive: 1], recchg: [allowBlank: 0],
            ligchg: [allowBlank: 0],
            poseschg: [sensitive: 1]]];
        SetChargeStatus [wkey, status];
    elseif mode === 'Many-to-Many' then
        WindowSetAttr [wkey, [
            recbox: [sensitive: 1], recdb: [allowBlank: 0],
            posebox: [sensitive: 1], posedb: [allowBlank: 0],
            panel:[sensitive: [0,1,1,1]], calcchg: [sensitive: 0],
            chgbox: [sensitive: 0], recchg: [allowBlank: 1],
            ligchg: [allowBlank: 1],
            poseschg: [sensitive: 0]]];
        ClearChargeStatus [wkey];
    endif
endfunction

//************************  Global Functions  *******************************

/****************************************************************************
 *                          qb_CheckDivconLig
 *
 *  Determine whether the ligand and its total charge is problematic
 *  for Divcon.
 *
 ****************************************************************************/
global function qb_CheckDivconLig [ligmol, ligchg]

    if not MOE_BATCH then
        local [osys, nsys] = SystemPush [];
    endif

    local mess = '';
    local ligchn = mol_Create ligmol;
    local ligatms = cat cAtoms ligchn;
    local ligok = SingleMol [ligatms];
    if not ligok then
        mess = 'Ligand must be a single molecule.';
    endif

    local ligchgok = ChargeOK [ligatms, ligchg];
    oDestroy ligchn;

    if not MOE_BATCH then
        SystemPop [osys, nsys];
    endif

    return [ligok, ligchgok, mess];

endfunction

/****************************************************************************
 *                          qb_CheckDivconMols
 *
 *  Determine whether the given molecules and their total charges are
 *  problematic for Divcon.  Return the receptor collection separated
 *  into individual molecules to be compatible with Divcon's backbone.
 *
 ****************************************************************************/
global function qb_CheckDivconMols [recmol, recchg, ligmol, ligchg]

    if not MOE_BATCH then
        local [osys, nsys] = SystemPush [];
    endif

    local mess = '';
    local recchns = mol_Create recmol;
    local recatms = cat cAtoms recchns;
    local recatmsets = SplitReceptor [recatms];
    local recmolset = app mol_Extract recatmsets;
    local recok = 1;                             // Future receptor test?
    if not recok then
        mess = 'Receptor is bad, bad, bad.';
    endif

    local recchgok = ChargeOK [recatms, recchg];
    oDestroy recchns;

    local ligchn = mol_Create ligmol;
    local ligatms = cat cAtoms ligchn;
    local ligok = SingleMol [ligatms];
    if not ligok then
        mess = tok_cat [mess, 'Ligand must be a single molecule.'];
    endif

    local ligchgok = ChargeOK [ligatms, ligchg];
    oDestroy ligchn;

    if not MOE_BATCH then
        SystemPop [osys, nsys];
    endif

    return [recmolset, recok, recchgok, ligok, ligchgok, mess];

endfunction

/****************************************************************************
 *                          qb_CheckDivconRec
 *
 *  Determine whether the receptor and its total charge is problematic
 *  for Divcon.
 *
 ****************************************************************************/
global function qb_CheckDivconRec [recmol, recchg]

    if not MOE_BATCH then
        local [osys, nsys] = SystemPush [];
    endif

    local mess = '';
    local recchns = mol_Create recmol;
    local recatms = cat cAtoms recchns;
    local recok = 1;                             // Future receptor test?
    if not recok then
        mess = 'Receptor is bad, bad, bad.';
    endif

    local recchgok = ChargeOK [recatms, recchg];
    oDestroy recchns;

    if not MOE_BATCH then
        SystemPop [osys, nsys];
    endif

    return [recok, recchgok, mess];

endfunction

/****************************************************************************
 *
 *                          qb_CoreHandler
 *
 *  Handle the triggers of the core panel.
 *
 ****************************************************************************/
global function qb_CoreHandler [wkey, trig, status, vals, btasks, dbkey]

    local btid;
    if trig === 'mode' then
        UpdateMode [wkey, vals.mode, status];

    elseif trig === 'cwd' then
        status.prevwd = UpdateCWD [wkey, vals.cwd, vals.workdir,
            status.prevwd];

    elseif trig === 'performtests' then
        if allfalse [vals.testLP, vals.testOverlap, vals.testH, vals.testMM] then
            Warning 'No tests selected.';
        elseif second task_fork [master: 'parent',
                statics:'share'] === 'child' then
            task_prio 0;

            if neL [vals.mode, 'Many-to-Many'] then
            endif

            exit [];
        endif

    elseif trig === 'calcchg' then
        if second task_fork [master: 'parent',
                statics:'share'] === 'child' then
            task_prio 0;

            status = UpdateCharge [wkey, status, 1];
            exit [];
        endif

    elseif trig === 'ckdbchg' then
        if second task_fork [master: 'parent',
                statics:'share'] === 'child' then
            task_prio 0;

            CheckDBMols [dbkey];
            exit [];
        endif

    elseif trig === 'recchg' then
        if second task_fork [master: 'parent', 
                statics:'share'] === 'child' then
            task_prio 0;

            status = CheckCharge [wkey, status, vals.recchg,
                vals.ligchg];
            exit [];
        endif

    elseif trig === 'ligchg' then
        if second task_fork [master: 'parent',
                statics:'share'] === 'child' then
            task_prio 0;

            status = CheckCharge [wkey, status, vals.recchg,
                vals.ligchg];
            exit [];
        endif

    elseif trig === 'browse_scoredb' then
        btid = run ['fbrowse.svl', [trig, wkey, 'Select QMScore DB File', 
            'none', '*.mdb', 'scoredb']];
        if btid then btasks = append [btasks, btid]; endif

    elseif trig === 'browse_recdb' then
        btid = run ['fbrowse.svl', [trig, wkey, 'Select Receptor DB File', 
            'open', '*.mdb', 'recdb']];
        if btid then btasks = append [btasks, btid]; endif

    elseif trig === 'browse_posedb' then
        btid = run ['fbrowse.svl', [trig, wkey, 'Select Pose DB File', 
            'open', '*.mdb', 'posedb']];
        if btid then btasks = append [btasks, btid]; endif
    endif

    return [status, btasks];
endfunction

/****************************************************************************
 *                          qb_CutReceptor
 *
 *  Given a pose database and radius, find all receptor atoms of the current
 *  complex in the MOE window that are within the radius distance from each
 *  pose, expand those atoms out to their respective residues, and return
 *  the "molecules" formed by those atoms.
 *
 ****************************************************************************/
global function qb_CutReceptor [posedbkey, radius]

    if radius <= 0.0 then
        return [[], [], 'Radius must be greater than zero.'];
    endif

    local [recatoms, ligatoms, errmess] = SplitComplex [];

    if recatoms === [] or ligatoms === [] then
        return [[], [], errmess];
    endif

    //  Find neighboring atoms within radius
    local cutset = [];
    local subset;
    for subset in split [x_id recatoms, 50] loop
        local key = prox_open [radius, aPos recatoms[subset], radius/2];
        local cutidx = uniq second prox_find [key, aPos ligatoms, radius/2];
        prox_close key;
        cutset = cat [cutset, subset[cutidx]];
    endloop

    if length cutset === 0 then
        return [[], [], twrite ['No receptor atoms within radius {n:.1f}\n'
            'of the ligand pose atoms.', radius]];
    endif

    local cutatoms = recatoms [cutset];

    print aMoleculeNumber cutatoms;  //DEBUG

    local residues = uniq oParent (cutatoms);
    local resatoms = cat oChildren residues;

    print aMoleculeNumber resatoms;  //DEBUG

    local delatoms = diff [recatoms, resatoms];
    local delresidues = uniq oParent delatoms;
    oDestroy delatoms;
    delresidues = delresidues | rAtomCount delresidues == 0;
    local delchains = uniq oParent delresidues;
    oDestroy delresidues;
    delchains = delchains | cResidueCount delchains == 0;
    oDestroy delchains;

	Add_H (resatoms | aLonePairs resatoms <= 0);
	Add_HLP (resatoms | aLonePairs resatoms > 0);

    print aMoleculeNumber resatoms;  //DEBUG

    local ligmol = mol_Extract ligatoms;
    local recmol = mol_Extract resatoms;

    return [recmol, ligmol, ''];

endfunction

/****************************************************************************
 *
 *                          qb_GetCorePanel
 *
 *  Returns the vector defining the core panel.
 *
 ****************************************************************************/
global function qb_GetCorePanel []
    return CORE_PANEL;
endfunction

/****************************************************************************
 *                          qb_GetDefaultsCore
 *
 *  Return the default values for the GUI core.
 *
 ****************************************************************************/
global function qb_GetDefaultsCore []
    return dropfirst tag tr CORE_OPT_DEFAULTS;
endfunction

/****************************************************************************
 *                          qb_GetDefaultsStatus
 *
 *  Return the default values for the GUI status.
 *
 ****************************************************************************/
global function qb_GetDefaultsStatus []
    return tag tr STATUS_DEFAULTS;
endfunction

/****************************************************************************
 *                          qb_GetEnvApp
 *
 *  Get the environment value for the application options.
 *
 ****************************************************************************/
global function qb_GetEnvApp [dbkey]

    local tagtok = db_GetEnv [dbkey, APPOPTS];
    local [[tagval]] = sread [string tagtok, '{v}'];

    return tagval;
endfunction

/****************************************************************************
 *                          qb_GetEnvTag
 *
 *  Get the environment value for the given tag.
 *
 ****************************************************************************/
global function qb_GetEnvTag [dbkey, envtag]

    local tagtok = db_GetEnv [dbkey, envtag];
    local [[tagval]] = sread [string tagtok, '{v}'];

    return tagval;
endfunction

/****************************************************************************
 *                          qb_GetCoreEnv
 *
 *  Get the molecules (receptor, ligand and optional complex), the status,
 *  and the core options from the database.
 *
 ****************************************************************************/
global function qb_GetCoreEnv [dbkey]

    local recmol = qb_GetEnvTag [dbkey, RECEPTOR];
    local ligmol = qb_GetEnvTag [dbkey, LIGAND];
    local complex = qb_GetEnvTag [dbkey, COMPLEX];

    local status = qb_GetEnvTag [dbkey, STATUS];
    status = tagcat [status, tag tr STATUS_DEFAULTS];

    local coreopts = qb_GetEnvTag [dbkey, COREOPTS];
    coreopts = tagcat [coreopts, tag tr CORE_OPT_DEFAULTS];

    return [recmol, ligmol, status, coreopts, complex];

endfunction

/****************************************************************************
 *                          qb_GetLigandAtoms
 *
 *  Get the atoms of the ligand in the MOE Window.
 *
 ****************************************************************************/
global function qb_GetLigandAtoms []
    local [r, ligatms, errmess] = SplitComplex [];

    return [ligatms, errmess];
endfunction

/****************************************************************************
 *                          qb_GetLigandAtomsIndices
 *
 *  For the complex in the MOE Window, get the ligand atoms
 *  and the indices of the given element.
 *
 *  Note:  it is assumed that this function is called from a child process
 *  and will exit on an error.
 *
 ****************************************************************************/
global function qb_GetLigandAtomsIndices [elem]
    local [atoms, errmess] = qb_GetLigandAtoms [];
    if atoms === [] then
        if MOE_BATCH then
            write ['Error:  {}\n', errmess];
        else
            Warning errmess;
        endif
        exit [];
    endif

    local [atomindices] = indicesof [elem, aElement atoms];

    return [atoms, atomindices];
endfunction

/****************************************************************************
 *                          qb_GetPoseFields
 *
 ****************************************************************************/
global function qb_GetPoseFields []

    return [POSE_FIELD, LIGCHG_FIELD];

endfunction

/****************************************************************************
 *                          qb_GetRecFields
 *
 ****************************************************************************/
global function qb_GetRecFields []

    return [REC_FIELD, RECCHG_FIELD];

endfunction

/****************************************************************************
 *                          qb_GetWhich
 *
 *  Return a token message describing which molecules are faulty.
 *
 ****************************************************************************/
global function qb_GetWhich [recbad, ligbad]
    local which = '';
    if recbad and ligbad then
        which = 'receptor and ligand';
    elseif recbad then
        which = 'receptor';
    else
        which = 'ligand';
    endif

    return which;
endfunction

/****************************************************************************
 *
 *                          qb_InitCorePanel
 *
 *  Initialize the core panel window.
 *
 ****************************************************************************/
global function qb_InitCorePanel [wkey, status, defaults]
    status.prevwd = defaults.workdir;
    WindowSetData [wkey, dropfirst defaults];
    WindowSetAttr [wkey, [workdir: [sensitive: 1, allowBlank: 0],
        recbox: [sensitive: 0], recdb: [allowBlank: 1],
        posebox: [sensitive: 0], posedb: [allowBlank: 1],
        poseschg: [sensitive: 0]]];
    status = UpdateCharge [wkey, status, 0];

    return status;
endfunction

/****************************************************************************
 *                          qb_LoadCoreScoreDB
 *
 ****************************************************************************/
global function qb_LoadCoreScoreDB [dbpath, type]

    local dbkey = db_Open [dbpath, 'read-write'];
    local dbtype = db_GetEnv [dbkey, DBTYPE];

    if type === 'nmrscore' and neL [dbtype, NMRSCORE] then
        db_Close dbkey;
        return [0, [], [], [], [], [],
            twrite ['{}\nis not a NMRScore Database.', dbpath]];
    endif

    if type === 'qmscore' and neL [dbtype, QMSCORE] then
        db_Close dbkey;
        return [0, [], [], [], [], [],
            twrite ['{}\nis not a QMScore Database.', dbpath]];
    endif

    local [rec, lig, status, coreopts, complex] = qb_GetCoreEnv [dbkey];

    return [dbkey, rec, lig, status, coreopts, complex, ''];

endfunction

/****************************************************************************
 *                          qb_MergeDB
 *
 *  Perform a naive merge of the two databases (that is, assume the first
 *  row of data in srcname1 corresponds to the first row of data srcname2,
 *  etc.).  Only the fields are merged, the environment is ignored.
 *
 ****************************************************************************/
global function qb_MergeDB [srcname1, srcname2, dstname]

    local dstkey = db_Open [dstname, 'create'];
    local srckey1 = db_Open [srcname1, 'read'];
    local srckey2 = db_Open [srcname2, 'read'];
    local [fields1, ftypes1] = db_Fields srckey1;
    local [fields2, ftypes2] = db_Fields srckey2;

    apt db_EnsureField [dstkey,  fields1, ftypes1];
    apt db_EnsureField [dstkey,  fields2, ftypes2];

    local rowkey1 = 0, rowkey2 = 0;
    while (rowkey1 = db_NextEntry [srckey1, rowkey1])
        and (rowkey2 = db_NextEntry [srckey2, rowkey2]) loop
        local rowdata1 = db_Read [srckey1, rowkey1];
        local rowdata2 = db_Read [srckey2, rowkey2];
        db_Write [dstkey, 0, cat [rowdata1, rowdata2]];
    endloop

    db_Close dstkey;
    db_Close srckey1;
    db_Close srckey2;
endfunction


/****************************************************************************
 *                          qb_SaveDivconStatus
 *
 *  Save the error/status message for the given row.
 *
 ****************************************************************************/
global function qb_SaveDivconStatus [dbkey, rowkey, message]

    local sep = "------------------------------------------------------------\n";
    local [status] = db_ReadFields [dbkey, rowkey, [STATUS_FIELD]];
    message = cat [message, asctime [], "\n", sep, status];
    local fielddata = tag [STATUS_FIELD, [message]];
    db_Write [dbkey, rowkey, fielddata];

endfunction

/****************************************************************************
 *                          qb_SetUpScoreDB
 *
 *  Create the output database for storing Score results and ensure that
 *  the required fields are present.  Store the molecules and run options 
 *  in the DB environment.
 *
 *  Note:  it is assumed that this function is called from a child process
 *  and will exit on an error.
 *
 ****************************************************************************/
global function qb_SetUpScoreDB [status, coreopts, appopts, complex, fields,
        dbtype]

    local dbkey = db_Open [coreopts.scoredb, 'create'];
    SetScoreFields [dbkey, coreopts.mode === 'Many-to-Many', fields, dbtype];

    if coreopts.mode === 'One-to-One' or coreopts.mode === 'One-to-Many' then
        local [receptor, ligand, errmess] = AtomsToMols [];
        if receptor === [] or ligand === [] then
            Warning errmess;
            exit [];
        endif

        SaveEnv [dbkey, receptor, ligand, status, coreopts, appopts, complex, 
            dbtype];
    else
        SaveEnv [dbkey, [], [], status, coreopts, appopts, complex, dbtype];
    endif

    if coreopts.mode === 'One-to-One' then
        local posedata = tag [qb_GetPoseFields [], [ligand, coreopts.ligchg]];
        local stsmess = GetStatusMessage ['Receptor', 
            neL [status.recchg, 3]];
        stsmess = cat [stsmess, GetStatusMessage ['Ligand', 
            neL [status.ligchg, 3]]];
        local rowkey = db_Write [dbkey, 0, posedata];
        if not isnull stsmess then
            qb_SaveDivconStatus [dbkey, rowkey, stsmess];
        endif

    else
        local posekey = db_Open [coreopts.posedb, 'read'];
        if dbkey === posekey then
            Warning twrite ['{} and {}\n are the same database.', 
                coreopts.scoredb, coreopts.posedb];
            exit [];
        endif

        if coreopts.mode === 'One-to-Many' then
            local pmess = CopyPoseDB [dbkey, posekey];
            if neL [pmess, ''] then
                db_Close posekey;
                db_Close dbkey;
                Warning pmess;
                exit [];
            endif
        else
            local reckey = db_Open [coreopts.recdb, 'read'];
            if dbkey === reckey then
                Warning twrite ['{} and {}\n are the same database.', 
                    coreopts.scoredb, coreopts.recdb];
                exit [];
            endif

            local rmess = CopyRecPoseDB [dbkey, reckey, posekey];
            if neL [rmess, ''] then
                db_Close reckey;
                db_Close posekey;
                db_Close dbkey;
                Warning rmess;
                exit [];
            endif

            db_Close reckey;
        endif

        db_Close posekey;
    endif

    return dbkey;
endfunction

/****************************************************************************
 *
 *                          qb_TagCoreVals
 *
 *  Tag the values from the core panel window.
 *
 ****************************************************************************/
global function qb_TagCoreVals [vals]

    vals.scoredb = fabsname vals.scoredb;
    vals.recdb = select ['', fabsname vals.recdb, vals.recdb === ''];
    vals.posedb = select ['', fabsname vals.posedb, vals.posedb === ''];

    local coreopts = tag [first tr CORE_OPT_DEFAULTS, [
        second first CORE_OPT_DEFAULTS,
        vals.mode, vals.cwd, vals.workdir,
        vals.scoredb,  vals.recdb, vals.posedb,
        vals.testLP, vals.testOverlap,
        vals.testH, vals.testMM,
        vals.recchg, vals.ligchg, vals.poseschg]];

    return coreopts;
endfunction

/****************************************************************************
 *                          qb_TestDivcon
 *
 *  Determine whether the molecule represented by the set of atoms is
 *  problematic for Divcon.
 *
 *  Returns:
 *    0     Fail
 *    1     Warn
 *    2     Okay
 *
 *  H counts:  ignore amines (MOE treats terminal amines as ammonium cations).
 *
 ****************************************************************************/
global function qb_TestDivcon [atoms, lonepair, overlap, missextraH, MMtype]

    local warn = 0, error = 0, mess = '';
        local indices, residues, rnames, rnums, anames, ith; 
 
    local elements = aElement atoms;
    local ions = aIon atoms;

    //  Look for explicit lone pairs (MOE parsing errors)
    if lonepair then
        [indices] = indicesof [1, (elements == 'LP')];
        if length indices > 0 then
            residues = oParent atoms [indices];
            rnames = rName residues;
            rnums = rNumber residues;
            anames = aName atoms [indices];
            ith = 0; 
            mess = tok_cat [mess, 'Error!  LP atoms:\n'];
            for length indices loop
                ith = ith + 1;
                mess = tok_cat [mess, twrite ['    {}:  {} in {} {}\n', 
                    indices(ith), anames(ith), rnames(ith), rnums(ith)]];
            endloop

            error = 1;
        endif
    endif

    //  Look for overlapping atoms
    if overlap then
        indices = [];
        local atom, atm_i = 1;
        for atom in atoms loop
            local dists = aDist [atom, atoms];
            local [subindices] = indicesof [1, (dists < 0.5)];
            subindices = subindices | (subindices < atm_i);
            indices = cat [indices, cat apt cat [subindices, atm_i]];
            atm_i = atm_i + 1;
        endloop

        if length indices > 0 then
            residues = oParent atoms [indices];
            rnames = rName residues;
            rnums = rNumber residues;
            anames = aName atoms [indices];
            ith = 0; 
            mess = tok_cat [mess, 'Error!  Overlapping atoms:\n'];
            for ith = 1, length indices, 2 loop
                mess = tok_cat [mess, twrite ['    {}:  {} in {} {}'
                     ' with {}:  {} in {} {}\n', 
                    indices(ith), anames(ith), rnames(ith), rnums(ith),
                    indices(ith+1), anames(ith+1), rnames(ith+1),
                    rnums(ith+1)]];
            endloop

            error = 1;
        endif
    endif

    //  Look for missing/extra H
    if missextraH then
        local hcount = aHCount atoms;
        local explicit = aExplicitHCount atoms;
        [indices] = indicesof [1, (hcount <> explicit)
            and not ((elements == 'N') and (ions == 1)
            and (hcount - explicit == 1))];
        if length indices > 0 then
            residues = oParent atoms [indices];
            rnames = rName residues;
            rnums = rNumber residues;
            anames = aName atoms [indices];
            ith = 0; 
            mess = tok_cat [mess, 'Warning!  Check H on atoms:\n'];
            for length indices loop
                ith = ith + 1;
                mess = tok_cat [mess, twrite ['    {}:  {} in {} {}\n', 
                    indices(ith), anames(ith), rnames(ith), rnums(ith)]];
            endloop

            warn = 1;
        endif
    endif

    //  Look for unknown MM atom types
    if MMtype then
        local mmtypes = aMMType atoms;
        [indices] = indicesof [1, (mmtypes == '??')];
        if length indices > 0 then
            residues = oParent atoms [indices];
            rnames = rName residues;
            rnums = rNumber residues;
            anames = aName atoms [indices];
            ith = 0; 
            mess = tok_cat [mess, 'Warning!  Unknown MM types for atoms:\n'];
            for length indices loop
                ith = ith + 1;
                mess = tok_cat [mess, twrite ['    {}:  {} in {} {}\n', 
                    indices(ith), anames(ith), rnames(ith), rnums(ith)]];
            endloop

            warn = 1;
        endif
    endif

    if error then
        return [0, mess];
    elseif warn then
        return [1, mess];
    else
        return [2, ''];
    endif
endfunction

/****************************************************************************
 *
 *                          qb_UpdateCorePanel
 *
 *  Initialize the core panel window.
 *
 ****************************************************************************/
global function qb_UpdateCorePanel [wkey, status, coreopts]

    WindowSetData [wkey, dropfirst coreopts];
    status = CheckCharge [wkey, status, coreopts.recchg, coreopts.ligchg,
        neL [coreopts.mode, 'Many-to-Many']];
    UpdateMode [wkey, coreopts.mode, status];
    status.prevwd = UpdateCWD [wkey, coreopts.cwd, coreopts.workdir, 
        coreopts.workdir];

    return status;
endfunction

/****************************************************************************
 *                          qb_VerifyCharges
 *
 *  Verify with the user that the current charges should be used even if
 *  they are problematic for Divcon.
 *
 *  Assumption:  called from MOE gui, not moebatch.
 *
 *
 ****************************************************************************/
global function qb_VerifyCharges [wkey, status, vals]

    if vals.mode === 'Many-to-Many' then
        status.verifychg = 1;
        return status;
    endif

    status = CheckCharge [wkey, status, vals.recchg, vals.ligchg];
    if status.ligchg === 3 or status.recchg === 3 then
        local which = qb_GetWhich [status.recchg === 3, status.ligchg === 3];
        local ynmess = twrite [
            'Divcon is going to have problems\n'
            'with the {}.  Continue anyway?', which];
        if YesNo ynmess then
            status.verifychg = 1;
            return status;
        else
            status.verifychg = 0;
            return status;
        endif
    else
        status.verifychg = 1;
        return status;
    endif
endfunction

#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.
    
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

//    qbcore.svl    Core user-interface and utilities used by QB panels

#set title   'QuantumBio Core'
#set class   'QuantumBio'
#set version '2010.02'

function _Atoms;

//  Database Fields
const POSE_FIELD = 'Ligand/Pose';
const LIGCHG_FIELD = 'Lig Chg';

const REC_FIELD = 'Receptor';
const RECCHG_FIELD = 'Rec Chg';

const STATUS_FIELD = 'Status';

// Environment tags
const COMPLEX = 'complex';
const RECEPTOR = 'receptor';
const LIGAND = 'ligand';
const STATUS = 'status';
const COREOPTS = 'coreoptions';
const APPOPTS = 'applicationoptions';
const ANALOPTS = 'analysisoptions';

const DBTYPE = 'qb_dbtype';
const QMSCORE = 'qb_qmscoredb';
const NMRSCORE = 'qb_nmrscoredb';

const ANALYSIS = 'qb_analysistype';
const ANALPWD = 'qb_pwd';
const ANALPWDSAR = 'qb_pwdSAR';
const ANALPWDINTER = 'qb_pwdinteraction';
const ANALNMR = 'qb_nmr';
const ANALNMREXP = 'qb_nmrexperimental';

//  Charge status color
const CHG_COLOR = 
    [
    'white',
    'green',
    'red'
    ];

const STATUS_DEFAULTS =
    [
    ['dbkey',        0             ],
    ['allowmode',    [1,1,1]       ],
    ['prevwd',       ''            ],
    ['calcchg',      0             ],
    ['verified',     0             ],
    ['recchg',       1             ],
    ['ligchg',       1             ],
    ['moerecchg',    0             ],
    ['moeligchg',    0             ]
    ];

/*  NOTE:  Non-GUI opt task must be the first tag.  */
const CORE_OPT_DEFAULTS =
    [
    ['task',         0             ],
    ['mode',         'One-to-One'  ],
    ['cwd',          0             ],
    ['workdir',      '/tmp'        ],
    ['scoredb',      'qbscore.mdb' ],
    ['recdb',        ''            ],
    ['posedb',       ''            ],
    ['testLP',       1             ],
    ['testOverlap',  1             ],
    ['testH',        1             ],
    ['testMM',       1             ],
    ['recchg',       0             ],
    ['ligchg',       0             ],
    ['poseschg',     0             ]
    ];

const RUN_MODES =
    [
    'One-to-One',
    'One-to-Many',
    'Many-to-Many'
    ];

const CORE_PANEL =
    [
    Hbox :
        [
        extendH: 1,
        FSBText :
            [
            name: 'scoredb', len: 40, extendH: 1, title: 'Output DB:',
            mode: 'saveAs', allowBlank: 0,
            bubbleHelp:
                'The name of the output database that will hold\n'
                'the run paramaters and scoring results.'
            ],
        Button : [ name: 'browse_scoredb', text: 'Browse...' ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1],

    Hbox :
        [
        extendH: 1,
        Text :
            [
            name: 'workdir', len: 40, extendH: 1, title: 'Working Dir:',
            type: 'char', allowBlank: 0,
            shortcut: ['/tmp', '.', '~', '~/tmp', '/scratch'],
            bubbleHelp:
                'The name of the working directory for storing\n'
                'QB Divcon intermediate calculations and logs.\n'
                'The absolute path to the specified directory\n'
                'will be stored and used at execution time.'
            ],
        Separator : 
            [
            vertical:0, shadow:'noline', extendH: 0, margin:1
            ],
        Checkbox :
            [
            name: 'cwd', text: 'CWD', onTrigger: 'return', 
            bubbleHelp:
                'Set the current working directory using\n'
                'the run time environment variable $PWD.'
            ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1],

    Hbox :
        [
        Radio :
            [
            name: 'mode', text: RUN_MODES, columns: 3, minWidth: 12, 
            extendH: 1, onTrigger: 'return', title: 'Mapping Mode:',
            type: 'char',
            bubbleHelp:
                'The mapping mode of receptors to ligand/poses:\n'
                '  One ligand docked into one receptor.\n'
                '  Many ligand poses docked into the same receptor.\n'
                '  Many ligand poses, each docked into its own receptor.'
            ]
        ],

    Hbox :
        [
        name: 'recbox', extendH: 1,
        FSBText :
            [
            name: 'recdb', len: 40, extendH: 1, title: 'Receptor DB:',
            mode: 'open', allowBlank: 0,
            bubbleHelp:
                'The name of the input database that holds\n'
                'the receptors.'
            ],
        Button : [ name: 'browse_recdb', text: 'Browse...' ]
        ],

    Hbox :
        [
        name: 'posebox', extendH: 1,
        FSBText :
            [
            name: 'posedb', len: 40, extendH: 1, title: 'Ligand/Pose DB:',
            mode: 'open', allowBlank: 0,
            bubbleHelp:
                'The name of the input database that holds\n'
                'the ligand poses (and possibly scores).'
            ],
        Button : [ name: 'browse_posedb', text: 'Browse...' ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1],

    Hbox :
        [
        Vbox :
            [
            extendH: 1, title: 'Molecule Tests:',
            Button :
                [
                name: 'performtests', text: 'Perform', extendH:1, 
                bubbleHelp:
                    'Perform the selected tests on the molecules\n'
                    'in the MOE Window and/or those stored in\n'
                    'the opened corresponding QMScore database.'
                ]
            ],
        Separator : 
            [
            vertical:0, shadow:'noline', extendH: 0, margin:1
            ],
        Mbox :
            [
            columns: 3, spacingH: 'medium',
            extendH: 1, name: 'moltests',
                Label :
                    [
                    font: 'mediumBold', text: 'Error:', 
                    bubbleHelp:
                        'These are tests for problems with the receptor(s)\n'
                        'and ligand(s) that will cause Divcon to fail.'
                    ],
                Checkbox :
                    [
                    name: 'testLP', text: 'Lone Pairs',
                    bubbleHelp:
                        'Check to ensure that there are no lone pairs\n'
                        '(often the result of MOE misparsing a PDB file).'
                    ],
                Checkbox :
                    [
                    name: 'testOverlap', text: 'Atom Overlap',
                    bubbleHelp:
                        'Check to ensure that there are no\n'
                        'overlapping atoms (this can be time consuming).'
                    ],
                Label :
                    [
                    font: 'mediumBold', text: 'Warning:',
                    bubbleHelp:
                        'These are tests for problems with the receptor(s)\n'
                        'and ligand(s) that may or may not cause Divcon to\n'
                        ' fail, but the results will probably be questionable.'
                    ],
                Checkbox :
                    [
                    name: 'testH', text: 'Missing/Extra H',
                    bubbleHelp:
                        'Check to ensure that there are no missing or\n'
                        'extra H (e.g., truncated residue, C=OH, etc.).'
                    ],
                Checkbox :
                    [
                    name: 'testMM', text: 'No MM Type',
                    bubbleHelp:
                        'Check to ensure that all atoms\n'
                        'have a defined MM atom type.'
                    ]
            ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1],
    Hbox :
        [
        extendH: 1, title: 'Charges:',
        Vbox :
            [
            Button :
                [
                name: 'calcchg', text: 'Calculate', extendH:1, 
                bubbleHelp:
                    'Calculate the total charges for the receptor\n'
                    'and ligand in the MOE Window.'
                ],
            Button :
                [
                name: 'ckdbchg', text: 'Check', extendH:1, 
                bubbleHelp:
                    'Check the charges stored in the "Rec Chg"\n'
                    'and "Lig Chg" fields of the QMScore database.'
                ]
            ],
        Separator : 
            [
            vertical:0, shadow:'noline', extendH: 0, margin:1
            ],
        Vbox :
            [
            name: 'chgbox',
            Hbox :
                [
                extendH: 1,
                Label :
                    [
                    name: 'recflg', title: 'Receptor:',
                    bubbleHelp:
                        'Problems with the total charge of receptor?\n'
                        '   White:   uncalculated or user-entered charge.\n'
                        '   Green:   charge calculated by MOE.\n'
                        '   Red:      charge problematic for Divcon.'
                    ],
                Text :
                    [
                    name: 'recchg', allowBlank: 0,
                    type: 'int', minWidth: 4,
                    onTrigger: 'validate',
                    bubbleHelp:
                        'Total charge of receptor.'
                    ]
                ],
            Hbox :
                [
                extendH: 1,
                Label :
                    [
                    name: 'ligflg', title: 'Ligand:',
                        bubbleHelp:
                        'Problems with the total charge of ligand?\n'
                        '   White:   uncalculated or user-entered charge.\n'
                        '   Green:   charge calculated by MOE.\n'
                        '   Yellow:  MOE\'s charge was adjusted.\n'
                        '   Red:      charge problematic for Divcon.'

                    ],
                Text :
                    [
                    name: 'ligchg', allowBlank: 0,
                    type: 'int', minWidth: 4, extendH: 1,
                    onTrigger: 'validate',
                    bubbleHelp:
                        'Total charge of ligand.'
                    ],
                Checkbox :
                    [
                    name: 'poseschg', text: 'All Poses',
                    bubbleHelp:
                        'Use the ligand charge for all\n'
                        'poses in the poses database.'
                    ]
                ]
            ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1]
    ];

const MESS_WINDOW =
    [
    name: 'mpanel', 
    title: 'Test Information',
    windowName: 'MessWindow',
    text: ['Close'],
    onTrigger: ['return'],
    Edit :
        [
        name:'mess', len: 40, width: 80
        ]
    ];

//***********************  Local Functions  *********************************

/****************************************************************************
 *                          AtomOverlap
 *
 *  Determine whether atoms in the bigset overlap with those in the littleset.
 *  For intramolecular overlap, bigset is the same as littleset.
 *
 ****************************************************************************/
local function AtomOverlap [bigset, littleset]
    const PACKET = 100;
    const RADIUS = 1.5;
    const OVERLAP = 0.5;

    local subsets = split [bigset, PACKET];
	local prox = prox_open [RADIUS, aPos littleset, RADIUS];
    local badpairs = [], sub_i;
    for sub_i = 1, length subsets, 1 loop
	    local [seg, idx, sqrdist] = prox_find [prox, aPos subsets (sub_i), 0];
        if length idx === 0 then continue; endif

        local q_i;
        local atmidx = split [idx, seg];
        local dists = split [sqrt sqrdist, seg];
        for q_i = 1, length atmidx, 1 loop
            if length atmidx (q_i) === 0 then continue; endif

            local qatm = subsets (sub_i)(q_i);
            local satms = littleset [atmidx (q_i)];
            local d = dists (q_i);
            local m = satms <> qatm;
            satms = satms | m;
            d = d | m;
            if length satms === 0 then continue; endif

            m = bOrder [qatm, satms] == 0;
            satms = satms | m;
            d = d | m;
            if length satms === 0 then continue; endif

            m = (aRadius qatm - d + aRadius satms - d) >= OVERLAP;
            satms = satms | m;
            if length satms === 0 then continue; endif

            badpairs = cat [badpairs, tr [rep [qatm, length satms], satms]];
        endloop
    endloop

	prox_close prox;

//  If intramolecular, remove reflexive duplicate pairs.
    if bigset === littleset then
        local ith, ok = rep [1, length badpairs];
        for ith = 1, length badpairs, 1 loop
            if ok (ith) then
                local dup = reverse badpairs (ith);
                local [didx] = indexof [[dup], badpairs];
                if didx > 0 then
                    ok = poke [ok, didx, 0];
                endif
            endif
        endloop
        
        badpairs = badpairs | ok;
    endif

    return badpairs;
endfunction

/****************************************************************************
 *                          CalcCharge
 *
 *  Determine the total charge of the molecule collection represented by 
 * the set of atoms.
 *
 ****************************************************************************/
local function CalcCharge [atoms]

    local charge = add aFCharge atoms;

    return charge;
endfunction

function ChargeOK;
function qb_SplitComplex;

/****************************************************************************
 *                          CalcComplexCharge
 *
 *  Determine the total charge of the ligand and receptor in the MOE window.
 *
 ****************************************************************************/
local function CalcComplexCharge []

    local [recatoms, ligatoms, errmess] = qb_SplitComplex [0];
    if recatoms === [] or ligatoms === [] then
        return  [[], [], [], [], errmess];
    endif

    local recchg = CalcCharge [recatoms];
    local ligchg = CalcCharge [ligatoms];

    local recok = ChargeOK [recatoms, recchg];
    local ligok = ChargeOK [ligatoms, ligchg];

    return [recchg, recok, ligchg, ligok, ''];

endfunction

/****************************************************************************
 *                          ChargeOK
 *
 *  Determine whether the given total charge of the molecule collection 
 *  represented by the set of atoms will result in a system with an even
 *  number of electrons.
 *
 ****************************************************************************/
local function ChargeOK [atoms, charge]

    local numelecs = add aAtomicNumber atoms;
    return even (charge + numelecs);

endfunction

function CheckComplexCharge;
function SetChargeStatus;

/****************************************************************************
 *                          CheckCharge
 *
 *  Check user-defined charges for even number of electrons.
 *
 ****************************************************************************/
local function CheckCharge [wkey, status, recchg, ligchg, warn]

    local [recok, ligok, errmess] = CheckComplexCharge [recchg, ligchg];
    if recok === [] or ligok === [] then
        if warn then
            Warning errmess;
        endif

        SetChargeStatus [wkey, status];
        return status;
    endif

    if recok then
        if status.calcchg and recchg === status.moerecchg then
          status.recchg = 2;
        else
          status.recchg = 1;
        endif

    else
        status.recchg = 3;
    endif

    if ligok then
        if status.calcchg and ligchg === status.moeligchg then
            status.ligchg = 2;
        else
            status.ligchg = 1;
        endif
    else
        status.ligchg = 3;
    endif

    SetChargeStatus [wkey, status];
    return status;
endfunction

/****************************************************************************
 *                          CheckComplexCharge
 *
 *  Determine whether the given total charges of the ligand and receptor
 *  in the MOE window will result in systems with an even number of electrons.
 *
 ****************************************************************************/
local function CheckComplexCharge [recchg, ligchg]

    local [recatoms, ligatoms, errmess] = qb_SplitComplex [0];
    if recatoms === [] or ligatoms === [] then
        return  [[], [], errmess];
    endif

    local recok = ChargeOK [recatoms, recchg];
    local ligok = ChargeOK [ligatoms, ligchg];

    return [recok, ligok, ''];

endfunction

function qb_CheckChgDivconMol;
function qb_GetEnvTag;
function qb_GetStatusFlags;
function qb_GetPoseFields;
function qb_GetRecFields;
function qb_GetWhich;
function qb_SaveDivconStatus;

/****************************************************************************
 *                          CheckChgDBMols
 *
 *  Check the molecules and their charges stored in the Score
 *  Database and store their status in the Status field.
 *
 *  Note:  this only checks the receptors and ligands in the molecule fields.
 *
 ****************************************************************************/
local function CheckChgDBMols [oldkey]

    if oldkey === 0 then
        Warning 'The MOEDivcon database hasn\'t been created.';
        return;
    endif

    local dblist = dbv_KeyList [];
    if isnull dblist or isnull indexof [oldkey, dblist] then
        Warning 'The MOEDivcon database isn\'t open.';
        return;
    endif

    local dbkey = db_Open [oldkey, 'read-write'];
    local coreopts = qb_GetEnvTag [dbkey, COREOPTS];
    local rowkey = 0;
    local recflds = qb_GetRecFields [dbkey];
    local ligflds = qb_GetPoseFields [dbkey];

    if not MOE_BATCH then
        local [osys, nsys] = SystemPush [];
    endif

    while rowkey = db_NextEntry [dbkey, rowkey] loop
        local recok = 1, recchgok = 1, recmess = '';
        local [ligmol, ligchg] = db_ReadFields [dbkey, rowkey, ligflds];
        local [ligok, ligchgok, ligmess] = qb_CheckChgDivconMol [ligmol,
            ligchg, 1];
        if coreopts.mode === 'Many-to-Many' then
            local [recmol, recchg] = db_ReadFields [dbkey, rowkey,
                recflds];
            [recok, recchgok, recmess] = qb_CheckChgDivconMol [recmol,
                recchg, 0];
        endif

        if alltrue [recok, recchgok, ligok, ligchgok] then
            local [oldstatus] = db_ReadFields [dbkey, rowkey, STATUS_FIELD];
            if not isnull oldstatus then
                qb_SaveDivconStatus [dbkey, rowkey,
                    "Charges are compatible with Divcon.\n"];
            endif
        else
            local errmess = "";
            local submess = tok_cat [recmess, ligmess];
            if not alltrue [recok, ligok] then
                errmess = cat [errmess, 
                    swrite ['Error!  Problematic molecule in {}.\n', 
                    qb_GetWhich [not recok, not ligok]]];
                if tok_length submess > 0 then
                    errmess = cat [errmess, swrite ['{}\n', submess]];
                endif
            endif

            if not alltrue [recchgok, ligchgok] then
                errmess =  cat [errmess, 
                    swrite ['Error!  Problematic charge for {}.\n', 
                    qb_GetWhich [not recchgok, not ligchgok]]];
                if tok_length submess > 0 then
                    errmess = cat [errmess, swrite ['{}\n', submess]];
                endif
            endif

            qb_SaveDivconStatus [dbkey, rowkey, errmess];
        endif
    endloop

    if not MOE_BATCH then
        SystemPop [osys, nsys];
    endif

    db_Close dbkey;
endfunction

function DrawChgStatus;

/****************************************************************************
 *                          ClearChargeStatus
 *
 *  Clear charge status.
 *
 ****************************************************************************/
local function ClearChargeStatus [wkey]

    local ligkey = DrawChgStatus [1];
    local reckey = DrawChgStatus [1];

    WindowSetAttr [wkey, [ligflg: [graphics: ligkey],
        recflg: [graphics: reckey]]];
    
    gr_destroy ligkey;
    gr_destroy reckey;

endfunction

function qb_GetEnvTag;
function qb_InterMoleculeOverlap;
function qb_TestDivcon;
function GetStatusMessage;
function SingleMol;

/****************************************************************************
 *                          CopyPoseDB
 *
 *  Copy the Poses database into the QMScore output database.
 *
 ****************************************************************************/
local function CopyPoseDB [resultskey, poseskey, lp, overlap, missH, MM,
        recmol, recmess]

    local mess = '', msgkey;
    local [fields, ftypes] = db_Fields poseskey;
    local molfield = fields | (ftypes == 'molecule');

    if 1 <> length molfield then
        mess = 'The poses database has\n'
            'more than one molecule field.';
        return mess;
    endif

    local status = qb_GetEnvTag [resultskey, STATUS];
    local coreopts = qb_GetEnvTag [resultskey, COREOPTS];

    //  HACK alert:  temporarily renames mol field to make copying easier
    db_RenameField [resultskey, POSE_FIELD, molfield];
    apt db_EnsureField [resultskey,  fields, ftypes];

    if not MOE_BATCH then
        msgkey = Message [0, 'Saving database ...'];
        local [osys, nsys] = SystemPush [];
    endif

    local recchn = mol_Create recmol;
    local recatms = cat oAtoms recchn;

    local rowkey = 0, stsmess = "";
    while rowkey = db_NextEntry [poseskey, rowkey] loop
        local rowdata = db_Read [poseskey, rowkey];

        local ligmol = tagpeek [rowdata, molfield];
        local ligch = mol_Create ligmol;
        local ligatms = cat cAtoms ligch;

        stsmess = recmess;
        if not SingleMol [ligatms] then
            stsmess = cat [stsmess,
                "Error!  Ligand must to be a single molecule.\n"];
        endif

        local charge = 0, chgok = 0;
        if coreopts.poseschg then
            charge = coreopts.ligchg;
            chgok = neL [status.ligchg, 3];
        else
            charge = CalcCharge [ligatms];
            chgok = ChargeOK [ligatms, charge];
        endif

        local [ligok, ligmess] = qb_TestDivcon ['ligand', ligatms, 
            lp, overlap, missH, MM];

        local intermess = '';
        if overlap then
            intermess = qb_InterMoleculeOverlap [recatms, ligatms];
        endif

        stsmess = cat [stsmess, GetStatusMessage ['Ligand', chgok],
            string tok_cat [ligmess, intermess]];
        local chgdata = tag [[LIGCHG_FIELD], [charge]];
        rowdata = cat [chgdata, rowdata];
        local resultrowkey = db_Write [resultskey, 0, rowdata];
        if  length stsmess > 0 then
            qb_SaveDivconStatus [resultskey, resultrowkey, stsmess];
        endif

        oDestroy ligch;
    endloop

    oDestroy recchn;

    if not MOE_BATCH then
        SystemPop [osys, nsys];
        Message [msgkey, 'Saving database ... done.'];
    endif

    db_RenameField [resultskey, molfield, POSE_FIELD];

    return mess;
endfunction

/****************************************************************************
 *                          CopyRecPoseDB
 *
 *  Copy the Receptors and Poses databases into the QMScore output database.
 *
 *  HACK alert:  temporarily renames mol fields to make copying easier.
 *
 ****************************************************************************/
local function CopyRecPoseDB [resultskey, recskey, poseskey, lp, overlap,
        missH, MM]

    local mess = '', msgkey;
    if db_nEntries recskey <> db_nEntries poseskey then
        mess = 'The receptor and pose databases\n'
            'have different number of entries.';
        return mess;
    endif

    local [recfields, recftypes] = db_Fields recskey;
    local recmolfield = recfields | (recftypes == 'molecule');
    if 1 <> length recmolfield then
        mess = 'The receptor database has\n'
            'more than one molecule field.';
        return mess;
    endif

    local [posefields, poseftypes] = db_Fields poseskey;
    local posemolfield = posefields | (poseftypes == 'molecule');
    if 1 <> length posemolfield then
        mess = 'The pose database has\n'
            'more than one molecule field.';
        return mess;
    endif

    db_RenameField [resultskey, REC_FIELD, recmolfield];
    apt db_EnsureField [resultskey, recfields, recftypes];

    if not MOE_BATCH then
        msgkey = Message [0, 'Saving database ...'];
        local [osys, nsys] = SystemPush [];
    endif

    local recrowkey = 0, recmsgs = [], stsmess = "";
    local recchset = [], recatmset = [];
    while recrowkey = db_NextEntry [recskey, recrowkey] loop
        local recrowdata = db_Read [recskey, recrowkey];
        local recmol = tagpeek [recrowdata, recmolfield];
        local recchs = mol_Create recmol;
        local recatms = cat cAtoms recchs;
        local recchg = CalcCharge [recatms];
        local recchgok = ChargeOK [recatms, recchg];
        local [recok, recmess] = qb_TestDivcon ['receptor', recatms, 
            lp, overlap, missH, MM];
        stsmess = cat [GetStatusMessage ['Receptor', recchgok],
            string recmess];
        recchset = append [recchset, recchs];
        recatmset = append [recatmset, recatms];
        recmsgs = append [recmsgs, stsmess];
        local recchgdata = tag [[RECCHG_FIELD], [recchg]];
        recrowdata = cat [recchgdata, recrowdata];
        db_Write [resultskey, 0, recrowdata];
    endloop

    db_RenameField [resultskey, recmolfield, REC_FIELD];

    db_RenameField [resultskey, POSE_FIELD, posemolfield];
    apt db_EnsureField [resultskey, posefields, poseftypes];

    local poserowkey = 0, resultrowkey = 0, ith = 1;
    while poserowkey = db_NextEntry [poseskey, poserowkey] loop
        resultrowkey = db_NextEntry [resultskey, resultrowkey];
        local poserowdata = db_Read [poseskey, poserowkey];
        local posemol = tagpeek [poserowdata, posemolfield];
        local posech = mol_Create posemol;
        local poseatms = cat cAtoms posech;
        local posechg = 0;
        stsmess = recmsgs (ith);
        if not SingleMol [poseatms] then
            stsmess = cat [stsmess,
                "Error!  Ligand must to be a single molecule.\n"];
        endif

        posechg = CalcCharge [poseatms];
        local posechgok = ChargeOK [poseatms, posechg];
        local [poseok, posemess] = qb_TestDivcon ['ligand', poseatms,
            lp, overlap, missH, MM];

        local intermess = '';
        if overlap then
            intermess = qb_InterMoleculeOverlap [recatmset (ith), poseatms];
        endif

        stsmess = cat [stsmess, GetStatusMessage ['Ligand', posechgok],
            string tok_cat [posemess, intermess]];
        local posechgdata = tag [[LIGCHG_FIELD], [posechg]];
        poserowdata = cat [posechgdata, poserowdata];
        db_Write [resultskey, resultrowkey, poserowdata];
        if not isnull stsmess then
            qb_SaveDivconStatus [resultskey, resultrowkey, stsmess];
        endif
        oDestroy posech;
        ith = ith + 1;
    endloop

    oDestroy recchset;

    if not MOE_BATCH then
        SystemPop [osys, nsys];
        Message [msgkey, 'Saving database ... done.'];
    endif

    db_RenameField [resultskey, posemolfield, POSE_FIELD];

    return mess;
endfunction

/****************************************************************************
 *                          DrawChgStatus
 *
 *  Return the graphics key for the status label.
 *  NOTE:  calling function should call gr_destroy on key after using it.
 *
 ****************************************************************************/
local function DrawChgStatus [cidx]
    local color = CHG_COLOR (cidx);
    local key = gr_create [title: 'status', size: [13, 13], units: 'pt'];
    gr_oval [key, [0, [6,6], [6,6], icolor color, 1, icolor color]];
    return key;
endfunction

/****************************************************************************
 *                          GetStatusMessage
 *
 *  Return a string message describing the charge status.
 *
 ****************************************************************************/
local function GetStatusMessage [which, ok]

    local mess = "";

    if not ok then
        mess = swrite ['Error!  Problematic charge for {}.\n', which];
    endif

    return mess;

endfunction

/****************************************************************************
 *                          SaveEnv
 *
 *  Save the molecules (ligand and receptor) and options in the 
 *  database.
 *
 ****************************************************************************/
local function SaveEnv [dbkey, tgtmols, ligmol, status, coreopts, appopts,
        complex, type]

    db_SetEnv [dbkey, RECEPTOR, twrite ['{v}', tgtmols]];
    db_SetEnv [dbkey, LIGAND, twrite ['{v}', ligmol]];
    db_SetEnv [dbkey, STATUS, twrite ['{v}', status]];
    db_SetEnv [dbkey, COREOPTS, twrite ['{v}', coreopts]];
    db_SetEnv [dbkey, APPOPTS, twrite ['{v}', appopts]];
    db_SetEnv [dbkey, COMPLEX, twrite ['{v}', complex]];

    if type === 'nmrscore' then
        db_SetEnv [dbkey, DBTYPE, NMRSCORE];
    elseif type === 'qmscore' then
        db_SetEnv [dbkey, DBTYPE, QMSCORE];
    endif

endfunction

/****************************************************************************
 *                          SetChargeStatus
 *
 *  Set charge status label.
 *
 ****************************************************************************/
local function SetChargeStatus [wkey, status]

    local ligkey = DrawChgStatus [status.ligchg];
    local reckey = DrawChgStatus [status.recchg];

    WindowSetAttr [wkey, [ligflg: [graphics: ligkey],
        recflg: [graphics: reckey]]];
    
    gr_destroy ligkey;
    gr_destroy reckey;

endfunction

/****************************************************************************
 *                          SetScoreFields
 *
 *  Ensure that the required fields are present.
 *
 ****************************************************************************/
local function SetScoreFields [dbkey, addreceptor, fields]

    if addreceptor then
        db_EnsureField [dbkey, REC_FIELD, 'molecule'];
        db_EnsureField [dbkey, RECCHG_FIELD, 'int'];
    endif

    db_EnsureField [dbkey, POSE_FIELD, 'molecule'];
    db_EnsureField [dbkey, LIGCHG_FIELD, 'int'];
    db_EnsureField [dbkey, STATUS_FIELD, 'char'];

    if neL [fields, []] then
        apt db_EnsureField [dbkey, fields, 'double'];
    endif

endfunction

/****************************************************************************
 *                          SingleMol
 *
 *  Does the atom set represent a single molecule?
 *
 ****************************************************************************/
local function SingleMol [atoms]
    return 1 === length uniq aMoleculeNumber atoms;
endfunction

/****************************************************************************
 *                          SplitReceptor
 *
 *  Given a set of receptor atoms, returns subsets which represent
 *  individual molecules (connected pieces) in the receptor.
 *
 ****************************************************************************/
local function SplitReceptor [receptoratoms]

    if receptoratoms === [] then return []; endif

    local atomsets = [];
    local [recidx, reccnt] = sac aMoleculeNumber receptoratoms;
    if length reccnt > 1 then
        receptoratoms = receptoratoms [recidx];
        atomsets = split [receptoratoms, reccnt];
    else
        atomsets = [receptoratoms];
    endif

    return atomsets;

endfunction

/****************************************************************************
 *                          TestComplex
 *
 *  Determine whether the ligand and receptor in the MOE window have any
 *  detectable problems.
 *
 ****************************************************************************/
local function TestComplex [lonepairs, overlap, missextraH, MMtype]

    local [recatoms, ligatoms, errmess] = qb_SplitComplex [1];
    if recatoms === [] or ligatoms === [] then
        return  [0, '', 0, errmess];
    endif

    local [recok, recmess] = qb_TestDivcon ['receptor', recatoms, 
        lonepairs, overlap, missextraH,MMtype];
    local [ligok, ligmess] = qb_TestDivcon ['ligand', ligatoms,
        lonepairs, overlap, missextraH, MMtype];

    local intermess = '';
    if overlap then
        intermess = qb_InterMoleculeOverlap [recatoms, ligatoms];
        if neL [intermess, ''] then
            recok = 0;
            ligok = 0;
            ligmess = tok_cat [ligmess, intermess];
        endif
    endif

    return [recok, recmess, ligok, ligmess];

endfunction

/****************************************************************************
 *                          TestDBMols
 *
 *  Test the molecules stored in the Score Database and store their status
 *  in the Status field.
 *
 *  Note:  this only checks the receptors and ligands in the molecule fields.
 *
 ****************************************************************************/
local function TestDBMols [oldkey, testLP, testOverlap, testH, testMM]

    if MOE_BATCH then return; endif

    if oldkey === 0 then
        Warning 'The MOEDivcon database hasn\'t been created.';
        return;
    endif

    local dblist = dbv_KeyList [];
    if isnull dblist or isnull indexof [oldkey, dblist] then
        Warning 'The MOEDivcon database isn\'t open.';
        return;
    endif

    local dbkey = db_Open [oldkey, 'read-write'];
    local coreopts = qb_GetEnvTag [dbkey, COREOPTS];
    local rowkey = 0;
    local recflds = qb_GetRecFields [dbkey];
    local ligflds = qb_GetPoseFields [dbkey];

    local [osys, nsys] = SystemPush [];

    local recmols, recchns, recatms, recchg;
    if coreopts.mode === 'One-to-Many' then
        recmols = qb_GetEnvTag [dbkey, RECEPTOR];
        recchns = mol_Create recmols;
        recatms = cat oAtoms recchns;
    endif

    while rowkey = db_NextEntry [dbkey, rowkey] loop
        local recok = 1, recmess = '';
        local [ligmol, ligchg] = db_ReadFields [dbkey, rowkey, ligflds];
        local ligchn = mol_Create ligmol;
        local ligatms = cat oAtoms ligchn;
        local [ligok, ligmess] = qb_TestDivcon ['ligand', ligatms,
            testLP, testOverlap, testH, testMM];
        if coreopts.mode === 'Many-to-Many' then
            [recmols, recchg] = db_ReadFields [dbkey, rowkey, recflds];
            recchns = mol_Create recmols;
            recatms = cat oAtoms recchns;

            [recok, recmess] = qb_TestDivcon ['receptor', recatms,
                testLP, testOverlap, testH, testMM];
        endif

        local intermess = '';
        if testOverlap then
            intermess = qb_InterMoleculeOverlap [recatms, ligatms];
            if neL [intermess, ''] then
                recok = 0;
                ligok = 0;
                ligmess = tok_cat [ligmess, intermess];
            endif
        endif

        oDestroy ligchn;
        if coreopts.mode === 'Many-to-Many' then
            oDestroy recchns;
        endif

        if recok === 2 and ligok === 2 then
            local [oldstatus] = db_ReadFields [dbkey, rowkey, STATUS_FIELD];
            if not isnull oldstatus then
                qb_SaveDivconStatus [dbkey, rowkey, "No problems detected.\n"];
            endif
        else
            qb_SaveDivconStatus [dbkey, rowkey, 
                cat [string recmess, string ligmess]];
        endif
    endloop

    if coreopts.mode === 'One-to-Many' then
        oDestroy recchns;
    endif

    SystemPop [osys, nsys];

    db_Close dbkey;
    return;

endfunction

/****************************************************************************
 *                          UpdateCWD
 *
 *  Update the window based on new CWD value.
 *
 ****************************************************************************/
local function UpdateCWD [wkey, cwd, wd, prev]
    if cwd === 1 then
        WindowSetAttr [wkey, [workdir: [sensitive: 0, allowBlank: 1]]];
        WindowSetData [wkey, [workdir: '']];
        return wd;
    else
        WindowSetAttr [wkey, [workdir: [sensitive: 1, allowBlank: 0]]];
        WindowSetData [wkey, [workdir: prev]];
        return prev;
    endif
endfunction

/****************************************************************************
 *                          UpdateMode
 *
 *  Update the window based on new mode value.
 *
 ****************************************************************************/
local function UpdateMode [wkey, mode, status]
    if mode === 'One-to-One' then
        WindowSetAttr [wkey, [
            recbox: [sensitive: 0], recdb: [allowBlank: 1], 
            posebox: [sensitive: 0], posedb: [allowBlank: 1], 
            panel:[sensitive: [1,1,1,1]], calcchg: [sensitive: 1],
            chgbox: [sensitive: 1], recchg: [allowBlank: 0],
            ligchg: [allowBlank: 0], poseschg: [sensitive: 0]]];
        SetChargeStatus [wkey, status];
    elseif mode === 'One-to-Many' then
        WindowSetAttr [wkey, [
            recbox: [sensitive: 0], recdb: [allowBlank: 1],
            posebox: [sensitive: 1], posedb: [allowBlank: 0],
            panel:[sensitive: [1,1,1,1]], calcchg: [sensitive: 1],
            chgbox: [sensitive: 1], recchg: [allowBlank: 0],
            ligchg: [allowBlank: 0],
            poseschg: [sensitive: 1]]];
        SetChargeStatus [wkey, status];
    elseif mode === 'Many-to-Many' then
        WindowSetAttr [wkey, [
            recbox: [sensitive: 1], recdb: [allowBlank: 0],
            posebox: [sensitive: 1], posedb: [allowBlank: 0],
            panel:[sensitive: [0,1,1,1]], calcchg: [sensitive: 0],
            chgbox: [sensitive: 0], recchg: [allowBlank: 1],
            ligchg: [allowBlank: 1],
            poseschg: [sensitive: 0]]];
        ClearChargeStatus [wkey];
    endif
endfunction

//************************  Global Functions  *******************************

/****************************************************************************
 *                          qb_AtomsToMols
 *
 *  Given the set of atoms in the MOE Window, identify and separate the
 *  ligand and the receptor atoms.  Returns the extracted molecules.
 *
 ****************************************************************************/
global function qb_AtomsToMols []

    local [recatoms, ligatoms, errmess] = qb_SplitComplex [1];

    if recatoms === [] or ligatoms === [] then
        return [[], [], errmess];
    endif

    local ligmol = mol_Extract ligatoms;
    local recmol = mol_Extract recatoms;

    return [recmol, ligmol, ''];

endfunction

/****************************************************************************
 *                          qb_CheckChgDivconMol
 *
 *  Determine whether the molecule and its total charge is problematic
 *  for Divcon.  Also checks if it is a single molecule when flagged.
 *
 *  Assume that SystemPush [] and SystemPop [] have already been called,
 *  if necessary.
 *
 ****************************************************************************/
global function qb_CheckChgDivconMol [mol, chg, single]

    local molok = 1, mess = '';
    local chn = mol_Create mol;
    local atms = cat cAtoms chn;
    if single then
        molok = SingleMol [atms];
    endif

    if not molok then
        mess = 'Ligand must be a single molecule.';
    endif

    local chgok = ChargeOK [atms, chg];
    oDestroy chn;

    return [molok, chgok, mess];

endfunction

/****************************************************************************
 *                          qb_CheckChgTestDivconMols
 *
 *  Determine whether the given molecules and their total charges are
 *  problematic for Divcon.  Return the receptor collection separated
 *  into individual molecules to be compatible with Divcon's backbone.
 *
 *  Assume that SystemPush [] and SystemPop [] have already been called,
 *  if necessary.
 *
 ****************************************************************************/
global function qb_CheckChgTestDivconMols [recmol, recchg, ligmol, ligchg,
        lonepair, overlap, missextraH, MMtype]

    local mess = '';
    local recchns = mol_Create recmol;
    local recatms = cat cAtoms recchns;
    local [recok, recmess] = qb_TestDivcon ['receptor', recatms, 
        lonepair, overlap, missextraH, MMtype];
    mess = tok_cat [mess, recmess];
    local recchgok = ChargeOK [recatms, recchg];
    oDestroy recchns;

    local ligchn = mol_Create ligmol;
    local ligatms = cat cAtoms ligchn;
    local ligsingle = SingleMol [ligatms];
    if not ligsingle then
        mess = tok_cat [mess, 'Ligand must be a single molecule.'];
    endif

    local [ligok, ligmess] = qb_TestDivcon ['ligand', ligatms,
        lonepair, overlap, missextraH, MMtype];
    mess = tok_cat [mess, ligmess];

    if not ligsingle then ligok = 0; endif

    local ligchgok = ChargeOK [ligatms, ligchg];
    oDestroy ligchn;

    local intermess = '';
    if overlap then
        intermess = qb_InterMoleculeOverlap [recatms, ligatms];
        if neL [intermess, ''] then
            recok = 0;
            ligok = 0;
            mess = tok_cat [mess, intermess];
        endif
    endif

    local recatmsets = SplitReceptor [recatms];
    local recmolset = app mol_Extract recatmsets;

    return [recmolset, recok, recchgok, ligok, ligchgok, mess];

endfunction

function qb_UpdateCharge;

/****************************************************************************
 *
 *                          qb_CoreHandler
 *
 *  Handle the triggers of the core panel.
 *
 ****************************************************************************/
global function qb_CoreHandler [wkey, trig, status, vals, btasks]

    local btid;
    if trig === 'mode' then
        UpdateMode [wkey, vals.mode, status];

    elseif trig === 'cwd' then
        status.prevwd = UpdateCWD [wkey, vals.cwd, vals.workdir,
            status.prevwd];

    elseif trig === 'performtests' then
        if allfalse [vals.testLP, vals.testOverlap, vals.testH,
                vals.testMM] then
            Warning 'No tests selected.';
            return;
        endif

        if second task_fork [master: 'parent',
                statics:'share'] === 'child' then
            task_prio 0;
            local recok = 1, recmess = '', ligok = 1, ligmess = '';
            local msgkey = Message [0, 'Running tests ...'];

            if neL [vals.mode, 'Many-to-Many'] then
                [recok, recmess, ligok, ligmess] = TestComplex [
                    vals.testLP, vals.testOverlap, vals.testH, vals.testMM];
            endif

            if neL [vals.mode, 'One-to-One'] then
                TestDBMols [status.dbkey, vals.testLP, vals.testOverlap,
                    vals.testH, vals.testMM];
            endif

            if vals.mode === 'Many-to-Many'then
                Message [msgkey, 'Running tests ... done.'];
                sleep 5;
                exit [];
            else
                if [recok and ligok and recmess === '' and ligmess === ''] then
                    if vals.mode === 'One-to-One' then
                        Warning 'No problems detected.';
                        exit [];
                    else
                        Message [msgkey, 'Running tests ... done.'];
                        sleep 5;
                        exit [];
                    endif
                else
                    local messwin = WindowCreate MESS_WINDOW;
                    WindowSetData [messwin, [mess: string tok_cat [recmess,
                        ligmess]]];
                    WindowShow [messwin, 1];
                    loop
                        local [v, t] = WindowWait messwin;
                        if t === 'mpanel' and v.mpanel === 'Close' then
                            WindowDestroy messwin;
                            exit [];
                        endif
                    endloop
                endif
            endif

            exit [];
        endif

    elseif trig === 'calcchg' then
        if second task_fork [master: 'parent',
                statics:'share'] === 'child' then
            task_prio 0;

            status = qb_UpdateCharge [wkey, status, 1, 1, 1];
            exit [];
        endif

    elseif trig === 'ckdbchg' then
        if second task_fork [master: 'parent',
                statics:'share'] === 'child' then
            task_prio 0;

            CheckChgDBMols [status.dbkey];
            exit [];
        endif

    elseif trig === 'recchg' then
        if second task_fork [master: 'parent', 
                statics:'share'] === 'child' then
            task_prio 0;

            status = CheckCharge [wkey, status, vals.recchg,
                vals.ligchg];
            exit [];
        endif

    elseif trig === 'ligchg' then
        if second task_fork [master: 'parent',
                statics:'share'] === 'child' then
            task_prio 0;

            status = CheckCharge [wkey, status, vals.recchg,
                vals.ligchg];
            exit [];
        endif

    elseif trig === 'browse_scoredb' then
        btid = run ['fbrowse.svl', [trig, wkey, 'Select QMScore DB File', 
            'none', '*.mdb', 'scoredb']];
        if btid then btasks = append [btasks, btid]; endif

    elseif trig === 'browse_recdb' then
        btid = run ['fbrowse.svl', [trig, wkey, 'Select Receptor DB File', 
            'open', '*.mdb', 'recdb']];
        if btid then btasks = append [btasks, btid]; endif

    elseif trig === 'browse_posedb' then
        btid = run ['fbrowse.svl', [trig, wkey, 'Select Pose DB File', 
            'open', '*.mdb', 'posedb']];
        if btid then btasks = append [btasks, btid]; endif
    endif

    return [status, btasks];
endfunction

/****************************************************************************
 *                          qb_CutReceptor
 *
 *  Given a vector of poses and radius, find all receptor atoms of the current
 *  complex in the MOE Window that are within the radius distance from each
 *  pose, expand those atoms out to their respective residues, and return
 *  the "molecules" formed by those atoms.  If poses is empty, cut around
 *  the ligand in the MOE Window.
 *
 ****************************************************************************/
global function qb_CutReceptor [poses, radius]

    if MOE_BATCH then return [[], [], 'No MOE Window!']; endif

    if radius <= 0.0 then
        return [[], [], 'Radius must be greater than zero.'];
    endif

    local [recatoms, ligatoms, errmess] = qb_SplitComplex [0];

    if recatoms === [] or ligatoms === [] then
        return [[], errmess];
    endif

    //  Find neighboring atoms within radius of each pose
    local subset, cutidx, cutset = [];
    for subset in split [x_id recatoms, 50] loop
        local key = prox_open [radius, aPos recatoms [subset], radius/2];
        if poses  === [] then
            cutidx = uniq second prox_find [key, aPos ligatoms, radius/2];
            cutset = cat [cutset, subset [cutidx]];
        else
            local posemol;
            for posemol in poses loop
                cutidx = uniq second prox_find [key, [posemol(4)(MOL_ATOM_X), 
                posemol(4)(MOL_ATOM_Y), posemol(4)(MOL_ATOM_Z)], radius/2];
                cutset = cat [cutset, subset [cutidx]];
            endloop
        endif

        prox_close key;
    endloop

    if length cutset === 0 then
        return [[], [], twrite ['No receptor atoms within radius {n:.1f}\n'
            'of the ligand pose atoms.', radius]];
    endif

    local cutatoms = uniq recatoms [cutset];
    local residues = uniq oResidues (cutatoms);
    local resatoms = cat oAtoms residues;

    local delatoms = diff [recatoms, resatoms];
    local delresidues = uniq oResidues delatoms;
    oDestroy delatoms;
    delresidues = delresidues | rAtomCount delresidues == 0;
    local delchains = uniq oChains delresidues;
    oDestroy delresidues;
    delchains = delchains | cResidueCount delchains == 0;
    oDestroy delchains;

    Add_H resatoms;

    [recatoms, ligatoms, errmess] = qb_SplitComplex [0];

    local recmol = mol_Extract recatoms;

    return [recmol, ''];

endfunction

/****************************************************************************
 *                          qb_GetAnalysisData
 *
 *  Return the analysis results in the database.
 *
 ****************************************************************************/
global function qb_GetAnalysisData [dbkey, analysis, type]

    local datatok, data = [];
    if analysis === 'pwd' then
        if type === 'sar' then
            datatok = db_GetEnv [dbkey, ANALPWDSAR];
            [[data]] = sread [string datatok, '{v}'];
        elseif type === 'inter' then
            datatok = db_GetEnv [dbkey, ANALPWDINTER];
            [[data]] = sread [string datatok, '{v}'];
        endif
    elseif analysis === 'nmr' then
        if type === 'exp' then
            datatok = db_GetEnv [dbkey, ANALNMREXP];
            [[data]] = sread [string datatok, '{v}'];
        endif
    endif

    return data;

endfunction

/****************************************************************************
 *                          qb_GetCoreEnv
 *
 *  Get the molecules (receptor, ligand and optional complex), the status,
 *  and the core options from the database.
 *
 ****************************************************************************/
global function qb_GetCoreEnv [dbkey]

    local recmol = qb_GetEnvTag [dbkey, RECEPTOR];
    local ligmol = qb_GetEnvTag [dbkey, LIGAND];
    local complex = qb_GetEnvTag [dbkey, COMPLEX];

    local status = qb_GetEnvTag [dbkey, STATUS];
    status = tagcat [status, tag tr STATUS_DEFAULTS];

    local coreopts = qb_GetEnvTag [dbkey, COREOPTS];
    coreopts = tagcat [coreopts, tag tr CORE_OPT_DEFAULTS];

    return [recmol, ligmol, status, coreopts, complex];

endfunction

/****************************************************************************
 *
 *                          qb_GetCorePanel
 *
 *  Returns the vector defining the core panel.
 *
 ****************************************************************************/
global function qb_GetCorePanel []
    return CORE_PANEL;
endfunction

/****************************************************************************
 *                          qb_GetDefaultsCore
 *
 *  Return the default values for the GUI core.
 *
 ****************************************************************************/
global function qb_GetDefaultsCore []
    return dropfirst tag tr CORE_OPT_DEFAULTS;
endfunction

/****************************************************************************
 *                          qb_GetDefaultsStatus
 *
 *  Return the default values for the GUI status.
 *
 ****************************************************************************/
global function qb_GetDefaultsStatus []
    return tag tr STATUS_DEFAULTS;
endfunction

/****************************************************************************
 *                          qb_GetElemIndices
 *
 *  For the given molecule, get the indices of the given element.
 *
 ****************************************************************************/
global function qb_GetElemIndices [mol, elems]

    local atomindices = cat indicesof [elems, mol(4)(MOL_ATOM_EL)];

    return atomindices;
endfunction

/****************************************************************************
 *                          qb_GetEnvAnal
 *
 *  Get the environment value for the analysis options.
 *
 ****************************************************************************/
global function qb_GetEnvAnal [dbkey]

    local tagtok = db_GetEnv [dbkey, ANALOPTS];
    local [[tagval]] = sread [string tagtok, '{v}'];

    return tagval;
endfunction

/****************************************************************************
 *                          qb_GetEnvApp
 *
 *  Get the environment value for the application options.
 *
 ****************************************************************************/
global function qb_GetEnvApp [dbkey]

    local tagtok = db_GetEnv [dbkey, APPOPTS];
    local [[tagval]] = sread [string tagtok, '{v}'];

    return tagval;
endfunction

/****************************************************************************
 *                          qb_GetEnvTag
 *
 *  Get the environment value for the given tag.
 *
 ****************************************************************************/
global function qb_GetEnvTag [dbkey, envtag]

    local tagtok = db_GetEnv [dbkey, envtag];
    local [[tagval]] = sread [string tagtok, '{v}'];

    return tagval;
endfunction

/****************************************************************************
 *                          qb_GetLigandAtoms
 *
 *  Get the atoms of the ligand in the MOE Window.
 *
 ****************************************************************************/
global function qb_GetLigandAtoms []

    local [r, ligatms, errmess] = qb_SplitComplex [0];

    return [ligatms, errmess];
endfunction


/****************************************************************************
 *                          qb_GetPoseFields
 *
 ****************************************************************************/
global function qb_GetPoseFields []

    return [POSE_FIELD, LIGCHG_FIELD];

endfunction

/****************************************************************************
 *                          qb_GetPoses
 *
 ****************************************************************************/
global function qb_GetPoses [vals]

    local posekey = db_Open [vals.posedb, 'read'];
    local mess = '';
    local [fields, ftypes] = db_Fields posekey;
    local molfield = fields | (ftypes == 'molecule');

    if 1 <> length molfield then
        mess = 'The poses database has\n'
            'more than one molecule field.';
        return [[], mess];
    endif

    local poses = [];
    local rowkey = 0;
    while rowkey = db_NextEntry [posekey, rowkey] loop
        local [posemol] = db_ReadFields [posekey, rowkey, molfield];
        poses = append [poses, posemol];
    endloop

    db_Close posekey;

    return [poses, ''];
endfunction

/****************************************************************************
 *                          qb_GetRecFields
 *
 ****************************************************************************/
global function qb_GetRecFields []

    return [REC_FIELD, RECCHG_FIELD];
endfunction

/****************************************************************************
 *                          qb_GetWhich
 *
 *  Return a token message describing which molecules are faulty.
 *
 ****************************************************************************/
global function qb_GetWhich [recbad, ligbad]

    local which = '';
    if recbad and ligbad then
        which = 'receptor and ligand';
    elseif recbad then
        which = 'receptor';
    else
        which = 'ligand';
    endif

    return which;
endfunction

/****************************************************************************
 *                          qb_InterMoleculeOverlap
 *
 *  Determine whether atoms in the receptor atoms overlap with the
 *  ligand atoms.
 *
 *
 *  Assumption:  recset was created before ligset in the current system.
 *
 ****************************************************************************/
global function qb_InterMoleculeOverlap [recset, ligset]

    local mess = '';
    local pairs = AtomOverlap [recset, ligset];
    if length pairs > 0 then
        local residues = oParent pairs;
        local rnames = rName residues;
        local rnums = rNumber residues;
        local anames = aName pairs;
        local indices = aNumber pairs;
        indices = tr indices;
        indices = [first indices, second indices - length recset];
        indices = tr indices;
        local dists = app aDist pairs;
        local ith; 
        mess = tok_cat [mess, '    Error!  Overlapping atoms:\n'];
        for ith = 1, length pairs, 1 loop
            mess = tok_cat [mess, twrite ['        Receptor {}:  {} in {} {}'
                    ' is {}A from Ligand {}:  {} in {} {}\n', 
                indices(ith)(1), anames(ith)(1), rnames(ith)(1),
                rnums(ith)(1),  dists(ith), indices(ith)(2), 
                anames(ith)(2), rnames(ith)(2), rnums(ith)(2)]];
        endloop
    endif

    return mess;
endfunction

/****************************************************************************
 *
 *                          qb_InitCorePanel
 *
 *  Initialize the core panel window.
 *
 ****************************************************************************/
global function qb_InitCorePanel [wkey, status, defaults]

    status.prevwd = defaults.workdir;
    WindowSetData [wkey, dropfirst defaults];
    WindowSetAttr [wkey, [workdir: [sensitive: 1, allowBlank: 0],
        recbox: [sensitive: 0], recdb: [allowBlank: 1],
        posebox: [sensitive: 0], posedb: [allowBlank: 1],
        poseschg: [sensitive: 0], mode: [text: RUN_MODES | status.allowmode]]];
    status = qb_UpdateCharge [wkey, status, 1, 1, 0];

    return status;
endfunction

/****************************************************************************
 *                          qb_IsModeManyToMany
 *
 ****************************************************************************/
global function qb_IsModeManyToMany [coreopts]

    return coreopts.mode === 'Many-to-Many';
endfunction

/****************************************************************************
 *                          qb_IsModeOneToMany
 *
 ****************************************************************************/
global function qb_IsModeOneToMany [coreopts]

    return coreopts.mode === 'One-to-Many';
endfunction

/****************************************************************************
 *                          qb_IsModeOneToOne
 *
 ****************************************************************************/
global function qb_IsModeOneToOne [coreopts]

    return coreopts.mode === 'One-to-One';
endfunction

/****************************************************************************
 *                          qb_LoadCoreScoreDB
 *
 ****************************************************************************/
global function qb_LoadCoreScoreDB [dbpath, type]

    local dbkey = db_Open [dbpath, 'read-write'];
    local dbtype = db_GetEnv [dbkey, DBTYPE];

    if type === 'nmrscore' and neL [dbtype, NMRSCORE] then
        db_Close dbkey;
        return [0, [], [], [], [], [],
            twrite ['{}\nis not a NMRScore Database.', dbpath]];
    endif

    if type === 'qmscore' and neL [dbtype, QMSCORE] then
        db_Close dbkey;
        return [0, [], [], [], [], [],
            twrite ['{}\nis not a QMScore Database.', dbpath]];
    endif

    local [rec, lig, status, coreopts, complex] = qb_GetCoreEnv [dbkey];

    return [dbkey, rec, lig, status, coreopts, complex, ''];
endfunction

/****************************************************************************
 *                          qb_MergeDB
 *
 *  Perform a naive merge of the two databases (that is, assume the first
 *  row of data in srcname1 corresponds to the first row of data srcname2,
 *  etc.).  Only the fields are merged, the environment is ignored.
 *
 ****************************************************************************/
global function qb_MergeDB [srcname1, srcname2, dstname]

    local dstkey = db_Open [dstname, 'create'];
    local srckey1 = db_Open [srcname1, 'read'];
    local srckey2 = db_Open [srcname2, 'read'];
    local [fields1, ftypes1] = db_Fields srckey1;
    local [fields2, ftypes2] = db_Fields srckey2;

    apt db_EnsureField [dstkey,  fields1, ftypes1];
    apt db_EnsureField [dstkey,  fields2, ftypes2];

    local rowkey1 = 0, rowkey2 = 0;
    while (rowkey1 = db_NextEntry [srckey1, rowkey1])
        and (rowkey2 = db_NextEntry [srckey2, rowkey2]) loop
        local rowdata1 = db_Read [srckey1, rowkey1];
        local rowdata2 = db_Read [srckey2, rowkey2];
        db_Write [dstkey, 0, cat [rowdata1, rowdata2]];
    endloop

    db_Close dstkey;
    db_Close srckey1;
    db_Close srckey2;
endfunction

/****************************************************************************
 *                          qb_SaveAnalysisData
 *
 *  Save the analysis results in the database.
 *
 ****************************************************************************/
global function qb_SaveAnalysisData [dbkey, analysis, type, data]

    if analysis === 'pwd' then
        db_SetEnv [dbkey, ANALYSIS, ANALPWD];
        if type === 'sar' then
            db_SetEnv [dbkey, ANALPWDSAR, twrite ['{v}', data]];
        elseif type === 'inter' then
            db_SetEnv [dbkey, ANALPWDINTER, twrite ['{v}', data]];
        endif
    elseif analysis === 'nmr' then
        if type === 'exp' then
            db_SetEnv [dbkey, ANALNMREXP, twrite ['{v}', data]];
        endif
    endif

endfunction


/****************************************************************************
 *                          qb_SaveDivconStatus
 *
 *  Save the error/status message for the given row.
 *
 ****************************************************************************/
global function qb_SaveDivconStatus [dbkey, rowkey, message]

    local sep = "-----------------------------------------------------------\n";
    local [status] = db_ReadFields [dbkey, rowkey, [STATUS_FIELD]];
    message = cat [message, asctime [], "\n", sep, status];
    local fielddata = tag [STATUS_FIELD, [message]];
    db_Write [dbkey, rowkey, fielddata];

endfunction

/****************************************************************************
 *                          qb_SaveEnvAnal
 *
 *  Save the analysis options in the database.
 *
 ****************************************************************************/
global function qb_SaveEnvAnal [dbkey, analopts]

    db_SetEnv [dbkey, ANALOPTS, twrite ['{v}', analopts]];
endfunction

/****************************************************************************
 *                          qb_SetModeStatus
 *
 *  Return the default values for the GUI status.
 *
 ****************************************************************************/
global function qb_SetModeStatus [status, mode]
    status = tagpoke [status, 'allowmode', mode];

    return status;
endfunction

/****************************************************************************
 *                          qb_SetUpScoreDB
 *
 *  Create the output database for storing Score results and ensure that
 *  the required fields are present.  Store the molecules and run options 
 *  in the DB environment.
 *
 *  Note:  it is assumed that this function is called from a child process
 *  and will exit on an error.
 *
 ****************************************************************************/
global function qb_SetUpScoreDB [status, coreopts, appopts, complex, fields,
        dbtype, dotests]

    local errmess = '', stsmess = "", recstsmess = "";
    local receptor = [], recok = 1, recmess = '';
    local ligand = [], ligok = 1, ligmess = '';
    local dbkey = db_Open [coreopts.scoredb, 'create'];
    SetScoreFields [dbkey, coreopts.mode === 'Many-to-Many', fields];

    if coreopts.mode === 'One-to-One' or coreopts.mode === 'One-to-Many' then
        [receptor, ligand, errmess] = qb_AtomsToMols [];
        if receptor === [] or ligand === [] then
            Warning errmess;
            exit [];
        endif

        SaveEnv [dbkey, receptor, ligand, status, coreopts, appopts, complex, 
            dbtype];

        if dotests then
            recstsmess = GetStatusMessage ['Receptor', neL [status.recchg, 3]];
            [recok, recmess, ligok, ligmess] = TestComplex [
                coreopts.testLP, coreopts.testOverlap, coreopts.testH,
                coreopts.testMM];
        endif

        if tok_length recmess > 0 then
            recstsmess = cat [recstsmess, string recmess];
        endif

        if coreopts.mode === 'One-to-One' then
            if dotests then
                stsmess = cat [stsmess, recstsmess, GetStatusMessage ['Ligand', 
                    neL [status.ligchg, 3]]];
            endif

            if tok_length ligmess > 0 then
                stsmess = cat [stsmess, string ligmess];
            endif

            local posedata = tag [qb_GetPoseFields [], 
                [ligand, coreopts.ligchg]];
            local rowkey = db_Write [dbkey, 0, posedata];

            if not isnull stsmess then
                qb_SaveDivconStatus [dbkey, rowkey, stsmess];
            endif
        endif

    else
        SaveEnv [dbkey, [], [], status, coreopts, appopts, complex, dbtype];
    endif

    if neL [coreopts.mode, 'One-to-One'] then
        local posekey = db_Open [coreopts.posedb, 'read'];
        if dbkey === posekey then
            Warning twrite ['{} and {}\n are the same database.', 
                coreopts.scoredb, coreopts.posedb];
            exit [];
        endif

        if coreopts.mode === 'One-to-Many' then
            local pmess = CopyPoseDB [dbkey, posekey, coreopts.testLP,
                coreopts.testOverlap, coreopts.testH, coreopts.testMM,
                receptor, recstsmess];
            if neL [pmess, ''] then
                db_Close posekey;
                db_Close dbkey;
                Warning pmess;
                exit [];
            endif
        else
            local reckey = db_Open [coreopts.recdb, 'read'];
            if dbkey === reckey then
                Warning twrite ['{} and {}\n are the same database.', 
                    coreopts.scoredb, coreopts.recdb];
                exit [];
            endif

            local rmess = CopyRecPoseDB [dbkey, reckey, posekey, 
                coreopts.testLP, coreopts.testOverlap, coreopts.testH, 
                coreopts.testMM];
            if neL [rmess, ''] then
                db_Close reckey;
                db_Close posekey;
                db_Close dbkey;
                Warning rmess;
                exit [];
            endif

            db_Close reckey;
        endif

        db_Close posekey;
    endif

    return dbkey;
endfunction

/****************************************************************************
 *                          qb_SplitComplex
 *
 *  Split the set of atoms in the MOE Window into ligand and receptor atoms.
 *
 ****************************************************************************/
global function qb_SplitComplex [testsingle]

    local complexatoms = Atoms [];
    if length complexatoms === 0 then
        return [[], [], 'No molecular complex loaded in MOE Window.'];
    endif

    const COLLECTNAMES = ['QB_LIGAND', 'LIGX_LIGAND'];
    local recatoms, ligatoms;
    local cname, col, x;

    local colnames = oCollections [];
    for cname in COLLECTNAMES loop
        if anytrue eqE [cname, colnames] then
            //  Make sure the ligand atoms maintain their order in complex.
            col = cat oAtoms oGetCollection cname;
            col = join [col, complexatoms];
            x = x_sort aNumber col;
            ligatoms  = col [x];
            break;
        endif
    endloop

    if length ligatoms === 0 then
        ligatoms  = _Atoms '$$ligand';
    endif

    if length ligatoms === 0 or length ligatoms >= length complexatoms then
        return [[], [], 'No ligand was recognized.\n  Use LigX to define it.'];
    endif

    if testsingle and not SingleMol [ligatoms] then
        return [[], [], 'Ligand must to be a single molecule.'];
    endif

    oSetCollection ['QB_LIGAND', ligatoms];

    //  Make sure the receptor atoms maintain their order in complex.
    col = diff [complexatoms, ligatoms];
    x = x_sort aNumber col;
    recatoms  = col [x];

    return [recatoms, ligatoms, ''];
endfunction

/****************************************************************************
 *
 *                          qb_TagCoreVals
 *
 *  Tag the values from the core panel window.
 *
 ****************************************************************************/
global function qb_TagCoreVals [vals]

    vals.scoredb = fabsname vals.scoredb;
    vals.recdb = select ['', fabsname vals.recdb, vals.recdb === ''];
    vals.posedb = select ['', fabsname vals.posedb, vals.posedb === ''];

    local coreopts = tag [first tr CORE_OPT_DEFAULTS, [
        second first CORE_OPT_DEFAULTS,
        vals.mode, vals.cwd, vals.workdir,
        vals.scoredb,  vals.recdb, vals.posedb,
        vals.testLP, vals.testOverlap,
        vals.testH, vals.testMM,
        vals.recchg, vals.ligchg, vals.poseschg]];

    return coreopts;
endfunction

/****************************************************************************
 *                          qb_TestDivcon
 *
 *  Determine whether the molecule represented by the set of atoms has any
 *  problems by performing the flagged tests.
 *
 *  Returns:
 *    0     Fail
 *    1     Warn
 *    2     Okay
 *
 *  H counts:  ignore amines (MOE treats terminal amines as ammonium cations).
 *
 ****************************************************************************/
global function qb_TestDivcon [which, atoms, lonepair, overlap, 
        missextraH, MMtype]

    local warn = 0, error = 0, mess = '';
    local indices, residues, rnames, rnums, anames, ith; 
 
    local elements = aElement atoms;
    local ions = aIon atoms;

    //  Look for explicit lone pairs (MOE parsing errors)
    if lonepair then
        [indices] = indicesof [1, (elements == 'LP')];
        if length indices > 0 then
            residues = oParent atoms [indices];
            rnames = rName residues;
            rnums = rNumber residues;
            anames = aName atoms [indices];
            ith = 0; 
            mess = tok_cat [mess, '    Error!  LP atoms:\n'];
            for length indices loop
                ith = ith + 1;
                mess = tok_cat [mess, twrite ['        {}:  {} in {} {}\n', 
                    indices(ith), anames(ith), rnames(ith), rnums(ith)]];
            endloop

            error = 1;
        endif
    endif

    //  Look for overlapping atoms
    if overlap then
        local pairs = AtomOverlap [atoms, atoms];
        if length pairs > 0 then
            residues = oParent pairs;
            rnames = rName residues;
            rnums = rNumber residues;
            anames = aName pairs;
            indices = aNumber pairs;
            local dists = app aDist pairs;
            mess = tok_cat [mess, '    Error!  Overlapping atoms:\n'];
            for ith = 1, length pairs, 1 loop
                mess = tok_cat [mess, twrite ['        {}:  {} in {} {}'
                     ' is {}A from {}:  {} in {} {}\n', 
                    indices(ith)(1), anames(ith)(1), rnames(ith)(1),
                    rnums(ith)(1),  dists(ith), indices(ith)(2), 
                    anames(ith)(2), rnames(ith)(2), rnums(ith)(2)]];
            endloop

            error = 1;
        endif
    endif

    //  Look for missing/extra H
    if missextraH then
        local hcount = aHCount atoms;
        local explicit = aExplicitHCount atoms;
        [indices] = indicesof [1, (hcount <> explicit)
            and not ((elements == 'N') and (ions == 1)
            and (hcount - explicit == 1))];
        if length indices > 0 then
            residues = oParent atoms [indices];
            rnames = rName residues;
            rnums = rNumber residues;
            anames = aName atoms [indices];
            ith = 0; 
            mess = tok_cat [mess, '    Warning!  Check H on atoms:\n'];
            for length indices loop
                ith = ith + 1;
                mess = tok_cat [mess, twrite ['        {}:  {} in {} {}\n', 
                    indices(ith), anames(ith), rnames(ith), rnums(ith)]];
            endloop

            warn = 1;
        endif
    endif

    //  Look for unknown MM atom types
    if MMtype then
        local mmtypes = aMMType atoms;
        [indices] = indicesof [1, (mmtypes == '??')];
        if length indices > 0 then
            residues = oParent atoms [indices];
            rnames = rName residues;
            rnums = rNumber residues;
            anames = aName atoms [indices];
            ith = 0; 
            mess = tok_cat [mess, 
                '    Warning!  Unknown MM types for atoms:\n'];
            for length indices loop
                ith = ith + 1;
                mess = tok_cat [mess, twrite ['        {}:  {} in {} {}\n', 
                    indices(ith), anames(ith), rnames(ith), rnums(ith)]];
            endloop

            warn = 1;
        endif
    endif

    if error then
        mess = tok_cat [twrite ['Error!  Problematic {}:\n', which], mess];
    elseif warn then
        mess = tok_cat [twrite ['Warning!  Problematic {}:\n', which], mess];
    endif

    if error then
        return [0, mess];
    elseif warn then
        return [1, mess];
    else
        return [2, ''];
    endif

endfunction

/****************************************************************************
 *                          qb_UpdateCharge
 *
 *  Update the window based on new charge.
 *
 ****************************************************************************/
global function qb_UpdateCharge [wkey, status, rec, lig, warn]

    if MOE_BATCH then return [status, 'No MOE Window!']; endif

    local [recchg, recok, ligchg, ligok, errmess] = CalcComplexCharge [];
    if (rec and (recchg === [] or recok === [])
            or lig and (ligchg === [] or ligok === [])) then
        if warn then
            Warning  errmess;
        endif

        SetChargeStatus [wkey, status];
        return status;
    endif

    status.calcchg = 1;
    if rec then status.moerecchg = recchg; endif
    if lig then status.moeligchg = ligchg; endif

    if rec then status.recchg = select [2, 3, recok]; endif
    if lig then status.ligchg = select [2, 3, ligok]; endif

    WindowSetData [wkey, [ligchg: ligchg, recchg: recchg]];
    SetChargeStatus [wkey, status];

    return status;
endfunction

/****************************************************************************
 *
 *                          qb_UpdateCorePanel
 *
 *  Initialize the core panel window.
 *
 ****************************************************************************/
global function qb_UpdateCorePanel [wkey, status, coreopts]

    WindowSetData [wkey, dropfirst coreopts];
    status = CheckCharge [wkey, status, coreopts.recchg, coreopts.ligchg,
        neL [coreopts.mode, 'Many-to-Many']];
    UpdateMode [wkey, coreopts.mode, status];
    status.prevwd = UpdateCWD [wkey, coreopts.cwd, coreopts.workdir, 
        coreopts.workdir];

    return status;
endfunction

/****************************************************************************
 *                          qb_VerifyDivcon
 *
 *  Verify with the user that the current charges and/or molecules should
 *  be used even if they are problematic for Divcon.
 *
 *  Assumption:  called from MOE gui, not moebatch.
 *
 *
 ****************************************************************************/
global function qb_VerifyDivcon [wkey, status, vals]

    if vals.mode === 'Many-to-Many' then
        status.verified = 1;
        return status;
    endif

    local msgkey = Message [0, 'Testing ...'];

    local ynmess = '';
    status = CheckCharge [wkey, status, vals.recchg, vals.ligchg];
    local recchgok = neL [status.recchg, 3];
    local ligchgok = neL [status.ligchg, 3];
    local [recok, rm, ligok, lm] = TestComplex [1, 1, 0, 0];

    if not alltrue [recok, recchgok, ligok, ligchgok] then
        if not alltrue [recok, ligok] then
            ynmess = tok_cat [ynmess,
                twrite ['Problematic molecule in {}!\n',
                qb_GetWhich [not recok, not ligok]]];
        endif

        if not alltrue [recchgok, ligchgok] then
            ynmess =  tok_cat [ynmess, 
                twrite ['Problematic charge for {}!\n', 
                qb_GetWhich [not recchgok, not ligchgok]]];
        endif

        ynmess = tok_cat [ynmess, 'Continue anyway?'];
        if YesNo ynmess then
            status.verified = 1;
        else
            status.verified = 0;
        endif

    else
        status.verified = 1;

    endif

    Message [msgkey, 'Testing ... done.'];
    return status;

endfunction

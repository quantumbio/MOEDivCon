#svl

// The purpose of this file is to centralize all qbWebService functions in one place so that 
//  changes in protocol and the like can be fixed and maintained in a single file. Over time, if this
//  becomes unweildy, we could move these functions.

// WS Server (to be set through dialog box)
const QB_URL = 'http://localhost:8080';
// const QB_URL = 'http://shadowfax.quantumbioinc.com:8080';
// const QB_URL = 'http://shadowfax.quantumbioinc.com:8888';

// WS spec
const CRLF = "\r\n";

// Forward Declarations
function json_Create;
function json_Extract;
function qbWriteJSONStream;
function qbReadJSONStream;
function json_Read;

// Local Functions
local function boundaryGen[]
    const boundary_chars = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    return sample [shuffle boundary_chars, 40];
endfunction

local function getTargetChunk target_mol
    return cat [
        "Content-Disposition: form-data; name=\"Target\"", CRLF,
        "Content-Type: text/plain", CRLF,
        CRLF,
        string twrite ['{}',qbWriteJSONStream json_Extract target_mol], CRLF
    ];
endfunction

local function getLigandChunk ligand_mol
    return cat [
        "Content-Disposition: form-data; name=\"Ligand\"", CRLF,
        "Content-Type: text/plain", CRLF,
        CRLF,
        string twrite ['{}',qbWriteJSONStream json_Extract ligand_mol], CRLF    
    ];
endfunction

// Global Functions

// Function to call the MTScore webservice
global function qbWS_MTScore [target_mol, ligand_mol, opt]

    local boundary = boundaryGen[];
    local ctype = cat ["multipart/form-data; boundary=", boundary];
    boundary = cat ["--", boundary]; // add two dashes by the standards

    local Instructions = cat [
        "Content-Disposition: form-data; name=\"Instructions\"", CRLF,
        "Content-Type: text/plain", CRLF,
        CRLF,
        "{ \"options\": {\"scoretype\": \"endstate\"}}", CRLF
    ];

    local POST_CONTENT = cat [
        boundary, CRLF,
        Instructions,
        boundary, CRLF,
        getTargetChunk target_mol,
        boundary, CRLF,
        getLigandChunk ligand_mol,
        boundary, "--", CRLF    
    ];

    local url = curl_open [
        url: tok_cat [QB_URL, '/qmechanic/movabletype'],
        httpheader: [ 'Transfer-Encoding: Chunked', 
                 'TargetName: target.json',
                 'LigandName: ligand.json']
    ]; 

    curl_write  [url, POST_CONTENT];

    local tmpJSON = curl_read url;
    curl_close url;
#if 1
    fwrite ['debug-WSPOST.txt', '{}\n', POST_CONTENT];
    fwrite ['debug-WSRETURN.txt','{}',tmpJSON];
#endif
    // Return the JSON tagged vector to be used by other functions
    return qbReadJSONStream tmpJSON;
endfunction

// Tester function for the MTScore tool

// Can be run in the SVL window or on the MOE/batch commandline:
//      $ moebatch -licwait -exec "eval [qbMTScoreFile ['4w7t_protein.pdb', '4w7t_ligand.mol2']]" -exit
global function qbMTScoreFile [targetfile,ligandfile]
    local pdata = SystemPush [];
    write ['MTScore: {} : {} | ', fbase ftail targetfile, fbase ftail ligandfile];
    local starttime = clock [];
    local targetobj, ligandobj;
    targetobj = ReadAuto targetfile;
    ligandobj = ReadAuto ligandfile;
    // ligandobj = _Atoms '$$ligand';
    
//    local tmpJSON = qbWS_MTScore [diff [Atoms[], _Atoms '$$ligand'],_Atoms '$$ligand'];
    local tmpJSON = qbWS_MTScore [targetobj,ligandobj];
    write ['{} {} {}  | {} sec\n', tmpJSON.('MTScoreES'),tmpJSON.('E_Sol'),tmpJSON.('dG'), (clock [] - starttime) ];
//    write ['MTScore: {} : {} | {} {} {}  | {} sec\n', fbase ftail targetfile, fbase ftail ligandfile, tmpJSON.('MTScore'),tmpJSON.('E_Sol'),tmpJSON.('dG'), (clock [] - starttime) ];

    SystemPop pdata;
endfunction

global function qbRunMTPairList listfile
    local L;
    local fnum = fopen listfile;
    write ['CALC:      TARGET     :    LIGAND   | InteractE  E_sol  MTScoreES | TIME\n'];
    while length (L = cat freadb [fnum, 'line', 1]) loop
        write ['this one\n'];
        if second task_fork [] == 'child' then
            L = fieldsplit [ L," "];
            qbMTScoreFile [token first L, token second L];
            exit[];
        endif
    endloop
endfunction

#eof

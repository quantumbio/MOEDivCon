#svl

// The purpose of this file is to centralize all qbWebService functions in one place so that 
//  changes in protocol and the like can be fixed and maintained in a single file. Over time, if this
//  becomes unweildy, we could move these functions.

// WS spec
const CRLF = "\r\n";

// Forward Declarations
function json_Create;
function json_Extract;
function qbWriteJSONStream;
function qbReadJSONStream;
function json_Read;

// Local Functions
local function boundaryGen[]
    const boundary_chars = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    return sample [shuffle boundary_chars, 40];
endfunction

local function getTargetChunk target_mol
    return cat [
        "Content-Disposition: form-data; name=\"Target\"", CRLF,
        "Content-Type: text/plain", CRLF,
        CRLF,
        string twrite ['{}',qbWriteJSONStream json_Extract target_mol], CRLF
    ];
endfunction

local function getLigandChunk ligand_mol
    return cat [
        "Content-Disposition: form-data; name=\"Ligand\"", CRLF,
        "Content-Type: text/plain", CRLF,
        CRLF,
        string twrite ['{}',qbWriteJSONStream json_Extract ligand_mol], CRLF    
    ];
endfunction

local function getWSHostNPort []
    return twrite ['http://{}:{}',
        GetRC ['QuantumBio.qbWSHostname','localhost'],
        GetRCNumber ['QuantumBio.qbWSPort',8080]
    ];
endfunction

// Global Functions

global function qbWSTestEndpoint url

    if isnull url then
        url = getWSHostNPort[];
    endif
    
    local curlkey = curl_open [url: tok_cat [url, twrite ['/qmechanic/']]];
    local [curl_out, err] = task_call [ 'curl_read',  curlkey, [errmsg:'ignore'] ];
    curl_close curlkey;

    if err === '' then
    else
        curl_out = '';
    endif

    return qbReadJSONStream curl_out;

endfunction

// Function to call the MTScore webservice
global function qbWS_MTScore [target_mol, ligand_mol, opt]

    local boundary = boundaryGen[];
    local ctype = cat ["multipart/form-data; boundary=", boundary];
    boundary = cat ["--", boundary]; // add two dashes by the standards

    local Instructions = cat [
        "Content-Disposition: form-data; name=\"Instructions\"", CRLF,
        "Content-Type: text/plain", CRLF,
        CRLF,
        "{ \"options\": {\"mtscore\": \"endstate\"}}", CRLF
//         "{ \"options\": {\"scoretype\": \"endstate\"}}", CRLF
    ];

    local POST_CONTENT = cat [
        boundary, CRLF,
        Instructions,
        boundary, CRLF,
        getTargetChunk target_mol,
        boundary, CRLF,
        getLigandChunk ligand_mol,
        boundary, "--", CRLF    
    ];

#if 1
    fwrite ['debug-WSPOST.txt', '{}\n', POST_CONTENT];
#endif
        
    local url = curl_open [
        url: tok_cat [getWSHostNPort[], '/qmechanic/movabletype'],
        httpheader: [ 'Transfer-Encoding: Chunked', 
                 'TargetName: target.json',
                 'LigandName: ligand.json']
                 // 'PosesName: poses.json'
    ]; 

    curl_write  [url, POST_CONTENT];

    local tmpJSON = curl_read url;
    curl_close url;

#if 1
    fwrite ['debug-WSRETURN.txt','{}',tmpJSON];
#endif
    // Return the JSON tagged vector to be used by other functions
    return qbReadJSONStream tmpJSON;
endfunction

// Tester function for the MTScore tool

// Can be run in the SVL window or on the MOE/batch commandline:
//      $ moebatch -licwait -exec "eval [qbMTScoreFile ['4w7t_protein.pdb', '4w7t_ligand.mol2']]" -exit
global function qbMTScoreFile [targetfile,ligandfile]
    local pdata = SystemPush [];
    write ['MTScore: {} : {} | ', fbase ftail targetfile, fbase ftail ligandfile];
    local starttime = clock [];
    local targetobj, ligandobj;
    targetobj = ReadAuto targetfile;
    ligandobj = ReadAuto ligandfile;
    // ligandobj = _Atoms '$$ligand';
    
//    local tmpJSON = qbWS_MTScore [diff [Atoms[], _Atoms '$$ligand'],_Atoms '$$ligand'];
    local tmpJSON = qbWS_MTScore [targetobj,ligandobj];
    write ['{} {} {}  | {} sec\n', tmpJSON.('MTScoreES'),tmpJSON.('E_Sol'),tmpJSON.('dG'), (clock [] - starttime) ];
//    write ['MTScore: {} : {} | {} {} {}  | {} sec\n', fbase ftail targetfile, fbase ftail ligandfile, tmpJSON.('MTScore'),tmpJSON.('E_Sol'),tmpJSON.('dG'), (clock [] - starttime) ];

    SystemPop pdata;
endfunction

global function qbRunMTPairList listfile
    local L;
    local fnum = fopen listfile;
    write ['CALC:      TARGET     :    LIGAND   | InteractE  E_sol  MTScoreES | TIME\n'];
    while length (L = cat freadb [fnum, 'line', 1]) loop
        write ['this one\n'];
        if second task_fork [] == 'child' then
            L = fieldsplit [ L," "];
            qbMTScoreFile [token first L, token second L];
            exit[];
        endif
    endloop
endfunction

global function qbWSConfig wparent

    local DEFAULTS = [
        qbWSHostname: GetRC ['QuantumBio.qbWSHostname','localhost'],
        qbWSPort:     GetRCNumber ['QuantumBio.qbWSPort',8080]
    ];

    local wkey = WindowCreate
    [
        title: 'qbWebService Setup',
        name: 'panel',
        text:   ['Save','Cancel'],
        onTrigger: ['validate','return'],
        bubbleHelp: [
            'Configure qbWebService (hostname and port).'
        ], 
        Mbox : [
            Text : [
                title: 'Hostname:', name: 'qbWSHostname', type: 'char',allowBlank:0,len:20,
                value: GetRC ['QuantumBio.qbWSHostname','localhost'],
                shortcut: ['localhost'],
                onTrigger: 'return',
                bubbleHelp: 'Enter hostname (default: localhost).'
            ],
            Hbox : [            
                Text : [
                    title: 'Port:', name: 'qbWSPort', type: 'int',allowBlank:0,len:5,
                    value: GetRCNumber ['QuantumBio.qbWSPort',8080],
                    shortcut: ['8080','8081','8082'],
                    onTrigger: 'return',
                    bubbleHelp: 'Enter the port number (default: 8080).'
                ],
                Label : [
                    text: '', name: 'wsStatus', centerH: 1, extendH: 1
                ]
            ]
        ]
    ];

    function UpdateStatus wkey
        local values = WindowValues wkey;
        local tmpURL = twrite ['http://{}:{}', values.qbWSHostname, values.qbWSPort];
        local tmpConnect = qbWSTestEndpoint tmpURL;
        if length tmpConnect == 0 then
            WindowSetAttr [wkey, [wsStatus: [text: 'No Connection', foreground: 'red']]];
        else
            WindowSetAttr [wkey, [wsStatus: [text: 'Connection OK', foreground: 'blue']]];
        endif                        
    endfunction
    
    WindowShow wkey;
    UpdateStatus wkey;
    loop
        local [values, trigger] = WindowWait wkey;
        if trigger === 'qbWSHostname' or trigger === 'qbWSPort' then
            UpdateStatus wkey;
        elseif trigger === 'panel' then
            if values.panel == 'Cancel' then break; endif
            if values.panel == 'Save' then
                SetRC ['QuantumBio.qbWSHostname',values.qbWSHostname];
                SetRCNumber ['QuantumBio.qbWSPort',values.qbWSPort];
                break;
            endif
        endif
    endloop
    WindowDestroy wkey;
    
endfunction

#eof

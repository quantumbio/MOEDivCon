#svl

// The purpose of this file is to centralize all qbWebService functions in one place so that 
//  changes in protocol and the like can be fixed and maintained in a single file. Over time, if this
//  becomes unweildy, we could move these functions.

// WS spec
const CRLF = "\r\n";

// Forward Declarations
function json_Create;
function json_Extract;
function qbWriteJSONStream;
function qbReadJSONStream;
function json_Read;

// Local Functions
local function boundaryGen[]
    const boundary_chars = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    return sample [shuffle boundary_chars, 40];
endfunction

local function getTargetChunk target_mol
    return cat [
        "Content-Disposition: form-data; name=\"Target\"", CRLF,
        "Content-Type: text/plain", CRLF,
        CRLF,
        string twrite ['{}',qbWriteJSONStream json_Extract target_mol], CRLF
    ];
endfunction

local function getLigandChunk ligand_mol
    return cat [
        "Content-Disposition: form-data; name=\"Ligand\"", CRLF,
        "Content-Type: text/plain", CRLF,
        CRLF,
        string twrite ['{}',qbWriteJSONStream json_Extract ligand_mol], CRLF    
    ];
endfunction

local function getWSHostNPort [hostname, portnum]
    if isnull hostname then
        hostname = GetRC ['QuantumBio.qbWSHostname','localhost'];
    endif
    if isnull portnum then
        portnum = GetRCNumber ['QuantumBio.qbWSPort',8080];
    endif
    
    return twrite ['http://{}:{}', hostname, portnum ];
endfunction

// Global Functions

global function qbWSTestEndpoint url

    if isnull url then
        url = getWSHostNPort[];
    endif
    
    local curlkey = curl_open [url: tok_cat [url, twrite ['/qmechanic/']]];
    local [curl_out, err] = task_call [ 'curl_read',  curlkey, [errmsg:'ignore'] ];
    curl_close curlkey;

    if err === '' then
    else
        curl_out = '';
    endif

    return qbReadJSONStream curl_out;

endfunction

// Function to call the MTScore webservice
global function qbWS_MTScore [target_mol, ligand_mol, hostname, portnum]
    local boundary = boundaryGen[];
    local ctype = cat ["multipart/form-data; boundary=", boundary];
    boundary = cat ["--", boundary]; // add two dashes by the standards

    local Instructions = cat [
        "Content-Disposition: form-data; name=\"Instructions\"", CRLF,
        "Content-Type: text/plain", CRLF,
        CRLF,
        "{ \"options\": {\"mtscore\": \"endstate\"}}", CRLF
//         "{ \"options\": {\"scoretype\": \"endstate\"}}", CRLF
    ];

    local POST_CONTENT = cat [
        boundary, CRLF,
        Instructions,
        boundary, CRLF,
        getTargetChunk target_mol,
        boundary, CRLF,
        getLigandChunk ligand_mol,
        boundary, "--", CRLF    
    ];

#if 1
    fwrite ['debug-WSPOST.txt', '{}\n', POST_CONTENT];
#endif
        
    local url = curl_open [
        url: tok_cat [getWSHostNPort[hostname, portnum], '/qmechanic/movabletype'],
        httpheader: [ 'Transfer-Encoding: Chunked', 
                 'TargetName: target.json',
                 'LigandName: ligand.json']
                 // 'PosesName: poses.json'
    ]; 

    curl_write  [url, POST_CONTENT];

//    local tmpJSON = curl_read url;

    local [tmpJSON, err] = task_call [ 'curl_read',  url, [errmsg:'ignore'] ];
    write ['tmpJSON: {}\n',tmpJSON];
    curl_close url;
    write ['err: {}\n', err];
    if err === '' then
        tmpJSON = qbReadJSONStream tmpJSON;
        tmpJSON.success = 1;
    else
        Warning tmpJSON;
        tmpJSON = qbReadJSONStream tmpJSON;
        tmpJSON.success = 0;
    endif


#if 1
    fwrite ['debug-WSRETURN.txt','{}',tmpJSON];
#endif
    // Return the JSON tagged vector to be used by other functions
//    return qbReadJSONStream tmpJSON;
    return tmpJSON;
endfunction

// Tester function for the MTScore tool

// Can be run in the SVL window or on the MOE/batch commandline:
//      $ moebatch -licwait -exec "eval [qbMTScoreFile ['4w7t_protein.pdb', '4w7t_ligand.mol2']]" -exit
global function qbMTScoreFile [targetfile,ligandfile]
    local pdata = SystemPush [];
    write ['MTScore: {} : {} | ', fbase ftail targetfile, fbase ftail ligandfile];
    local starttime = clock [];
    local targetobj, ligandobj;
    targetobj = ReadAuto targetfile;
    ligandobj = ReadAuto ligandfile;
    // ligandobj = _Atoms '$$ligand';
    
//    local tmpJSON = qbWS_MTScore [diff [Atoms[], _Atoms '$$ligand'],_Atoms '$$ligand'];
    local tmpJSON = qbWS_MTScore [targetobj,ligandobj];
    write ['{} {} {}  | {} sec\n', tmpJSON.('MTScoreES'),tmpJSON.('E_Sol'),tmpJSON.('dG'), (clock [] - starttime) ];
//    write ['MTScore: {} : {} | {} {} {}  | {} sec\n', fbase ftail targetfile, fbase ftail ligandfile, tmpJSON.('MTScore'),tmpJSON.('E_Sol'),tmpJSON.('dG'), (clock [] - starttime) ];

    SystemPop pdata;
endfunction

global function qbRunMTPairList listfile
    local L;
    local fnum = fopen listfile;
    write ['CALC:      TARGET     :    LIGAND   | InteractE  E_sol  MTScoreES | TIME\n'];
    while length (L = cat freadb [fnum, 'line', 1]) loop
        write ['this one\n'];
        if second task_fork [] == 'child' then
            L = fieldsplit [ L," "];
            qbMTScoreFile [token first L, token second L];
            exit[];
        endif
    endloop
endfunction

global function qbWSConfig [cmd, wkey, trigger, values]

    local DEFAULTS = [
        qbWSHostname: GetRC ['QuantumBio.qbWSHostname','localhost'],
        qbWSPort:     GetRCNumber ['QuantumBio.qbWSPort',8080]
    ];
    
    local config = gr_icon ['$MOE/lib/icon/config.ico', 12, 'foreground'];
    
    function apprHost inName
        const hostlen = 10;
        inName = string inName;
        if length inName > hostlen then
            inName = twrite ['{}...',resize [inName,hostlen]];
        endif
        return twrite ['{}',inName];
    endfunction

    if cmd == 'getWidget' then
        return [
//            Hbox:   [
                extendH: 1,
                Label: [
                    text: 'qbWebService:',
                    font: 'mediumFixedBold'
                ],
                Label: [
                    name: 'qbwebservice_info',
                    text: twrite ['{}:{}', apprHost GetRC ['QuantumBio.qbWSHostname','localhost'],GetRCNumber ['QuantumBio.qbWSPort',8080]],
                    bubbleHelp:twrite ['{}:{}',GetRC ['QuantumBio.qbWSHostname','localhost'],GetRCNumber ['QuantumBio.qbWSPort',8080]]
                ],
                Button: [
                    title: '', name: 'button_WSsetup', graphics: config,
                    bubbleHelp: 'Configure QuantumBio WebSerice (host and port).'
                ]
//            ]
        ];
    elseif cmd == 'processWidget' then
    
        if trigger === 'button_WSsetup' then
    
            local wConfKey = WindowCreate
            [
                title: 'qbWebService Setup',
                name: 'panel',
                text:   ['Save','Cancel'],
                onTrigger: ['validate','return'],
                bubbleHelp: [
                    'Configure qbWebService (hostname and port).'
                ], 
                Mbox : [
                    Text : [
                        title: 'Hostname:', name: 'qbWSHostname', type: 'char',allowBlank:0,len:20,
                        value: GetRC ['QuantumBio.qbWSHostname','localhost'],
                        shortcut: ['localhost'],
                        onTrigger: 'return',
                        bubbleHelp: 'Enter hostname (default: localhost).'
                    ],
                    Hbox : [            
                        Text : [
                            title: 'Port:', name: 'qbWSPort', type: 'int',allowBlank:0,len:5,
                            value: GetRCNumber ['QuantumBio.qbWSPort',8080],
                            shortcut: ['8080','8081','8082'],
                            onTrigger: 'return',
                            bubbleHelp: 'Enter the port number (default: 8080).'
                        ],
                        Label : [
                            text: '', name: 'wsStatus', centerH: 1, extendH: 1
                        ]
                    ]
                ]
            ];

            function UpdateStatus wConfKey
                local vals = WindowValues wConfKey;
                local tmpURL = twrite ['http://{}:{}', vals.qbWSHostname, vals.qbWSPort];
                local tmpConnect = qbWSTestEndpoint tmpURL;
                if length tmpConnect == 0 then
                    WindowSetAttr [wConfKey, [wsStatus: [text: 'No Connection', foreground: 'red']]];
                else
                    WindowSetAttr [wConfKey, [wsStatus: [text: 'Connection OK', foreground: 'blue']]];
                endif                        
            endfunction
    
            WindowShow wConfKey;
            UpdateStatus wConfKey;
            loop
                local [vals, trig] = WindowWait wConfKey;
                if trig === 'qbWSHostname' or trig === 'qbWSPort' then
                    UpdateStatus wConfKey;
                elseif trig === 'panel' then
                    if vals.panel == 'Cancel' then break; endif
                    if vals.panel == 'Save' then
                        SetRC ['QuantumBio.qbWSHostname',vals.qbWSHostname];
                        SetRCNumber ['QuantumBio.qbWSPort',vals.qbWSPort];
                        break;
                    endif
                endif
            endloop
            WindowDestroy wConfKey;
    
            WindowSetAttr [wkey, [
            qbwebservice_info: [text:twrite ['{}:{}',
                apprHost GetRC ['QuantumBio.qbWSHostname','localhost'],
                GetRCNumber ['QuantumBio.qbWSPort',8080]],
                bubbleHelp:twrite ['{}:{}',
                GetRC ['QuantumBio.qbWSHostname','localhost'],
                GetRCNumber ['QuantumBio.qbWSPort',8080]]
                ]
            ]];
            return 1;
        endif
        return 0;
    endif
        
endfunction

// For running on the command line ()
//
//  EXAMPLE: % moebatch -run $QBHOME/svl/qbWebService.svl -rec thrombin_030215.pdb -lig thrombin_030215_Lig3b.mol2 -host localhost -port 8080
//
global argv;

function ArgvPull;

local function main []

    local startcputime = cpuclock[];
    local starttime = clock[];
    local inopt;
    ArgvReset ArgvExpand argv;
    local [recfilename, ligfilename, hostname, port] = ArgvPull [ ['-rec', '-lig','-host','-port'], [1,1,1,1] ];
    local remaining = ArgvAll [];
    if not isnull remaining then
        exit twrite ['ERROR: Unknown command line options: {}\n',remaining];
    endif

    if not isnull recfilename then
        local rec = cat cat cAtoms ReadAuto recfilename;
        if isnull rec then
            exit twrite ['Cannot read receptor file {}', recfilename];
        endif
    else
        exit twrite ['Use -rec command line argument to provide an input file for RECEPTOR'];
    endif
    
    if not isnull ligfilename then
        local lig = cat cat cAtoms ReadAuto ligfilename;
        local ligResidue = aResidue first lig;
        oReparent [diff [lig, first lig], ligResidue];  // MOE appears to need all lignad atoms in a single residue
        if isnull lig then
            exit twrite ['Cannot read receptor file {}', ligfilename];
        endif
    else
        exit twrite ['Use -lig command line argument to provide an input file for LIGAND'];
    endif

    if isnull hostname then
        hostname = GetRC ['QuantumBio.qbWSHostname','localhost'];
    endif
    
    if isnull port then
        port = GetRCNumber ['QuantumBio.qbWSPort',8080];
    endif
    
    write ['Scoring {} target atoms & {} ligand atoms on qbWebService: {}\n', length rec, length lig, getWSHostNPort[hostname, port]];
    local scoreData = qbWS_MTScore [rec, lig, hostname, port];
    write ['scoreData: {}\n', qbWriteJSONStream scoreData];
    
endfunction

#eof

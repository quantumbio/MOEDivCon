local function jvmqb arg

    // some Java/SVL access functions take time (especially when reading in a new mol).
    //      this task will pop up just to make sure that the user knows that something is going on.
    if second task_fork [master:'parent'] === 'child' then          // this will give the user some feedback
        task_settitle [ task_key -1, 'mem_progress'];
        sleep 2.0;
        local wkey = WindowCreate [Hbox: [ Label:[name:'progressLabel',title:'H5 Processing: ',text:'--']]];
        WindowShow wkey;
        local loopCount = '|';
        loop
            sleep 0.5;
            if loopCount == '|' then
                loopCount = '/';
            elseif loopCount == '/' then
                loopCount = '-';
            elseif loopCount == '-' then
                loopCount = '\\';
            elseif loopCount == '\\' then
                loopCount = '|';
            endif
            WindowSetAttr[wkey, [ progressLabel: [text: [twrite['{}',loopCount] ]] ]];
        endloop
    endif

    local [result,code] = jvm ['HDF5Correspondent', arg];
    task_kill (task_keylist [] | task_title task_keylist [] == 'mem_progress');
    if code == 'error' then exit result; endif
    return [cat first result, second result];
//    return cat result;      // Java returns a vector-packaged result. cat de-nests packaging.
//    return [result,code];
 //   return jvm ['HDF5Correspondent', arg];
endfunction


global function qbListModels  arg = jvmqb ['listModels' , [arg] ];

global function qbRetrieveQMScore  arg = jvmqb ['retrieveQMScore' , [arg] ];
global function qbRetrieveResiduePWD  arg  = jvmqb ['retrieveResiduePWD' , [arg]  ];
global function qbRetrieveAtomByAtomPWD  arg  = jvmqb ['retrieveAtomByAtomPWD' , [arg]  ];
global function qbRetrieveAtomByAtomDecomposition  arg  = jvmqb ['retrieveAtomByAtomDecomposition' , [arg]  ];
global function qbRetrieveAtomByAtomMRM  arg  = jvmqb ['retrieveAtomByAtomMRM' , [arg]  ];

global function qbRetrieveNMRScore  arg = jvmqb ['retrieveNMRScore' , [arg] ];
global function qbRetrieveChemicalShifts  arg = jvmqb ['retrieveChemicalShifts' , [arg] ];

global function qbRetrieveDensities  arg = jvmqb ['retrieveDensities' , [arg] ];
global function qbRetrieveEigenVectors  arg = jvmqb ['retrieveEigenVectors' , [arg] ];
global function qbRetrieveEnergyLevels  arg = jvmqb ['retrieveEnergyLevels' , [arg] ];
global function qbSetNMRAtomSelection  arg = jvmqb ['setNMRAtomSelection' , [arg] ];
global function qbStoreModel  arg = jvmqb ['storeModel' , [arg] ];
global function qbRetrieveModel  arg = jvmqb ['retrieveModel' , [arg] ];
global function qbRetrievePosingModel  arg = jvmqb ['retrievePosingModel' , [arg] ];
global function qbRetrieveHamiltonian  arg = jvmqb ['retrieveHamiltonian' , [arg] ];
global function qbRetrieveDefaultProgramOptions  arg = jvmqb ['retrieveDefaultProgramOptions' , [arg] ];
global function qbRetrieveLigandSelection  arg = jvmqb ['retrieveLigandSelection' , [arg] ];
global function qbRetrieveTopologyClassNumbers  arg = jvmqb ['retrieveTopologyClassNumbers' , [arg] ];



// The following function can be used test the new h5 
// example:
// qbmoebatch -exec "qbTesth5Main['c387.h5']" -exit

global function qbTesth5Main [h5file]
    write ['{}\n',h5file];
    if isnull h5file then
        return;
    endif

    print qbListModels [h5file];
    
    write ['length {}\n', length  qbListModels [h5file]];
    
    local [modelTags, errorcode] =  qbListModels [h5file];

//    write ['length modelTags.target : {}\n', length modelTags.target];
    
//    write ['modelTags.target: {}\n', modelTags.target];
//    write ['modelTags.ligand: {}\n', modelTags.ligand];
    
//    local NMRvalues=cat qbRetrieveNMRAverages [h5file,modelTags.target];
//    write ['{}\n',NMRvalues.Index];
//    write ['{}\n',NMRvalues.Average];

 //   print qbListModels [h5file];
    //print qbRetrieveQMScore [h5file, modelTags.target];
    //print qbRetrieveResiduePWD [h5file, modelTags.target];
    print qbRetrieveAtomByAtomDecomposition [h5file, modelTags.target, 'Initial'];
//    print qbRetrieveAtomByAtomDecomposition [h5file, modelTags.target, 'Final'];
    //print qbRetrieveAtomByAtomMRM [h5file, modelTags.target];
    print qbRetrieveNMRScore [h5file, modelTags.target];
    print modelTags.ligand[3];
    print qbRetrieveNMRScore [h5file, modelTags.target, modelTags.ligand[3]];
//    print qbRetrieveChemicalShifts [h5file, modelTags.target, 'Wildtype'];
//    print  qbRetrieveDensities [h5file, modelTags.target];
//    print  qbRetrieveEigenVectors [h5file, modelTags.target];
//    print  qbRetrieveEnergyLevels [h5file, modelTags.target];
   // qbSetNMRAtomSelection [h5file, modelTags.target, [0,1,2,10]];
   // print  qbRetrieveHamiltonian [modelTags.target, 'pm6'];
    print  qbRetrieveDefaultProgramOptions [];
    print  qbRetrieveLigandSelection [h5file, modelTags.target];
print  modelTags.target;
    local [newmol, errorcode2] = qbRetrieveModel [h5file, modelTags.target];
    print newmol;
    local [newmol2, errorcode3] = qbRetrievePosingModel [h5file, modelTags.target, modelTags.ligand[2]];
    print "\n";
    print newmol2;
endfunction


global function qbTestException[h5file]
    local modelTags,return_code,result;
    [modelTags,return_code] = qbListModels [h5file];
    modelTags = cat modelTags;

    [result, return_code] = task_call ['qbRetrieveChemicalShifts', [h5file, modelTags.target, 'Wildtype'], [creator:'blockEOK',errmsg:'ignore']];
write ['{} | {}\n', result, return_code];
    [result, return_code] = task_call ['qbRetrieveChemicalShifts', [h5file, modelTags.target, 'test'], [creator:'blockEOK',errmsg:'ignore']];
write ['{} | {}\n', result, return_code];
endfunction

// Test the function to write the molecule out to a file.
// qbmoebatch -exec "qbTestPDB2H5 ['infile.h5','some.pdb']" -exit

global function qbTestPDBtoH5 [h5file,inpdb]
    write ['{}\n',h5file];
    if isnull h5file then
        return;
    endif
    oDestroy Chains[];
    local tmpChains = ReadAuto inpdb;

    // For format see: file:///share/apps/MOE/MOE-2012/html/moe/fcnref/extract.htm#mol_Extract

    local oldmol = mol_Extract tmpChains;
    
    print oldmol;
    print qbStoreModel [h5file, 'rec', oldmol];
    local newmol = qbRetrieveModel [h5file, 'rec'];
    print "TEST\n";
    print newmol;
  return;  
    oDestroy Chains[];
    
    print "COMPARISON ======";
    
    write ['lengths: {} | {} \n', length oldmol, length newmol];
    write ['lengths: {} | {} || {} | {}\n', length oldmol(1), length newmol(1), oldmol(1), newmol(1)];
    write ['lengths: {} | {} \n', length oldmol(2), length newmol(2)];
    write ['lengths: {} | {} \n', length oldmol(3), length newmol(3)];
    write ['lengths: {} | {} \n', length oldmol(4), length newmol(4)];

    print "COMPARISON ======";
    mol_Create newmol;
    local outfile = twrite['{}-new.{}', fbase inpdb,fext inpdb];
    write ['Outfile: {}\n', outfile];
    WriteAuto [outfile];

endfunction

function qbProcessCSVNMR;

global function qbTestNewNMRpre [h5file,inTarget,inLigand,inCSVfile]
    write ['{}\n',h5file];
    if isnull h5file then
        return;
    endif
    
    local inopt;
    inopt.targ_file = inTarget;
    inopt.lig_file = inLigand;
    inopt.ascii_file = inCSVfile;
    inopt.h5file = h5file;
    
    qbProcessCSVNMR inopt;

endfunction

function qbProcessComplexCSP;

global function qbTestNewNMRpost [h5file,inTarget,inLigand,inCSVfile]

    write ['{}\n',h5file];
    if isnull h5file then
        return;
    endif
    
    local inopt;
    inopt.targ_file = inTarget;
    inopt.lig_file = inLigand;
    inopt.ascii_file = inCSVfile;
    inopt.h5file = h5file;
    
    // TODO: I plan to make this function work like the one in the qbTestNewNMRpre function, but right now they look a little different.
    qbProcessComplexCSP [inopt.targ_file,inopt.lig_file,inopt.h5file];

endfunction



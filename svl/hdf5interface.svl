local function jvmqb arg
    local [result,code] = jvm ['HDF5Correspondent', arg];
    if code == 'error' then exit result; endif
    return result;
endfunction


global function qbListModels  arg = jvmqb ['listModels' , [arg] ];
global function qbRetrieveQMScore  arg = jvmqb ['retrieveQMScore' , [arg] ];
global function qbRetrieveResiduePWD  arg  = jvmqb ['retrieveResiduePWD' , [arg]  ];
global function qbRetrieveAtomByAtomPWD  arg  = jvmqb ['retrieveAtomByAtomPWD' , [arg]  ];
global function qbRetrieveAtomByAtomMRM  arg  = jvmqb ['retrieveAtomByAtomMRM' , [arg]  ];
global function qbRetrieveNMRScore  arg = jvmqb ['retrieveNMRScore' , [arg] ];
global function qbRetrieveChemicalShifts  arg = jvmqb ['retrieveChemicalShifts' , [arg] ];
global function qbRetrieveDensities  arg = jvmqb ['retrieveDensities' , [arg] ];
global function qbRetrieveEigenVectors  arg = jvmqb ['retrieveEigenVectors' , [arg] ];
global function qbRetrieveEnergyLevels  arg = jvmqb ['retrieveEnergyLevels' , [arg] ];
global function qbSetNMRAtomSelection  arg = jvmqb ['setNMRAtomSelection' , [arg] ];
global function qbStoreModel  arg = jvmqb ['storeModel' , [arg] ];
global function qbRetrieveModel  arg = jvmqb ['retrieveModel' , [arg] ];
global function qbRetrieveHamiltonian  arg = jvmqb ['retrieveHamiltonian' , [arg] ];
global function qbRetrieveDefaultProgramOptions  arg = jvmqb ['retrieveDefaultProgramOptions' , [arg] ];

// The following function can be used test the new h5 
// example:
// qbmoebatch -exec "qbTesth5Main['c387.h5']" -exit

global function qbTesth5Main [h5file]
    write ['{}\n',h5file];
    if isnull h5file then
        return;
    endif

    print qbListModels [h5file];
    
//    write ['length {}\n', length cat qbListModels [h5file]];
    
    local modelTags = cat qbListModels [h5file];
    
//    write ['length modelTags.target : {}\n', length modelTags.target];
    
//    write ['modelTags.target: {}\n', modelTags.target];
//    write ['modelTags.ligand: {}\n', modelTags.ligand];
    
//    local NMRvalues=cat qbRetrieveNMRAverages [h5file,modelTags.target];
//    write ['{}\n',NMRvalues.Index];
//    write ['{}\n',NMRvalues.Average];

 //   print qbListModels [h5file];
    //print qbRetrieveQMScore [h5file, modelTags.target];
    //print qbRetrieveResiduePWD [h5file, modelTags.target];
    //print qbRetrieveAtomByAtomPWD [h5file, modelTags.target];
    //print qbRetrieveAtomByAtomMRM [h5file, modelTags.target];
    print qbRetrieveNMRScore [h5file, modelTags.target];
    print qbRetrieveChemicalShifts [h5file, modelTags.target, 'Wildtype'];
    //print  qbRetrieveDensities [h5file, modelTags.target];
    //print  qbRetrieveEigenVectors [h5file, modelTags.target];
    //print  qbRetrieveEnergyLevels [h5file, modelTags.target];
   // qbSetNMRAtomSelection [h5file, modelTags.target, [0,1,2,10]];
   // print  qbRetrieveHamiltonian [modelTags.target, 'pm6'];
   // print  qbRetrieveDefaultProgramOptions [];

endfunction

// Test the function to write the molecule out to a file.
// qbmoebatch -exec "qbTestPDB2H5 ['infile.h5','some.pdb']" -exit

global function qbTestPDBtoH5 [h5file,inpdb]
    write ['{}\n',h5file];
    if isnull h5file then
        return;
    endif

    local tmpChains = ReadAuto inpdb;

    // For format see: file:///share/apps/MOE/MOE-2012/html/moe/fcnref/extract.htm#mol_Extract

    print mol_Extract tmpChains;
    print qbStoreModel [h5file, 'rec', mol_Extract tmpChains];
    print qbRetrieveModel [h5file, 'rec'];
endfunction

function qbProcessCSVNMR;

global function qbTestNewNMRpre [h5file,inTarget,inLigand,inCSVfile]
    write ['{}\n',h5file];
    if isnull h5file then
        return;
    endif
    
    local inopt;
    inopt.targ_file = inTarget;
    inopt.lig_file = inLigand;
    inopt.ascii_file = inCSVfile;
    inopt.h5file = h5file;
    
    qbProcessCSVNMR inopt;

endfunction

function qbProcessComplexCSP;

global function qbTestNewNMRpost [h5file,inTarget,inLigand,inCSVfile]

    write ['{}\n',h5file];
    if isnull h5file then
        return;
    endif
    
    local inopt;
    inopt.targ_file = inTarget;
    inopt.lig_file = inLigand;
    inopt.ascii_file = inCSVfile;
    inopt.h5file = h5file;
    
    // TODO: I plan to make this function work like the one in the qbTestNewNMRpre function, but right now they look a little different.
    qbProcessComplexCSP [inopt.targ_file,inopt.lig_file,inopt.h5file];

endfunction



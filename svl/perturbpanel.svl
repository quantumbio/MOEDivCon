#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2012 QuantumBio Inc. and/or its affiliates.
    
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

//    perturbpanel.svl    User-interface entrypoint to NMRPerturb calculations

#set title   'QuantumBio Perturbation Panel'
#set class   'QuantumBio'
#set version '2010.01'
#set main    'qb_NMRPerturbSetupPanel'

function qb_CoreEnable;
function qb_CoreHandler;
function qb_GetAnalysisData;
function qb_GetCoreEnv;
function qb_GetCorePanel;
function qb_GetDefaultsCore;
function qb_GetDefaultsStatus;
function qb_GetEnvApp;
function qb_InitCorePanel;
function qb_LoadCoreScoreDB;
function qb_SaveAnalysisData;
function qb_SaveDivConStatus;
function qb_SaveNMRPerturb;
function qb_SaveOptions;
function qb_SetAppStatus;
function qb_SetHamStatus;
function qb_SetHamDefault;
function qb_SetModeStatus;
function qb_SetUpScoreDB;
function qb_TagCoreVals;
function qb_UpdateCorePanel;
function qb_VerifyDivConCollection;

function qb_NMRPerturb;

const NMRPERTURB_OPT_DEFAULTS =
    [
    ['selonly',      1             ]
    ];

const HEADER = 
    [
    name: 'panel', 
    title: 'NMR Perturbation',
    windowName: 'NMRPerturbPanel',
    text: ['Run', 'Create', 'Update', 'Load', 'Close'],
    onTrigger: ['validate', 'validate', 'return', 'return', 'return'],
    bubbleHelp: ['Execute NMR Perturbation from MOE Window.',
        'Create a score database with collection\n'
        'and run parameters for later execution on cluster.', 
        'Update only the run parameters\n'
        'in the NMR Perturbation database.', 
        'Load run parameters and collection\n'
        'from a NMR Perturbation database.', 
        '']
    ];

const PANEL =
    [
    Hbox :
        [
        Checkbox :
            [
            name: 'selonly', text: 'Selected only',
            bubbleHelp:
                'Perform a NMR Perturbation calculation\n'
                'only on the selected atoms in the collection.'
            ]
        ],

    Separator : [flushLeft:1, extendH:1, margin:1]
    ];


//  Local Functions

/****************************************************************************
 *                          LoadDB
 *
 *  Get the core enviroment and application environment.
 *
 ****************************************************************************/
local function LoadDB [dbpath]

    local [dbkey, colmol, l, status, coreopts, c, mess] = 
        qb_LoadCoreScoreDB [dbpath, 'perturb'];
    if dbkey === 0 then
        Warning mess;
        exit [];
    endif

    local perturbsopts = qb_GetEnvApp [dbkey];
    perturbsopts = tagcat [perturbsopts, tag tr NMRPERTURB_OPT_DEFAULTS];
    local [indices, names] = qb_GetAnalysisData [dbkey, 'perturb', 'sel'];

    return [dbkey, colmol, status, coreopts, perturbsopts, indices, names];
endfunction

function qb_GetNMRPerturbEnv;


//  Global Functions

/****************************************************************************
 *                          qb_GetNMRPerturbEnv
 *
 *  Get the core enviroment and application environment.
 *
 ****************************************************************************/
global function qb_GetNMRPerturbEnv [dbkey]

    local [colmol, l, status, coreopts, c] = qb_GetCoreEnv [dbkey];
    local perturbsopts = qb_GetEnvApp [dbkey];
    perturbsopts = tagcat [perturbsopts, tag tr NMRPERTURB_OPT_DEFAULTS];

    return [colmol, status, coreopts, perturbsopts];
endfunction

/****************************************************************************
 *                          qb_RunNMRPerturb
 *
 *  Run the NMR Perturbation job in the database.
 *
 ****************************************************************************/
global function qb_RunNMRPerturb [dbkey, jobid]

    if not MOE_BATCH then
        local msgkey = Message [0, 'NMR Perturbution is running ...'];
        sleep -1;    // Allow parent to close input window.
    endif

    local rowkey = first db_Entries [dbkey];
    local [colmol, status, coreopts, perturbsopts]
        = qb_GetNMRPerturbEnv [dbkey];
    local [indices, names] = qb_GetAnalysisData [dbkey, 'perturb', 'sel'];

    local dbpath = fabsname db_Filename dbkey;
    local perpath = fpath dbpath;
    local pertail = fbase ftail dbpath;
    local perfile = twrite ['{}/{}.h5', perpath, pertail];

    local workdir = cd [];

    if not isnull jobid then
        workdir = twrite ['{}/{}', workdir, jobid];
        local okay = _fmkdir workdir;
        if okay === -1 then
            local mess = twrite ['Unable to create subdirectory:  {}\n',  
                workdir];
            qb_SaveDivConStatus [dbkey, rowkey, 
                swrite ['Error:  {}\n', mess]];
            write ['NMR Perturbation Error:  {}\n', mess];
            return;
        endif
    endif

    write ['Persistent File:  {}\n', perfile];
    write ['Work Dir:  {}\n', workdir];

    local [results, errmess] = qb_NMRPerturb [colmol, perfile,
        coreopts, perturbsopts, status.notforced, indices];

    if results === [] then
        if errmess === [] or errmess === '' then
            qb_SaveDivConStatus [dbkey, rowkey, "Error:  Unknown error!\n"];
            write ['NMR Perturbation Error:  Unknown error!\n'];
        else
            qb_SaveDivConStatus [dbkey, rowkey, 
                swrite ['Error:  {}\n', errmess]];
            write ['NMR Perturbation Error:  {}\n', errmess];
        endif
    else
        local [score, posevals] = results;
        qb_SaveNMRPerturb [dbkey, rowkey, tag [names, results]];

        local sucmess = "Success";
        if not isnull errmess then
            sucmess = cat [sucmess, "-warnings!\n", errmess];
        else
            sucmess = cat [sucmess, "\n"];
        endif

        qb_SaveDivConStatus [dbkey, rowkey, sucmess];
    endif

    if not MOE_BATCH then
        Message [msgkey, 'NMR Perturbation is done.'];
        sleep 2;
        Message [msgkey, []];
    endif

    return;
endfunction

/****************************************************************************
 *                          qb_SaveNMRPerturb
 *
 *  Save just the score data in the NMRPerturb database.
 *
 ****************************************************************************/
global function qb_SaveNMRPerturb [mdbkey, rowkey, atomdata]

    db_Write [mdbkey, rowkey, atomdata];

endfunction

/****************************************************************************
 *
 *                          qb_NMRPerturbSetupPanel
 *
 *  It is assumed that the user will not modify the collection or ligand
 *  poses while the NMRPerturb panel is open.
 *
 ****************************************************************************/
global function qb_NMRPerturbSetupPanel []

    static status;                     //  Shared with child tasks.

    if MOE_BATCH then exit ['Should only be run from MOE.']; endif
    if WindowShow ['NMRPerturbPanel', 1] then return; endif

    status = qb_GetDefaultsStatus [];
    status = qb_SetAppStatus [status, 'perturb'];
    status = qb_SetModeStatus [status, [1,0,0,0]];
    status = qb_SetHamStatus [status, [1,1,0,0,0,0]];
    local coredflts = qb_GetDefaultsCore [];
    coredflts = qb_SetHamDefault [coredflts, 2];
    coredflts.scoredb = 'nmrperturb.mdb';
    coredflts.mode = 'Single Point';
    local perturbdflts = tag tr NMRPERTURB_OPT_DEFAULTS;

    local coreopts = [], perturbsopts = [], browsetasks = [], dbkey = 0;
    local atoms = [], indices = [], atomnames = [], indextoks = [];

    local wkey = WindowCreate cat [HEADER, qb_GetCorePanel [], PANEL];
    status = qb_InitCorePanel [wkey, status, coredflts];
    WindowSetData [wkey, perturbdflts];

    if nAtoms [] === 0 then
        qb_CoreEnable [wkey, 0];
        WindowSetAttr [wkey, [selonly: [sensitive:0],
            panel:[sensitive:[0,0,0,1,1]]]];
    endif

    WindowShow [wkey, 1];

    loop
        local [vals, trig] = WindowWait wkey;

       if trig === 'panel' then
            if vals.panel === 'Close' then 
                break;

            elseif vals.panel === 'Load' then 
                if second task_fork [statics:'share',
                        master: 'parent'] === 'child' then
                    task_prio 0;

                    local ldkey;
                    local dbpath = first FilePrompt [title: 'Load Database', 
                        filter: '*.mdb', allowEmptyList: 0];
                    if not isnull dbpath then
                        if neL [ftype dbpath, 'file']
                                or neL [fext dbpath, 'mdb'] then
                            Warning 'The NMR Perturbation database doesn\'t exist.';
                            exit [];
                        endif

                        local ldcolmol;
                        [ldkey, ldcolmol, status, coreopts, perturbsopts, 
                            indices, atomnames] = LoadDB [dbpath];

                        Close [force:1];
                        atoms = cat cAtoms mol_Create ldcolmol;

                        dbv_Open db_Filename ldkey;
                        db_Close ldkey;

                        qb_CoreEnable [wkey, 1];
                        WindowSetAttr [wkey, [selonly: [sensitive:1],
                            panel:[sensitive:[1,1,1,1,1]]]];

                        status = qb_UpdateCorePanel [wkey, status, coreopts];
                        WindowSetData [wkey, perturbsopts];
                        View [];
                    endif

                exit [];
                endif

            elseif vals.panel === 'Run' then

                if vals.selonly then
                    atoms = Atoms [] | (aSelected Atoms []);
                else
                    atoms = Atoms [];
                endif

                if length atoms === 0 then
                    Warning 'There are no atoms selected.';
                    continue;
                endif

                if second task_fork [statics:'share'] === 'child' then
                    task_prio 3;
                    task_settitle [-1, 'MOEDivCon NMR Perturbation Run'];

                    status = qb_VerifyDivConCollection [0, status, vals];
                    if not status.verified then exit []; endif

                    indices =  aNumber atoms;
                    atomnames = aName atoms;
                    indextoks = totok indices;
                    atomnames = tok_cat [indextoks, '-', atomnames];

                    coreopts = qb_TagCoreVals [vals];
                    perturbsopts = tag [first tr NMRPERTURB_OPT_DEFAULTS,
                        [vals.selonly]];

                    dbkey = qb_SetUpScoreDB [status, coreopts, perturbsopts, 
                        [], atomnames, 'perturb', status.notforced];
                    qb_SaveAnalysisData [dbkey, 'perturb', 'sel',
                        [indices, atomnames]];
                    qb_RunNMRPerturb [dbkey];
                    dbv_Open db_Filename dbkey;
                    db_Close dbkey;
                    exit [];
                else
                    break;
                endif

            elseif vals.panel === 'Create' then

                if vals.selonly then
                    atoms = Atoms [] | (aSelected Atoms []);
                else
                    atoms = Atoms [];
                endif

                if length atoms === 0 then
                    Warning 'There are no atoms selected.';
                    continue;
                endif

                if second task_fork [statics:'share'] === 'child' then
                    task_prio 0;

                    status = qb_VerifyDivConCollection [wkey, status, vals];
                    if not status.verified then exit []; endif

                    indices =  aNumber atoms;
                    atomnames = aName atoms;
                    indextoks = totok indices;
                    atomnames = tok_cat [indextoks, '-', atomnames];

                    coreopts = qb_TagCoreVals [vals];
                    perturbsopts = tag [first tr NMRPERTURB_OPT_DEFAULTS,
                        [vals.selonly]];

                    dbkey = qb_SetUpScoreDB [status, coreopts, perturbsopts, 
                        [], atomnames, 'perturb', status.notforced];
                    qb_SaveAnalysisData [dbkey, 'perturb', 'sel',
                        [indices, atomnames]];
                    dbv_Open db_Filename dbkey;
                    db_Close dbkey;
                    exit [];
                endif

            elseif vals.panel === 'Update' then

                if second task_fork [statics:'share'] === 'child' then
                    task_prio 0;

                    coreopts = qb_TagCoreVals [vals];
                    perturbsopts = tag [first tr NMRPERTURB_OPT_DEFAULTS,
                        [vals.selonly]];

                    qb_SaveOptions [coreopts, perturbsopts];
                    qb_SaveAnalysisData [coreopts.scoredb, 'perturb', 'sel',
                        [indices, atomnames]];

                    Message [0, 'MOEDivCon NMR Perturbation update is done.'];
                    sleep 2;
                    exit [];
                endif

            endif
        else
            local l = [];
            [status, l, browsetasks] = qb_CoreHandler [wkey, trig, 
                status, vals, l, browsetasks];
        endif
    endloop

    task_kill browsetasks;
    WindowDestroy wkey;

endfunction

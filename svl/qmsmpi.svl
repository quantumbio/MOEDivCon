#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2012 QuantumBio Inc. and/or its affiliates.

 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information,
 including trade secrets, belonging to QuantumBio Inc. and/or its
 affiliates.

 Use, duplication, or disclosure of this source code is strictly
 prohibited without prior written authorization by the management of
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif

	//    qmsmpi.svl    Executes QMScore calculations in parallel

#set title   'QuantumBio QMScore MPI'
#set class   'QuantumBio'
#set version '2010.01'
#set main    'qb_QMScoreMDB'

function qb_CheckChgTestDivConComplex;
function qb_GetDivConStatus;
function qb_GetPoseFields;
function qb_GetRecFields;
function qb_GetQMSEnv;
function qb_GetWhich;
function qb_HamSetsInit;
function qb_PassBackbone;
function qb_SaveDivConStatus;
function qb_SaveQMScore;

function qb_PassValues;
function qb_GetCoreFields;
function qb_GetQMS_dbFields;

/*  NOTE:  If you change the key lists here, you need to update the
 *         option lists and default indices in qbcore.svl and qmspanel.svl.
           The unused Hamilitonians were masked when the core was created.
 */

const HAM_KEYS =
    [
    'am1',
    'mndo',
    'mndod',
    'pddgpm3',
    'pm3',
    'pm6'
    ];

const LIG_KEYS =
    [
    'NOOPT',
    'LIGOPT',
    'COMPLEXOPT'
    ];

global bRUN_MPI;

local function ManageMOEDivConMPI[pstdout,pstdin,process_keys,warnings,dbkey,numokay]

    local results = [];
    local return_statement = [];
    local divconerrmess = "";
    
    const NUMRESULTS = 11;
    local status_length=0;
    local rowcnt;
    
    local dbrowkeys = db_Entries [dbkey];

    local result_ith = 0;
    while exe_status process_keys(1) and result_ith <= numokay loop

        results = [];
        [[return_statement]] = fread [pstdout, '{c:*}'];
        if return_statement === "status" then
            [[rowcnt]] = fread [pstdout, '{n:}'];
            write ['  Getting status for pose {} ({} of {})\n', rowcnt, 
                result_ith+1, numokay];
	    [[status_length]] = fread [pstdout, '{n:}'];
            for status_length loop
                [[return_statement]] = fread [pstdout, '{c:*}'];
                print ['running', return_statement];
            endloop
            fwrite [pstdin, '{c:}\n', 'Ok'];
        elseif return_statement === "success" then
            [[rowcnt]] = fread [pstdout, '{n:}'];
            write ['  Getting results for pose {} ({} of {})\n', rowcnt, 
                result_ith+1, numokay];

            local name, nameValue;
            local parameter, parameterValue;
            [[name]] = fread [pstdout, '{c:*}'];
            [[nameValue]] = fread [pstdout, '{c:*}'];
            results = cat [results, [[name, nameValue]]];
            for NUMRESULTS loop
                [[parameter]] = fread [pstdout, '{c:*}'];
                [[parameterValue]] = fread [pstdout, '{n:}'];
                results = cat [results, [[parameter, parameterValue]]];
            endloop

            fwrite [pstdin, '{c:}\n', 'Ok'];
            qb_SaveQMScore [dbkey, dbrowkeys(rowcnt), results];
            local sucmess = "Success";
            if not isnull  warnings (rowcnt)
                    and neL [warnings (rowcnt), '']
                    and neL [warnings (rowcnt), '\n'] then

                sucmess = cat [sucmess, "-warnings!\n", string warnings (rowcnt)];
            else
                sucmess = cat [sucmess, "\n"];
            endif

            qb_SaveDivConStatus [dbkey, dbrowkeys(rowcnt), sucmess];
            result_ith = result_ith + 1;

        elseif return_statement === "error" then

            [[rowcnt]] = fread [pstdout, '{n:}'];
            if rowcnt < 1 or rowcnt > length dbrowkeys then
                write ['Getting chairman error message:\n'];

                while neL [return_statement, "DivCon done."] loop
                    [[return_statement]] = fread [pstdout, '{c:*}'];
                    write ['    {}\n', return_statement];
                endloop;

                fwrite [pstdin, '{c:}\n', 'Ok'];
            else
                write ['  Getting error message for pose {} ({} of {})\n', rowcnt, 
                    result_ith+1, numokay];

                [[return_statement]] = fread [pstdout, '{c:*}'];
                if neL [return_statement, "DivCon done."] then
                    divconerrmess = cat [divconerrmess, return_statement];
                    [[return_statement]] = fread [pstdout, '{c:*}'];
                endif
                while neL [return_statement, "DivCon done."] loop
                    divconerrmess = cat [divconerrmess, "\n", return_statement];
                    [[return_statement]] = fread [pstdout, '{c:*}'];
                endloop;

                fwrite [pstdin, '{c:}\n', 'Ok'];

                if isnull divconerrmess then
                    divconerrmess = "Error:  unknown error!";
                else
                    divconerrmess = cat ["Error:  ", divconerrmess];
                endif

                if not isnull warnings (rowcnt) then
                    divconerrmess = cat [divconerrmess, 
                        string warnings (rowcnt)];
                endif

                qb_SaveDivConStatus [dbkey, dbrowkeys(rowcnt), divconerrmess];
            endif

            result_ith = result_ith + 1;

        elseif return_statement === "DivCon done." then
            fwrite [pstdin, '{c:}\n', 'Ok'];
            return;
        endif
    endloop
    
endfunction

local function ManageMOEDivConScoring[pstdout,pstdin,process_keys,warnings,rowcnt,dbkey]

    local results = [];
    local return_statement = [];
    local divconerrmess = "";
    
    const NUMRESULTS = 11;
    local status_length=0;
    
    local nrows,dbrowkeys,dbrow;
    if not isnull dbkey then
        dbrowkeys = db_Entries [dbkey];
        dbrow = dbrowkeys(rowcnt);
        nrows = length db_Entries [dbkey];
    else
        dbrowkeys = [];
        dbrow = [];
        nrows = 1;
    endif
    
    local success = 0;
    local sleep_time = 0.1;
    while exe_status process_keys(1) loop
        results = [];
        fwrite [pstdin, '{c:}\n', 'status'];
        [[return_statement]] = fread [pstdout, '{c:*}'];

        if return_statement === "noupdate" then
        elseif return_statement === "running" then
	    [[status_length]] = fread [pstdout, '{n:}'];
            for status_length loop
                [[return_statement]] = fread [pstdout, '{c:*}'];
                write ['    running | {}\n', return_statement];
            endloop
        elseif return_statement === "success" then
            local name, nameValue;
            local parameter, parameterValue;
            [[name]] = fread [pstdout, '{c:*}'];
            [[nameValue]] = fread [pstdout, '{c:*}'];
            results = cat [results, [[name, nameValue]]];
            for NUMRESULTS loop
                [[parameter]] = fread [pstdout, '{c:*}'];
                [[parameterValue]] = fread [pstdout, '{n:}'];
                results = cat [results, [[parameter, parameterValue]]];
            endloop
            success = 1;
            fwrite [pstdin, '{c:}\n', 'Ok'];

            divconerrmess = "Success";
            if not isnull  warnings (rowcnt)
                    and neL [warnings (rowcnt), '']
                    and neL [warnings (rowcnt), '\n'] then

                divconerrmess = cat [divconerrmess, "-warnings!\n", string warnings (rowcnt)];
            else
                divconerrmess = cat [divconerrmess, "\n"];
            endif
            if not isnull dbkey then
                qb_SaveQMScore [dbkey, dbrowkeys(rowcnt), results];
                qb_SaveDivConStatus [dbkey, dbrowkeys(rowcnt), divconerrmess];
            endif
        elseif return_statement === "condition" then
            [[return_statement]] = fread [pstdout, '{c:*}'];
            if return_statement === "overwrite?" then
                [[return_statement]] = fread [pstdout, '{c:*}'];
                fwrite [pstdin, '{c:}\n', 'no'];
            else
            endif
        elseif return_statement === "error" then
            divconerrmess = "ERROR:";
            [[return_statement]] = fread [pstdout, '{c:*}'];
            if neL [return_statement, "DivCon done."] then
                divconerrmess = cat [divconerrmess, return_statement];
                [[return_statement]] = fread [pstdout, '{c:*}'];
            endif
            while neL [return_statement, "DivCon done."] loop
                divconerrmess = cat [divconerrmess, "\n", return_statement];
                [[return_statement]] = fread [pstdout, '{c:*}'];
            endloop;
            fwrite [pstdin, '{c:}\n', 'Ok'];
            if not isnull dbkey then
                qb_SaveQMScore [dbkey, dbrowkeys(rowcnt), results];
                qb_SaveDivConStatus [dbkey, dbrowkeys(rowcnt), divconerrmess];
            endif
        endif
        sleep sleep_time;
    endloop
    return results;
endfunction

local function InitMOEDivConQMScore[perfile,workdir,nrows,coreopts]

    //  exe_open child process inherits parent's environment.
    local process_key;
    if bRUN_MPI then
        process_key = exe_open ['moedivconmpi', workdir, [], 1];
    else
        process_key = exe_open ['moedivconscoring', workdir, [], 0];
    endif
    
    local process_keys = [process_key];
    local exestatus = exe_status process_keys;

    local prios = exe_getpriority process_keys;
    exe_setpriority [process_keys, prios];

    local pstdin = exe_stdin process_keys;
    local pstdout = exe_stdout process_keys;
    local pstderr = exe_stderr process_keys;

    //  Pass down the dirs, options and number of possible jobs.
    fwrite [pstdin, '{c:}\n', perfile];
    fwrite [pstdin, '{c:}\n', select ['PWD', 'NOPWD', coreopts.analpwd]];
    fwrite [pstdin, '{c:}\n', select ['COMPRESSION', 'NOCOMPRESSION', 1]];
    fwrite [pstdin, '{c:}\n', select ['PERSISTCOMPLEXDENSITY', 'NOPERSISTCOMPLEXDENSITY', 0]];
    fwrite [pstdin, '{c:}\n', HAM_KEYS(coreopts.ham)];
    fwrite [pstdin, '{c:}\n', select ['NOSTANDARD', 'STANDARD', coreopts.scaling === 1]];
    fwrite [pstdin, '{c:}\n', select ['FREQ', 'NOFREQ', coreopts.freq]];
    fwrite [pstdin, '{c:}\n', LIG_KEYS(coreopts.opt)];
    fwrite [pstdin, '{n:}\n', coreopts.shift];
    fwrite [pstdin, '{n:}\n', nrows];

    local start = clock[];
    write ['\nQMScore beginning: {}\n',asctime [start]];

    return [process_keys,pstdin,pstdout,pstderr,start];
endfunction

local function ShutdownMOEDivConQMScore [process_keys,start,results]
    exe_kill  [process_keys(1), 0];
    exe_kill  process_keys(1);
    exe_close process_keys;
    
    local finish = clock [];
    local secs = round (finish - start);
    local hours = floor (secs / 3600);
    secs = secs - (hours * 3600);
    local minutes = floor (secs / 60);
    secs = secs - (minutes * 60);

    local timemess;
    if isnull results then
        timemess = twrite ['QMScore complete at {}\nTotal clock time {}:{}:{}.', 
            asctime [finish], hours, minutes, secs];
    else
        timemess = twrite ['QMScore for pose is complete at {} (Score: {})\nTotal clock time {}:{}:{}.', 
            asctime [finish],results(2)(2), hours, minutes, secs];
    endif
    write ['{}\n', timemess];

endfunction

local function SendPairForScore [pstdin,pstdout,recmol,ligmol,coreopts,status,nonQBtagged,numokay,warnings,rowcnt,dbkey]

    local recchg = coreopts.recchg;
    local ligchg = coreopts.ligchg;
    local errmess = "";

    local nrows,dbrowkeys,dbrow;
    if not isnull dbkey then
        dbrowkeys = db_Entries [dbkey];
        dbrow = dbrowkeys(rowcnt);
        nrows = length db_Entries [dbkey];
    else
        dbrowkeys = [];
        dbrow = [];
        nrows = 1;
    endif

    //  Run all error tests unless forced not to do so by user.
    local [recok, recchgok, ligok, ligchgok, ckmsg]
        = qb_CheckChgTestDivConComplex [recmol, recchg, ligmol, ligchg,'qms',
            HAM_KEYS (coreopts.ham)];

    if alltrue [recok, recchgok, ligok, ligchgok] then
        numokay = numokay + 1;

        //  Pass the two backbones to QuantumBio's DivCon QMScore
        write ['Sending pose {} of {}\n', rowcnt, nrows];
        fwrite [pstdin, '{n:}\n', rowcnt];

        fwrite [pstdin, '{c:}\n', first cat cName [recmol]];
        fwrite [pstdin, '{n:}\n', recchg];
        qb_PassBackbone [pstdout, pstdin, recmol];
        qb_PassValues [pstdout, pstdin, [] ];

        fwrite [pstdin, '{c:}\n', first cat cName [ligmol]];
        fwrite [pstdin, '{n:}\n', ligchg];

        qb_PassBackbone [pstdout, pstdin, ligmol];
        qb_PassValues [pstdout, pstdin, nonQBtagged ];
        warnings (rowcnt) = ckmsg;

    else
        if not alltrue [recok, ligok] then
            if tok_length ckmsg > 0 then
                errmess = cat [errmess, swrite ['Skipping!\n{}', ckmsg]];
                errmess = droplast errmess;  //drop the extra newline
            else
                errmess = cat [errmess, 
                    swrite ['Problematic molecule in {}, skipping!\n',
                    qb_GetWhich [not recok, not ligok]]];
            endif
        endif

        if not alltrue [recchgok, ligchgok] then
            errmess =  cat [errmess, 
                swrite ['Problematic charge for {}, skipping!', 
                qb_GetWhich [not recchgok, not ligchgok]]];
        endif

        qb_SaveDivConStatus [dbkey, dbrowkeys(rowcnt), swrite ['Error:  {}\n', errmess]];

        write ['Skipping pose {} of {}\n', rowcnt, nrows];
        write ['QMScore Error:  {}\n', errmess];

        fwrite [pstdin, '{n:}\n', 0];            //  skipping
    endif
    
    return [warnings,numokay];
    
endfunction

global function qb_QMScorePair [recmol,ligmol,perfile,coreopts,qmsopts,status,errortests,workdir,nonQBtagged] 
    sleep 1;    // allows previous script to open the right mdb file for monitoring.
    local [osys, nsys] = SystemPush [];
    bRUN_MPI = 0;

    coreopts = cat [coreopts,qmsopts];
    //  If there are any errors, return immediately.  Run all error tests
    //  unless forced not to by user.
    qb_HamSetsInit [];

    local rowkey = 0, rowcnt = 1, numokay = 0, warnings = [];
    local errmess = "", success = 0;

    //  exe_open child process inherits parent's environment.
    local process_keys,pstdin,pstdout,pstderr,start;
    local recressets = mol_Create recmol;
    cSetName [recressets,recmol(1)(MOL_NAME)];
    local ligressets = mol_Create ligmol;
    cSetName [ligressets,ligmol(1)(MOL_NAME)];
    [process_keys,pstdin,pstdout,pstderr,start] = InitMOEDivConQMScore[perfile,workdir,rowcnt,coreopts];

    //  Pass the two backbones to QuantumBio's DivCon QMScore
    //
    //  SplitReceptor ensures that there is only one chain per molecule
    //  in the receptor collection.
    [warnings,numokay] = SendPairForScore [pstdin,pstdout,recressets,ligressets,coreopts,status,nonQBtagged,numokay,warnings,rowcnt,[]];
    
    local results = ManageMOEDivConScoring[pstdout,pstdin,process_keys,warnings,rowcnt,[]];

    //  Look for error messages from pstderr.
    local [[newerror]] = fread [pstderr, '{c:*}'];
    while length newerror > 0 loop
       // Hack!  Skip openmpi ignored error messages
        local errstrs = wordsplit [newerror, "()"];
        local errtoks = app token errstrs;
        local idx = indexof ['ignored', errtoks];
        if idx === 0 then
            write ['MOEDivCon: {}\n', newerror];
            errmess = cat [newerror, errmess];
        endif

        [[newerror]] = fread [pstderr, '{c:*}'];
    endloop

    ShutdownMOEDivConQMScore[process_keys,start,results];

    oDestroy uniq cat oChains cat recressets;
    oDestroy uniq cat oChains cat ligressets;

    SystemPop [osys, nsys];
    return [results,errmess];
endfunction

/****************************************************************************
 *                          qb_QMScoreMDB
 *
 *  Pass all of the jobs in the database down to moedivconmpi, then collect
 *  all of the results.
 *
****************************************************************************/
global function qb_QMScoreMDB [dbkey, jobid]
    sleep 1;    // allows previous script to open the right mdb file for monitoring.
    local [osys, nsys] = SystemPush [];
    if MOE_BATCH then
        bRUN_MPI = 1;
    else
        bRUN_MPI = 0;
    endif
    //  Extract molecules and run options from the database environment
    if neL [fext dbkey, 'mdb'] then
        exit twrite ['{}\nis not a MOE database.', dbkey];
    endif

    if neL [ftype dbkey, 'file'] then
        exit twrite ['Unable to find the database:\n    {}', dbkey];
    endif

    local [recmol, ligmol, status, coreopts, qmsopts] = qb_GetQMSEnv [dbkey];
    coreopts = cat [coreopts,qmsopts];
    local ligflds = qb_GetPoseFields [];
    local recflds = qb_GetRecFields [];
    local dbrowkeys = db_Entries [dbkey];
    local nrows = db_nEntries [dbkey];
    
    local workdir = fpath fabsname dbkey;
    local pertail = fbase ftail dbkey;
    local perfile = twrite ['{}/{}.h5', workdir, pertail];

    if not isnull jobid then
        workdir = twrite ['{}/{}', workdir, jobid];
        local okay = _fmkdir workdir;
        if okay === -1 then
            exit twrite ['Unable to create subdirectory:  {}\n',  workdir];
        endif
    endif

    local process_keys,pstdin,pstdout,pstderr,start;
    if bRUN_MPI then
        [process_keys,pstdin,pstdout,pstderr,start] = InitMOEDivConQMScore[perfile,workdir,nrows,coreopts];
    endif

    // process the fields in the QMScore mdb file and strip out the stuff we added
    local [fields, field_types] = db_Fields dbkey;  
    local nonQBfields = fields | (field_types <> 'molecule');
    nonQBfields = diff [nonQBfields,totok cat [qb_GetCoreFields[], qb_GetQMS_dbFields[]] ];

    //  For each receptor/pose in the database, check tests, then send down
    //  to moedivconmpi
    qb_HamSetsInit [];
    local rowkey = 0, rowcnt = 0, numokay = 0, warnings = [];
    local recchg = coreopts.recchg;
    local ligchg = coreopts.ligchg;
    for rowkey in dbrowkeys loop

        if not bRUN_MPI then
            [process_keys,pstdin,pstdout,pstderr,start] = InitMOEDivConQMScore[perfile,workdir,nrows,coreopts];
            qb_SaveDivConStatus [dbkey, rowkey, "Running....  "];
        endif
        
        local errmess = "", success = 0;
        rowcnt = rowcnt + 1;

        local oldstatus = qb_GetDivConStatus [dbkey, rowkey];
        if  eqL ["Success", keep [oldstatus, 7]] then
            write ['Skipping on success pose {} of {}\n', rowcnt, nrows];
            fwrite [pstdin, '{n:}\n', 0];            //  skipping
            continue;
        endif

        coreopts.task = rowcnt;
        [ligmol, ligchg] = db_ReadFields [dbkey, rowkey, ligflds];
        
        if indexof [recflds(1), fields] then
            [recmol, recchg] = db_ReadFields [dbkey, rowkey, recflds];
        endif

        local recressets = mol_Create recmol;
        cSetName [recressets,recmol(1)(MOL_NAME)];
        local ligressets = mol_Create ligmol;
        cSetName [ligressets,ligmol(1)(MOL_NAME)];
        coreopts.recchg = recchg;
        coreopts.ligchg = ligchg;
        
        local nonQBtagged = tag [nonQBfields, db_ReadFields [dbkey,rowkey,nonQBfields]];
        
        [warnings,numokay] = SendPairForScore [pstdin,pstdout,recressets,ligressets,coreopts,status,nonQBtagged,numokay,warnings,rowcnt,dbkey];

        if not bRUN_MPI then
            local results = ManageMOEDivConScoring[pstdout,pstdin,process_keys,warnings,rowcnt,dbkey];

            //  Look for error messages from pstderr.
            errmess = "";
            local [[newerror]] = fread [pstderr, '{c:*}'];
            while length newerror > 0 loop
                // Hack!  Skip openmpi ignored error messages
                local errstrs = wordsplit [newerror, "()"];
                local errtoks = app token errstrs;
                local idx = indexof ['ignored', errtoks];
                if idx === 0 then
                    write ['MOEDivCon: {}\n', newerror];
                    errmess = cat [newerror, errmess];
                endif
        
                [[newerror]] = fread [pstderr, '{c:*}'];
            endloop

            ShutdownMOEDivConQMScore[process_keys,start,results];
        endif

        oDestroy uniq cat oChains cat recressets;
        oDestroy uniq cat oChains cat ligressets;

    endloop

    //  Abort if there are no results to collect
    if numokay === 0 then
        fwrite [pstdin, '{c:}\n', 'Ok'];
        ShutdownMOEDivConQMScore[process_keys,start,[]];
        exit [];
    endif

    //  Collect and store results

    if bRUN_MPI then
        ManageMOEDivConMPI[pstdout,pstdin,process_keys,warnings,dbkey,numokay];
        
        //  Look for error messages from pstderr.
        errmess = "";
        [[newerror]] = fread [pstderr, '{c:*}'];
        while length newerror > 0 loop
            // Hack!  Skip openmpi ignored error messages
            errstrs = wordsplit [newerror, "()"];
            errtoks = app token errstrs;
            idx = indexof ['ignored', errtoks];
            if idx === 0 then
                write ['MOEDivCon: {}\n', newerror];
                errmess = cat [newerror, errmess];
            endif
    
            [[newerror]] = fread [pstderr, '{c:*}'];
        endloop
    
        ShutdownMOEDivConQMScore[process_keys,start,[]];
    endif
    SystemPop [osys, nsys];
endfunction


#svl

// -------------------------------------
//
//  Function:   qbGenerateProtonation
//  Author:     LMW
//  Date:       June 11, 2014
//
//  Desc:       The function will by default run through all of the nitrogens
//              within the ligand and try all of the different protonation states.
//              The surrouding protein will also be manipulated based upon these
//              protonation states. Finally, the function will write a PDB file
//              for each of the states.
//              Optionally, the user can provide specific atoms, residues, chains
//              for consideration. However, ONLY N-atoms will be manipulated
//              directly (though indirect effects will be experienced).
//              The output will include a "run.list" file that will list key information.
//
//              To run the calculation on the command line, do the following:
//
//  % /path/to/DivConSuite/bin/qbmoebatch -exec "run ['qbGenerateProtonation.svl',['3RZF_5.pdb',[chain:'A',resname:'XNM']]]"
//
//  % /path/to/DivConSuite/bin/qbmoebatch -exec "run ['qbGenerateProtonation.svl',['3RZF_5.pdb',[chain:'A',resname:'XNM',atomname:['NBB','NAW']]]]"
//
// -------------------------------------         

#set main qbGenerateProtonation

function _Atoms;
function qbGetResidueOnRadius;
function Protonate3D;
function _StructurePreparation;
function ctab_EnumerateProtomers;
function WashMoleculeMOE;

function qb_cLetter;
function qbTetherMMMin;

// MDB/CSV file data information
function db_ExportASCII;
function __db_ImportASCII_DetectOptions;
function __db_ImportASCII_ReadFile;
function db_ImportASCII;
function db_Open;
function db_Close;

const DEFAULT_OPT = [
    chain       : [],
    resid       : [],
    resname     : [],
    atomname    : [],
    csvfile     : [],
    tgen        : 1,        // turn on (1) or off (0) the automatic tautomer/protomer call.
    protPH      : 7.4,      // Call to Protonate3D with this pH
    protDist    : 4.0       // Only reprotonate non-selected atoms within this distance from selected atoms
];

const DEFAULT_NAMES = ['Chain','Residue ID','Sequence','Atom Name'];

const DEFAULT_TYPES = ['char','char','int','char'];

local function PrintError [errortext]
    write ['ERROR: {}\n\tContact support@quantumbioinc.com for more information.\n',errortext];
endfunction

// TODO: The following three functions are very similar to functions in nmrinterface.svl
//          Is there a potential to make them the same function and generalize them?
global function qbSendAtomsToCSV [ascii_file,runAtoms]
    if isnull ascii_file then
        write ['Error: opt.ascii_file not set prior to calling function\n'];
        return [];
    endif

    local db_file = twrite['{}-DELETE.mdb',fbase ascii_file];
    local names, types;

    names = DEFAULT_NAMES;
    types = DEFAULT_TYPES;

    local mdbKey = db_Open [db_file,'create'];
    apt db_CreateField [mdbKey, names, types];
    local tmpAtom;
    for tmpAtom in runAtoms loop
       db_Write [mdbKey,0, tag [names,[
           string qb_cLetter aChain tmpAtom,string rName aResidue tmpAtom,
           rUID aResidue tmpAtom,string aName tmpAtom   ]]];
    endloop
    db_Close mdbKey;

    db_ExportASCII [db_file, ascii_file, first db_Fields [db_file], db_Entries [db_file], [delimiter:',', quotes:0, titles:1]];
    fdelete db_file;
endfunction

local function FindAtoms values
    local interestResidue = Residues [] | qb_cLetter rChain Residues [] == token values.'Chain' and rUID Residues[] == values.'Sequence';
    if isnull interestResidue then
        write ['warning (residue not found): {} {} {}\n', values.'Chain', values.'Residue ID', values.'Sequence'];
        return [];
    endif

    local interestAtoms = cat rAtoms interestResidue;
    local centeredAtom = interestAtoms;           // in the event that the user DID NOT choose an atom
    if not isnull values.'Atom Name' then
        centeredAtom = interestAtoms | aName interestAtoms == token values.'Atom Name';
        if length centeredAtom > 1 then
            write ['ERROR: There is more then one atom of name {} in residue {}:{}\n', token values.'Atom Name', token values.Chain,values.Sequence];
            centeredAtom = [];
        endif
    endif

    return centeredAtom;
endfunction

// MOE requires a MDB with which to work in subsequent steps.
//  This function will translate the user-provided CSV file (of same "format" as Pipeline) to that MDB file.
const INCSV_DEFAULTS = [
    db_file:[],
    ascii_file:[]
];

local function qbCSVtoMDB opt
    opt = tagcat[opt, INCSV_DEFAULTS];
    if isnull opt.ascii_file then
        write ['Error: opt.ascii_file not set prior to calling function\n'];
        return [];
    endif
    opt.db_file = twrite['{}-DELETE.mdb',fbase opt.ascii_file];
    db_Close db_Open [opt.db_file,'create'];
    opt = __db_ImportASCII_DetectOptions opt;
    opt = __db_ImportASCII_ReadFile opt;
    opt.types = DEFAULT_TYPES;      // NOTE: this line is to clean up a problem in the importer which mistypes certain cases.
    db_ImportASCII opt;
    // read in MDB file and return the corresponding atoms in the MOE window
    local mdbKey = db_Open [opt.db_file,'read'];
    local entryKeys = db_Entries mdbKey;
    local tmpEntryKey,runAtoms;
    runAtoms = [];
    for tmpEntryKey in entryKeys loop
        local centeredAtom = FindAtoms db_Read [mdbKey,tmpEntryKey];
        if not isnull centeredAtom then
            runAtoms = uniq cat [runAtoms,centeredAtom];
        endif
    endloop
    db_Close mdbKey;
    fdelete opt.db_file;
    return runAtoms;
endfunction

global function qbGetAtomsInCSV [ascii_file]
    local opt = INCSV_DEFAULTS;
    opt.ascii_file = ascii_file;
    local runAtoms = qbCSVtoMDB opt;
    return runAtoms;
endfunction

// MAIN FUNCTION

global function qbGenerateProtonation [pdbfile,opt]

    opt = tagcat [opt, DEFAULT_OPT];

    if not isnull pdbfile then
        oDestroy Chains[];
        ReadPDB [pdbfile,[gen_symm:1,install_cryst:1,cell_enable:1]];
    endif
    
    local ligAtoms;

    if isnull opt.chain and isnull opt.resid and isnull opt.resname and isnull opt.atomname and isnull opt.csvfile then
        ligAtoms = _Atoms '$$ligand';
    elseif not isnull opt.csvfile then
        ligAtoms = qbGetAtomsInCSV opt.csvfile;
    else
        ligAtoms = Atoms[];

        if not isnull opt.chain then
            if isnull (ligAtoms | qb_cLetter aChain ligAtoms == opt.chain) then
                PrintError [twrite ['Chain {} not found!', opt.chain]];
                return;
            endif
            ligAtoms = ligAtoms | qb_cLetter aChain ligAtoms == opt.chain;
        endif
        
        if not isnull opt.resid then
            if isnull (ligAtoms | rUID aResidue ligAtoms == opt.resid) then
                PrintError [twrite ['ResID {} not found!', opt.resid]];
                return;
            endif
            ligAtoms = ligAtoms | rUID aResidue ligAtoms == opt.resid;
        endif

        if not isnull opt.resname then
            if isnull (ligAtoms | rName aResidue ligAtoms == opt.resname) then
                PrintError [twrite ['ResName {} not found!', opt.resname]];
                return;
            endif
            ligAtoms = ligAtoms | rName aResidue ligAtoms == opt.resname;
        endif

        if not isnull opt.atomname then
            if isnull cat indicesof [opt.atomname,aName ligAtoms] then
                PrintError [twrite ['AtomName {} not found!', opt.atomname]];
                return;
            endif
            ligAtoms = ligAtoms[cat indicesof [opt.atomname,aName ligAtoms]];
        endif
    endif

    // create the list file
    local fileHandle = fopenw 'run.list';
    fwrite [fileHandle,'{}, {}, [{}], [{}], [{}]\n',
        'Out Filename', 
        'HAtom Count', 
        'Ionization States', 
        'Atom Names',
        'Residue Names'];
    fclose fileHandle;
    
    local ligResidues = uniq aResidue ligAtoms;
    local ligResidue;
    for ligResidue in ligResidues loop
    
        ligAtoms = cat rAtoms ligResidue;
        
        local ligHeavyAtoms = ligAtoms | aAtomicNumber ligAtoms > 1;
        local ligHeavyAtomNames = aName ligHeavyAtoms;
        local ligHeavyAtomBfactors = aTempFactor ligHeavyAtoms;

    //    local ctab = ctab_Extract [ligAtoms, [heavy:1, aro:0]];
    //    local [ctabs, graphs] = ctab_EnumerateProtomers [ctab];
        if opt.tgen then
            local [ctablist, changed, filtlist] = WashMoleculeMOE [ligAtoms,[
                dim:3,
                hydrogens:'add',
                tautomers:1,
                protomers:1,
                enumsize:300,
                enumdup:1,
                exclacids:1,
                exclbases:1
            ]];
        else
            ctablist = [ctab_Extract [ligAtoms]];
        endif
        local ctab;

        write ['Found {} tautomers/protomers for residue {}:{} \n', length ctablist, rName ligResidue, rUID ligResidue];
        local allcount = 0;
        for ctab in ctablist loop
            allcount = allcount + 1;
            if opt.tgen then        // if we want to use the protonation as it stands in the input file, then we shouldn't destroy it.
                local theParent = first uniq cat oParent oAtoms ligAtoms;
                oDestroy ligAtoms;
                local tmpMol = mol_Create first mol_ExtractFromCTAB ctab;
                ligAtoms = cat oAtoms tmpMol;
                ligHeavyAtoms = ligAtoms | aAtomicNumber ligAtoms > 1;
                aSetName [ligHeavyAtoms,ligHeavyAtomNames];
                aSetTempFactor [ligHeavyAtoms,ligHeavyAtomBfactors];
                aSetSelected [ligAtoms,1];
                local prepTypes = _StructurePreparation [uniq aChain ligAtoms, [cmd:'_types']];
                _StructurePreparation [uniq aChain ligAtoms,[disableTypes : diff [prepTypes, ['HName','AName']], batch_protonate3d:0]];
                oReparent [ligAtoms,theParent];
                oDestroy tmpMol;
            endif
        // the closeatoms are the atoms that will be protonated. ligAtoms will be fixed in their protonation state.
        //      Only protonating atoms within a certain distance will speed up the protonation
            local closeatoms = Atoms[];
            if opt.protDist > 0 then
                closeatoms = qbGetResidueOnRadius[ligAtoms,opt.protDist];
            endif
            Protonate3D [closeatoms,closeatoms,closeatoms,ligAtoms,[],[pH:opt.protPH]];
            local outpdbname = twrite ['{}.pdb',allcount];
            fileHandle = fopenx 'run.list';
            fileHandle = fseek [fileHandle, fsize fileHandle];
            fwrite [fileHandle,'{}, {}, [{}], [{}], [{}], [{}], [{}]\n',
                outpdbname,
                length (ligAtoms | aElement ligAtoms == 'H'),
                aIon ligHeavyAtoms, aName ligHeavyAtoms, rName aResidue ligHeavyAtoms, 
                qb_cLetter rChain aResidue ligHeavyAtoms, rUID aResidue ligHeavyAtoms];
            fclose fileHandle;
            WritePDB[outpdbname,[cryst1:1]];
        endloop
    endloop
endfunction

// this Panel is for testing purposes.
global function qbGenerateProtonationPanel []
	if WindowShow ['GenerateProtonationPanel', 1] then
	    return;
	endif
	
    local wkey = WindowCreate
    [
        title: 'Alternative Protonation Generation',
        name: 'GenerateProtonationPanel',
        text:   ['OK','Cancel'],
	    onTrigger: ['validate','return'],
	    bubbleHelp: [
		    'Return automatic protonation configuration settings.',
		    'Cancel.'
        ], 
            Group : 
            [
                Vbox:   
                [
                title: 'Atoms:',
                name: 'coreResidues',
                    Hbox:
                    [
                        columns:4,
                        Button:
                            [
                                name: 'retrieveSelection', 
                                text: 'Retrieve Selection',
                                bubbleHelp: 'Retrieve selected residues and add them to region refinement.'
                            ],
                        Button:
                            [
                                name: 'button_ShowAtoms', text: '?', font: 'mediumBold',
                                bubbleHelp: 'Displays the approximate number of atoms whose protonation states will be manipulated.'
                            ],
                        Button:
                            [
                                name: 'deleteSelection', 
                                text: 'X', font: 'mediumBold',flushLeft: 0,
                                bubbleHelp: 'Delete selected atom from the list.'
                            ]
                    ],
                    Listbox :
                        [
                        name: 'coreResiduesBox',
                        text: '',
                        width:30,
                        extendH:1,
                        header: 'Chain\tRes\tUID\tAtom',
                        onTrigger: 'return',
                        type: 'modint',
                        multiSelect: 0,
                        sortEnable: 1,
                        bubbleHelp:
                            'Automatic protonation manipulation will be performed on each of these atoms.\n'
                            'Only nitrogen atoms will be considered for this tool.'
                        ]                
                ]
            ]
    ];
    
    local function updateCoreResidueList [coreList]
	    return apt twrite ['{}\t{}\t{}\t{}',qb_cLetter aChain coreList, rName aResidue coreList, rUID aResidue coreList, aName coreList];
	endfunction

    WindowShow wkey;

    local coreList = [];
    loop
        local [values, trigger] = WindowWait wkey;
  // write ['DEBUG: {} | {}\n', values, trigger];
        if trigger === 'button_ShowAtoms' then
            aSetSelected [coreList, 1];
        elseif trigger === 'deleteSelection' then
            local selectedAtomID = first values.coreResiduesBox;
            if not isnull selectedAtomID then
                local newSelectedID = selectedAtomID - 1;
                if selectedAtomID == 1 then
                    newSelectedID = 1;
                endif
                local tmpMask;
                tmpMask = m_id coreList;
                tmpMask(selectedAtomID) = 0;
                coreList = coreList | tmpMask;

                WindowSetAttr[wkey, 
                [
                    coreResiduesBox: 
                    [ 
                        text:   updateCoreResidueList[coreList],
                        value:  [newSelectedID]
                    ]
                ]];

            endif
        elseif trigger === 'retrieveSelection' then
            local newSelectedList = diff[Atoms [] | aSelected Atoms [],coreList];
            newSelectedList = newSelectedList | aElement newSelectedList == 'N';
            local newSelected;
            for newSelected in newSelectedList loop
                local prevLenCoreList = length coreList;
                coreList = cat [coreList, newSelected];
                WindowSetAttr[wkey,
                [
                    coreResiduesBox: 
                        [
                        text:   updateCoreResidueList[coreList],
                        value:  [1]
                        ]
                ]];
            endloop
        elseif trigger === 'panel' then
            if values.(trigger) == 'OK' then
                write ['here i am\n'];
                return values;
            elseif values.(trigger) == 'Cancel' then
                break;
            endif
        endif
    endloop


endfunction



#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2012 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

/****************************************************************************
 *                                qbalign.svl
 *
 *  Reads in the protein (first chain) of the receptor collections in 
 *  the source directory, aligns them, renumbers the UIDs, and then 
 *  stores the new receptor collections in the destination directory.  
 *
 *  Assumptions:
 *
 *    -  The protein in the receptor collection is a single chain.
 *    -  The protein chain is the first chain in the receptor collection.
 *
 *
 *  Main function:
 *
 *    qb_Align [src, dest, ext, trim]
 *
 *  Arguments:
 *    
 *    src : token : source directory.
 *
 *    dest : token : destination directory.
 *
 *    ext : token : molecule file extension.  Supported extensions are
 *          pdb, moe, mol2, mdl_mol and macmod.
 *
 *    trim : boolean : if true, delete leading or trailing residues so that
 *          all proteins have the same number of residues (provided that
 *          there are no internal gaps).  This improves the reliability of
 *          the PLS anaysis for the SAR heat map.
 *
 *  Example moebatch command:
 *
 *    moebatch -exec "run ['qbalign.svl', ['orig', 'done', 'moe', 1]]" -exit
 *
 ****************************************************************************/
#set title   'QuantumBio Protein Align'
#set class   'QuantumBio'
#set version '2010.01'
#set main 'qb_Align'

function cAlignmentPositions;
function pro_Align;

local function readReceptors [srcfilelist, ext]
    local filename, chains;
    for filename in srcfilelist loop
    write ['Loading {}\n', filename];
        if ext === 'pdb' then
            chains = ReadPDB filename;
        elseif ext === 'moe' then
	        chains = ReadMOE filename;
        elseif ext === 'mol2' then
	        chains = ReadTriposMOL2 filename;
        elseif ext === 'mdl_mol' then
	        chains = ReadMDLMOL filename;
        elseif ext === 'macmod' then
	        chains = ReadMacroModel filename;
        endif

    oDestroy dropfirst chains;
    endloop
endfunction

local function saveReceptors [srcfilelist, destdir, ext, newuids, trim, 
        sres, eres]
    local filename, idx = 1;
    for filename in srcfilelist loop
        if ext === 'pdb' then
            ReadPDB filename;
        elseif ext === 'moe' then
	        ReadMOE filename;
        elseif ext === 'mol2' then
	        ReadTriposMOL2 filename;
        elseif ext === 'mdl_mol' then
	        ReadMDLMOL filename;
        elseif ext === 'macmod' then
	        ReadMacroModel filename;
        endif

        local [residues] = oResidues first Chains [];
        rSetUID [residues, newuids(idx)];
        rSetPos [residues, newuids(idx)];

        if trim then
            rSetPos [residues, rPos residues - (sres - 1)];
            local delresidues = residues | ((rUID residues < sres)
                or (rUID residues > eres));
            oDestroy delresidues;
        endif

        local destfn = twrite ['{}/{}', destdir, ftail filename];
        write ['Saving {}\n', destfn];
        if ext === 'pdb' then
            WritePDB destfn;
        elseif ext === 'moe' then
	        WriteMOE destfn;
        elseif ext === 'mol2' then
	        WriteTriposMOL2 destfn;
        elseif ext === 'mdl_mol' then
	        WriteMDLMOL destfn;
        elseif ext === 'macmod' then
	        WriteMacroModel destfn;
        endif

        Close [force:1];
        idx = idx + 1;
    endloop
endfunction

global function qb_Align [src, dest, ext, trim]

    local function hasgap ids = neL [length ids, (last ids) - (first ids) + 1];
    local function fout f = write ['    {}\n', f];

    local osys, nsys;
    if not MOE_BATCH then [osys, nsys] = SystemPush []; endif

    local patt = twrite ['*.{}', ext];
    local srcfilelist = flist [src, patt];

    readReceptors [srcfilelist, ext];

    write ['\nAligning {} proteins ...', nChains []];
    pro_Align [Chains [], [superpose:0]];
    local newuids = cAlignmentPositions Chains [];
    Close [force:1];
    write [' done.\n'];

    local gaps = app hasgap newuids;
    local startr = max app first newuids;
    local endr = min app last newuids;

    write ['\nThe following proteins have missing residues (internal gaps):\n'];
    app fout (srcfilelist | gaps);
    write ['\n'];

    saveReceptors [srcfilelist, dest, ext, newuids, trim, startr, endr];

    if not MOE_BATCH then SystemPop [osys, nsys]; endif
endfunction

#svl
#if 0
 // BEGIN COPYRIGHT
 /***********************************************************************
    Copyright (c) 1998-2010 QuantumBio Inc. and/or its affiliates.
	
 This source code is the property of QuantumBio Inc. and/or its affiliates
 and is considered secret.

 This source code contains proprietary and Confidential Information, 
 including trade secrets, belonging to QuantumBio Inc. and/or its 
 affiliates.

 Use, duplication, or disclosure of this source code is strictly 
 prohibited without prior written authorization by the management of 
 QuantumBio Inc. At no time are you authorized to repurpose the source
 code for use with software other then that which it was intended.

 Please see http://www.quantumbioinc.com/ for more information.

 ***********************************************************************/
 // END COPYRIGHT
#endif      

/****************************************************************************
 *                                qbalign.svl
 *
 *  Reads in the protein (first chain) of the receptor collections in 
 *  the source directory, aligns them, renumbers the UIDs, and then 
 *  stores the new receptor collections in the destination directory.  
 *  Supported extensions are pdb, moe, mol2, mdl_mol and macmod.
 *
 *  Assumptions:
 *
 *    -  The protein in the receptor collection is a single chain.
 *    -  The protein chain is the first chain in the receptor collection.
 *
 *  Command:
 *
 *    moebatch -exec "run ['qbalign.svl', ['srcdir', 'destdir', 'ext']]" -exit
 *
 ****************************************************************************/
#set title   'QuantumBio Protein Align'
#set class   'QuantumBio'
#set version '2010.01'

function cAlignmentPositions;
function pro_Align;

local function readrecs [srcdir, ext]
    local patt = twrite ['*.{}', ext];
    local filelist = flist [srcdir, patt];
    local filename, chains;
    for filename in filelist loop
    write ['Loading {}\n', filename];
        if ext === 'pdb' then
            chains = ReadPDB filename;
        elseif ext === 'moe' then
	        chains = ReadMOE filename;
        elseif ext === 'mol2' then
	        chains = ReadTriposMOL2 filename;
        elseif ext === 'mdl_mol' then
	        chains = ReadMDLMOL filename;
        elseif ext === 'macmod' then
	        chains = ReadMacroModel filename;
        endif

    oDestroy dropfirst chains;
    endloop
endfunction

local function saverecs [srcdir, destdir, ext, newuids]
    local patt = twrite ['*.{}', ext];
    local filelist = flist [srcdir, patt];
    local filename, idx = 1;
    for filename in filelist loop
        if ext === 'pdb' then
            ReadPDB filename;
        elseif ext === 'moe' then
	        ReadMOE filename;
        elseif ext === 'mol2' then
	        ReadTriposMOL2 filename;
        elseif ext === 'mdl_mol' then
	        ReadMDLMOL filename;
        elseif ext === 'macmod' then
	        ReadMacroModel filename;
        endif

        local [residues] = oResidues first Chains [];
        rSetUID [residues , newuids(idx)];

        local destfn = twrite ['{}/{}', destdir, ftail filename];
        write ['Saving {}\n', destfn];
        if ext === 'pdb' then
            WritePDB destfn;
        elseif ext === 'moe' then
	        WriteMOE destfn;
        elseif ext === 'mol2' then
	        WriteTriposMOL2 destfn;
        elseif ext === 'mdl_mol' then
	        WriteMDLMOL destfn;
        elseif ext === 'macmod' then
	        WriteMacroModel destfn;
        endif

        Close [force:1];
        idx = idx + 1;
    endloop
endfunction

local function main [src, dest, ext]
    readrecs [src, ext];
    write ['Aligning {} proteins ...', nChains []];
    pro_Align [Chains [], [superpose:0]];
    local newuids = cAlignmentPositions Chains [];
    Close [force:1];
    write [' done.\n'];
    saverecs [src, dest, ext, newuids];
endfunction

#svl

//  io_qbh5.svl     Read/Write QuantumBio models from/to h5 format (using Java/SVL functions).
//                      Based heavily on io_pdb.svl and other io*.svl files found in MOE2012 distribution.

#set title	'qbH5 File I/O'
#set class	'MOE:file-io'
#set version	'2012.11'

const OPENDEFAULTS = [
    model:[],         // the model to open.
    ligand:[],       // the pose/ligand to open
    center:1,            // center the structure when read in
    return_data:0       // return the mol data instead of the chains
];



// ============ BETWEEN HERE AND SAME BELOW IS STUFF FROM io_pdb.svl ============

function AutoConnectFromPosition, AutoTypeFromPosition;
function RenderProtein;
function pdb_ConnectAndType;

local function mean v = invz length v * add v;

local function trim_ws s
    local m = not isspace s, p = pscan m;
    return (s | m or (rotl m and ltE [0, p, last p]));
endfunction

local function mol_cName mol = mol(2)(MOL_CHAIN_NAME);
local function mol_cHdr  mol = mol(2)(MOL_CHAIN_HEADER);

local function mol_nRes  mol = mol(2)(MOL_CHAIN_NRES);
local function mol_rType  mol = mol(3)(MOL_RES_TYPE);
local function mol_rName  mol = mol(3)(MOL_RES_NAME);

const WATER_RESIDUES = ['HOH','WAT','TIP','SOL','OH2','DOD','D20'];
local function is_water_res v = indexof [v, WATER_RESIDUES];

local function pdb_SplitHets mol
// must mimic from original code in io_pdb.svl
    local data;
    data.mol = mol;
    
    local m = split [mol_rType data.mol == 'amino', mol_nRes data.mol];
    local n = app btoc m;

    local okF = (app length n == 1 or 24 > app add m or 0.50 >= app mean m);

    if alltrue okF then return data.mol; endif;  // Nothing to do

    local psys = SystemPush [];

    local C = mol_Create data.mol;
    local R = cResidues C;
    local N = app length R;
    local A = cat cAtoms C;

    m = mput [m, okF,  app one (m | okF)];

    local x, i;
    for x in x_pack not okF loop
	local mask = not m(x);
	local r = R(x) | mask;
	for i = 1, length r loop
	    local b = uniq cat oParent aBonds cat oChildren r(i);
	    b = rNumber (b | oParent b == C(x));
	    local rn = rNumber r(i);
	    if rn == N(x) then
		mask(rn) = not indexof [dec N(x), b];
	    elseif rn == 1 then
		mask(rn) = not indexof [2, b];
	    else
		mask(rn) = not andE indexof [rn + [1,-1], b];
	    endif
	endloop
	if anytrue mask then
	    local c = oCreate 0;
	    cSetName [c, cName C(x)];
	    cSetTag [c, cTag C(x)];
	    oReparent [R(x) | mask, c];
	    C(x) = cat [C(x), c];
	endif
    endloop

    n = app length C;
    if anytrue (1 < n) then
	    data.mol = mol_Extract (C = cat C);
    endif

    SystemPop psys;

    return data.mol;
endfunction

// ============ BETWEEN HERE AND SAME ABOVE IS STUFF FROM io_pdb.svl ============

function qbListModels;
function qbRetrieveModel;
function qbRetrievePosingModel;

global function ReadHDF5 [file,opt]
    opt = tagcat[opt, OPENDEFAULTS];
    if isnull opt.model then
        local [modelTags, errorcode] =  qbListModels [file];
        opt.model = modelTags.target;
    endif
    local mol, errorcode2;
    if isnull opt.ligand then
        [mol, errorcode2] = qbRetrieveModel [file, opt.model];
    else
        [mol, errorcode2] = qbRetrievePosingModel [file, opt.model, opt.ligand];
    endif

    // Init the variables not set by Java.
     mol(3)(MOL_RES_INS) = rep [" ",length mol(3)(1)];   // MOL_RES_INS
     mol(3)(MOL_RES_TYPE) = rep ['',length mol(3)(1)];   // MOL_RES_TYPE
     mol(4)(MOL_ATOM_GEOM) = rep ['',length mol(4)(1)];    // MOL_ATOM_GEOM
     mol(4)(MOL_ATOM_CHIRALITY) = rep [0,length mol(4)(1)];     // MOL_ATOM_CHIRALITY
     mol(4)(MOL_ATOM_HINTLP) = rep [0,length mol(4)(1)];     // MOL_ATOM_HINTLP
     mol(4)(MOL_ATOM_BONDS) = rep [0,length mol(4)(1)];     // MOL_ATOM_BONDS
     mol(4)(MOL_ATOM_CHARGE) = rep [0,length mol(4)(1)];     // MOL_ATOM_CHARGE
     mol(4)(MOL_ATOM_BACKBONE) = rep [0,length mol(4)(1)];     // MOL_ATOM_BACKBONE

    local [hbState, vdwState] = [DrawHBonds 0, DrawVDWContacts 0];

    mol = cat pdb_ConnectAndType [mol];

// From pack_chain in io_pdb.svl ====
	local m = is_water_res mol_rName mol;
	local n = btoc m;
	m = not m(1) and m and x_id m >= first (n >= 12);
	if orE m then
	    mol = mol_Cat [mol_rMask [mol, not m], mol_rMask [mol, m]];
	endif
// ====
    mol = pdb_SplitHets mol;        
	// Construct chain tag, name & header

    local cT = ftail fname file;
    local mol_name = cT;
	cT = rep [cT, mol_cCount mol];

    local cN = mol_cName mol;
    cN = select [cT, tok_cat [cT, '.', cN], cN == ' ' or cN  == ''];

    local cH = app token app trim_ws app string mol_cHdr mol;
    cH | cH == '' = token opt.model;

    mol(1)(MOL_NAME) = mol_name;
    mol(2)(MOL_CHAIN_TAG)    = cT;
    mol(2)(MOL_CHAIN_NAME)   = cN;
    mol(2)(MOL_CHAIN_HEADER) = cH;

    local tmpChains = mol_CreateHidden mol;
    RenderProtein [tmpChains,[center:opt.center]];
    DrawHBonds hbState; DrawVDWContacts vdwState;
    
    if not call[] then
	    if anytrue opt.return_data then
	        return mol;
	    else
	        return tmpChains;
	    endif
    endif
endfunction


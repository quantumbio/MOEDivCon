#!/bin/bash

doProtonate=0
cutRadius=5
cutRadiusLimit=5
doHNMR=1
doCNMR=0
doStructMin=1


if [ ! "$QBHOME" ]; then
    PRG=$0
    
    progdir=`dirname "$PRG"`
    if [ "$progdir" = "." ]; then
	    progdir=`pwd`
    fi
    
    if [ "`echo "$progdir" | grep -s '^/'`" ]; then
        progdir=$progdir
    else
        progdir=`pwd`/"$progdir"
    fi
    
    QBHOME=`echo "$progdir" | sed 's:/scripts$::'`
    export QBHOME
fi

errorOut()
{
    test $doProtonate -eq 1 && ynProt="enabled" || ynProt="disabled"
    test $doHNMR -eq 1 && ynHNMR="enabled" || ynHNMR="disabled"
    test $doCNMR -eq 1 && ynCNMR="enabled" || ynCNMR="disabled"
    test $doStructMin -eq 1 && ynSTRMIN="enabled" || ynSTRMIN="disabled"

    echo
    echo "WARNING! NMR Support in DivCon5.x is considered beta."
    echo
    echo "Usage: runNMRcomplex.sh --complex=FILENAME"
#   echo "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
    echo
    echo "REQUIRED Command line arguments:"
    echo "  --expCSV=FILENAME    * File containing experimental CSP data (see example)."
    echo "  --target=FILENAME    * File corresponding to protein structure"
    echo "  --ligand=FILENAME    * File corresponding to ligand structure"
    echo "          OR"
    echo "  --complex=FILENAME   * File corresponding to complex structure"
    echo "                          WARNING: Perception used to determine target/ligand"
    echo
    echo "Optional Command line arguments:"
    echo "  --radius=#           * Radius around ligand to include.  Default=${cutRadius}A"
    echo "                          Radius limited to ${cutRadiusLimit}A in beta version."
    echo "  --enableProtonate    * enable protonation (Protonate3D)  Default=${ynProt}"
    echo "  --setqbhome          * Set QBHOME variable.              Default=${QBHOME}"
    echo "  --enableH            * Enable H CS prediction.           Default=${ynHNMR}"
    echo "  --enableC            * Enable C CS prediction.           Default=${ynCNMR}"
    echo "  --enableMinimization * Minimize structure with MMFF.     Default=${ynSTRMIN}"
    echo 
    echo "NOTE: for all --enableX options, use --disableX to disable."
    echo
    echo "For help, email support@quantumbioinc.com"
    echo
    echo " Also, visit: http://www.quantumbioinc.com/support/manual"
    echo 
    exit 1
}

while test $# -gt 0 ; do
    case "$1" in
        -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
        *) optarg= ;;
    esac
    case $1 in
        --help)
            errorOut
            ;;
        --radius=*)
            cutRadius=$optarg
            ;;
        --enableProtonate)
            doProtonate=1
            ;;
        --disableProtonate)
            doProtonate=0
            ;;
        --enableH)
            doHNMR=1
            ;;
        --disableH)
            doHNMR=0
            ;;
        --enableC)
            doCNMR=1
            ;;
        --disableC)
            doCNMR=0
            ;;
        --enableMinimization)
            doStructMin=1
            ;;
        --disableMinimization)
            doStructMin=0
            ;;
        --target=*)
            inTargetFile=$optarg
            ;;
        --ligand=*)
            inLigandFile=$optarg
            ;;
        --complex=*)
            inComplexFile=$optarg
            ;;
        --expCSV=*)
            inExperimentalFile=$optarg
            ;;
        --setqbhome=*)
            QBHOME=$optarg ; export QBHOME
            ;;
        *)
            echo "ERROR: $optarg option not available..."
            errorOut
        esac
    shift
done

if [ ${cutRadius} -gt ${cutRadiusLimit} ] ; then
    echo "ERROR: In Beta stage, --radius option limited to ${cutRadiusLimit}A!"
    errorOut
fi

if [ ! -z "$inComplexFile" ] ; then
    ynCmplx=1
else
    ynCmplx=0
fi

if [ $ynCmplx -eq 0 ] ; then
    if [ -z "$inTargetFile" ] ; then
        echo "ERROR: Target File REQUIRED!"
        errorOut
    elif [ ! -e "$inTargetFile" ] ; then
        echo "ERROR: Target file $inTargetFile NOT FOUND"
        errorOut
    fi
    
    if [ -z "$inLigandFile" ] ; then
        echo "ERROR: Target File REQUIRED!"
        errorOut
    elif [ ! -e "$inLigandFile" ] ; then
        echo "ERROR: Ligand file $inLigandFile NOT FOUND"
        errorOut
    fi
    MOEFILES="'$inTargetFile','$inLigandFile'"
    filename=$(basename "$inLigandFile")
else
    if [ -z "$inComplexFile" ] ; then
        echo "ERROR: Complex File REQUIRED!"
        errorOut
    elif [ ! -e "$inComplexFile" ] ; then
        echo "ERROR: Complex file $inComplexFile NOT FOUND"
        errorOut
    fi
    MOEFILES="'$inComplexFile',[]"
    filename=$(basename "$inComplexFile")
fi
extension="${filename##*.}"
filename="${filename%.*}"

if [ $doHNMR -eq 1 ] ; then
    if [ $doCNMR -eq 1 ] ; then
        MOENMRATMS="['H','C']"
    else
        MOENMRATMS="['H']"
    fi
elif [ $doCNMR -eq 1 ] ; then
    MOENMRATMS="['C']"
else
    echo "ERROR: Either H or C must be NMR enabled!"
    errorOut
fi
MOENMRATMS="prtElementList:${MOENMRATMS}"

MOEARGS="[${MOEFILES},[hamiltonian:'mndo',qmApplication:'nmr',quitonerror:1,enableOpt:$doStructMin,tether_val:0,enableProtonate:$doProtonate,enableLigFix:0,enableCropOnLig:1,qmcrop_radius:$cutRadius,${MOENMRATMS}]]"
echo $MOEARGS

rm -f lig_${filename}.atms lig_${filename}.mol2 mp_${filename}.atms mp_${filename}.mol2 targ_${filename}.atms targ_${filename}.mol2
${QBHOME}/bin/qbmoebatch -exec "run ['$QBHOME/svl/qbPrep2Files.svl',$MOEARGS,'qbPrep2Files']" -exit

if [ ! -e lig_${filename}.mol2 ] ; then
    echo "ERROR: lig_${filename}.mol2 NOT FOUND!"
    errorOut
fi

if [ ! -e mp_${filename}.mol2 ] ; then
    echo "ERROR: mp_${filename}.mol2 NOT FOUND!"
    errorOut
fi

if [ ! -e targ_${filename}.mol2 ] ; then
    echo "ERROR: mp_${filename}.mol2 NOT FOUND!"
    errorOut
fi

$QBHOME/bin/qbmoebatch -exec "qbProcessCSVNMR [ascii_file:'$inExperimentalFile',targ_file:'targ_${filename}.mol2',lig_file:'lig_${filename}.mol2',cmplx_file:'mp_${filename}.mol2']" -exit

if [ ! -e lig_${filename}.atms && ! -e targ_${filename}.atms ] ; then
    echo "ERROR: lig_${filename}.atms and/or targ_${filename}.atms NOT FOUND! (required for CSP)"
    errorOut
fi

if [ ! -e mp_${filename}.atms ] ; then
    echo "ERROR: mp_${filename}.atms NOT FOUND! (required for CSP)"
    errorOut
fi

echo "Running DivCon"

if [ -e lig_${filename}.atms ] ; then
    atmlist=`cat lig_${filename}.atms  | tr '\n' ' ' | sed 's/    ATOM //g'`
    echo "calnuc=0" > lig_${filename}.ini
    echo "maxit=300" >> lig_${filename}.ini
    echo "[nmr]" >> lig_${filename}.ini
    echo "atom=${atmlist%?}" >> lig_${filename}.ini

    if ( ${QBHOME}/bin/divcon --nmr -i lig_${filename}.mol2 --hamiltonian=mndo_nmr -I lig_${filename}.ini -O --standard -d lig_${filename}.h5 --charge=labute --screen ) ; then
        echo ; echo "Ligand NMR Calculation Successful" ; echo
    else
        echo ; echo "ERROR: Ligand NMR Calculation Unsuccessful - try running with --enableMinimization"
               echo "   NOTE: NMR Support in DivCon5.x is considered beta. In order to help improve the"
               echo "           algorithm, if possible please send input along with divcon.log file to"
               echo "           support@quantumbioinc.com"
        exit 1
    fi

else
    echo "WARNING: lig_${filename}.atms NOT FOUND!"
fi

if [ ! -e mp_${filename}.atms ] ; then
    atmlist=`cat mp_${filename}.atms  | tr '\n' ' ' | sed 's/    ATOM //g'`
    echo "calnuc=0" > mp_${filename}.ini
    echo "maxit=300" >> mp_${filename}.ini
    echo "[nmr]" >> mp_${filename}.ini
    echo "atom=${atmlist%?}" >> mp_${filename}.ini

    if ( ${QBHOME}/bin/divcon --nmr -i mp_${filename}.mol2  --hamiltonian=mndo_nmr -I mp_${filename}.ini -O --standard -d mp_${filename}.h5 --charge=labute --screen ) ; then
        echo ; echo "Complex NMR Calculation Successful" ; echo
    else
        echo ; echo "Complex NMR Calculation Unsuccessful - try running with --enableMinimization" ; echo
               echo "   NOTE: NMR Support in DivCon5.x is considered beta. In order to help improve the"
               echo "           algorithm, if possible please send input along with divcon.log file to"
               echo "           support@quantumbioinc.com"
        exit 1
    fi

else
    echo "ERROR: mp_${filename}.atms NOT FOUND! (complex required)"
    errorOut
fi

if [ ! -e targ_${filename}.atms ] ; then
    atmlist=`cat targ_${filename}.atms  | tr '\n' ' ' | sed 's/    ATOM //g'`
    echo "calnuc=0" > targ_${filename}.ini
    echo "maxit=300" >> targ_${filename}.ini
    echo "[nmr]" >> targ_${filename}.ini
    echo "atom=${atmlist%?}" >> targ_${filename}.ini

    if ( ${QBHOME}/bin/divcon --nmr -i targ_${filename}.mol2  --hamiltonian=mndo_nmr -I targ_${filename}.ini -O --standard -d targ_${filename}.h5 --charge=labute --screen ) ; then
        echo ; echo "Target NMR Calculation Successful" ; echo
    else
        echo ; echo "Target NMR Calculation Unsuccessful - try running with --enableMinimization" ; echo
               echo "   NOTE: NMR Support in DivCon5.x is considered beta. In order to help improve the"
               echo "           algorithm, if possible please send input along with divcon.log file to"
               echo "           support@quantumbioinc.com"
        exit 1
    fi

else
    echo "WARNING: targ_${filename}.atms NOT FOUND!"
fi

${QBHOME}/bin/qbmoebatch -exec "qbProcessComplexCSP  ['targ_${filename}.mol2','lig_${filename}.mol2','targ_${filename}.h5','lig_${filename}.h5','mp_${filename}.h5']" -exit

